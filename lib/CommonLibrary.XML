<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonLibrary</name>
    </assembly>
    <members>
        <member name="T:ComLib.Web.HttpHandlers.ImageHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="T:ComLib.Web.HttpHandlers.HandlerBase">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.#ctor">
            <summary>
            Default construction. Initialize.
            </summary>
        </member>
        <member name="F:ComLib.Web.HttpHandlers.HandlerBase._content">
            <summary>
            The content to write back to the response.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom 
            HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides 
            references to the intrinsic server objects 
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.SetHeaders(System.Web.HttpContext,System.Object,System.Int32)">
            <summary>
            Sets the context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.Init">
            <summary>
            Allows for initialization after construction.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.WriteContent(System.Web.HttpContext)">
            <summary>
            Write the response content.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerBase.GetFile(System.String)">
            <summary>
            Get the css file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.Extension">
            <summary>
            The extension for this handler.
            e.g. .css.
            </summary>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.ExtensionForContent">
            <summary>
            Used to set content type.
            </summary>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.ConfigSectionName">
            <summary>
            The name of the section to use for this specific handler.
            </summary>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.Config">
            <summary>
            Configuration settings as IDictionary.
            </summary>
        </member>
        <member name="P:ComLib.Web.HttpHandlers.HandlerBase.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.Init(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Set the configuration settings as an IDictionary.
            </summary>
            <param name="sectionname">Section name</param>
            <param name="useSection">Whether or not to use the section name.</param>
            <param name="config"></param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.InitExternalHandler(System.Func{System.Web.HttpContext,System.Boolean})">
            <summary>
            Initialize the external handler.
            </summary>
            <param name="imageHandler"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.ImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Handle the request for the image file.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ComLib.PageRotator">
            <summary>
            Rotates the pages.
            </summary>
        </member>
        <member name="M:ComLib.PageRotator.#ctor">
            <summary>
            Consturctor.
            </summary>
        </member>
        <member name="M:ComLib.PageRotator.MoveNext(System.Int32)">
            <summary>
            Move to next page using new number of total records.
            </summary>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.PageRotator.MoveNext">
            <summary>
            Move to next page using existing total records.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.PageRotator.TotalRec">
            <summary>
            total records
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.TotalPages">
            <summary>
            Total pages.
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.HasPages">
            <summary>
            Are there any pages
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.RecPerPage">
            <summary>
            records per page
            </summary>
        </member>
        <member name="P:ComLib.PageRotator.CurrentPage">
            <summary>
            Current page.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateService">
            <summary>
            Service class for StatusUpdate.
            </summary>
            <summary>
            Assign global values to be used for a specific batch run.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityService`1">
            <summary>
            Service class used for handling entity actions.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.IEntityService`1">
            <summary>
            The model service handles all actions on the model.
            This includes CRUD operations which are delegated to the 
            ModelRespository after a ModelService performs any appropriate
            security checks among other things.
            </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.IEntityService">
            <summary>
            Non-Typed base interface for an EntityService
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityService.GetValidator">
            <summary>
            Get the validator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.Create(ComLib.IActionContext)">
            <summary> 
            Creates the entity. 
            </summary> 
            <param name="ctx"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Entities.IEntityService.Update(ComLib.IActionContext)">
            <summary>
            Updates the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.Save(ComLib.IActionContext)">
            <summary>
            Saves the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.Delete(System.Int32)">
            <summary>
            Deletes the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.DeleteAll">
            <summary>
            Delete all entities from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.Delete(ComLib.IActionContext)">
            <summary>
            Deletes the entity from the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService.GetRecentAs``1(System.Int32,System.Int32)">
            <summary>
            Get recent items as a different type.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IEntityService.Validator">
            <summary> 
            The validator for the model. 
            </summary> 
        </member>
        <member name="P:ComLib.Entities.IEntityService.Settings">
            <summary>
            Configuration settings for the service.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityService.Resources">
            <summary>
            Localized resource manager.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetSettings``1">
            <summary>
            Get the settings as a typed object.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Init">
            <summary>
            This method is useful for derived classes to implement 
            their own initialization behaviour.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Create(`0)">
            <summary> 
            Creates the entity. 
            </summary> 
            <param name="ctx"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create multiple
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Create(System.Collections.Generic.IList{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Update(`0)">
            <summary>
            Updates the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Updates multiple entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Save(`0)">
            <summary>
            Saves the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Delete(`0)">
            <summary>
            Deletes the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Get(System.Int32)">
            <summary>
            Gets the entity in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Get(ComLib.IActionContext)">
            <summary> 
            Retrieves the entity from the repository.
            You can specify either the id or object.
            </summary> 
            <param name="id"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetAll">
            <summary>
            Retrieves all the instances of the model from the repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetAll(ComLib.IActionContext)">
            <summary>
            Retrieves all the instances of the model from the repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetAllItems(ComLib.IActionContext)">
            <summary>
            Retrieve all items as a non-generic list.
            This is to allow retrieving all items across different types using reflection.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Get(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page using IQuery.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Find(System.String)">
            <summary>
            Get all items at once(without paging records) using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Find(ComLib.Data.IQuery)">
            <summary>
            Finds entities using the specified criteria.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.First(System.String)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.FindByUser(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page and by the user who created them.
            </summary>
            <param name="userName">Name of user who created the entities.</param>
            <param name="pageNumber">Page number to get. e.g. 1</param>
            <param name="pageSize">Number of records per page. e.g. 15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.GetRecent(System.Int32,System.Int32)">
            <summary>
            Get recent items by page.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.IEntityService`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:ComLib.Entities.IEntityService`1.Repository">
            <summary> 
            The resposity for the model. 
            </summary> 
        </member>
        <member name="M:ComLib.Entities.EntityService`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:Service&lt;TId, T&gt;"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.#ctor(ComLib.Entities.IRepository{`0},ComLib.Entities.IEntityValidator,ComLib.Entities.IEntitySettings)">
            <summary>
            Initialize with Repository and validator.
            </summary>
            <param name="repository">PesistantStorage for the entity.</param>
            <param name="settings">Settings for the entity.</param>
            <param name="validator">Validator for the entity</param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Init">
            <summary>
            This method is useful for derived classes to implement 
            their own initialization behaviour.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetSettings``1">
            <summary>
            Get the settings as a typed object.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetValidator">
            <summary>
            Get the validator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Create(`0)">
            <summary>
            Creates the entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create multiple entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Create(System.Collections.Generic.IList{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entities"></param>
            <param name="checkFields"></param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Create(ComLib.IActionContext)">
            <summary>
            Creates the entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.InternalCreate(ComLib.IActionContext,System.Action{ComLib.IActionContext})">
            <summary>
            Creates the entity.
            </summary>
            <param name="ctx"></param>
            <param name="executor">The executor to call to create the entity. 
            If empty, _repository.Create(entity) is automatically called.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Update(`0)">
            <summary>
            Creates the entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Updates multiple entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Update(ComLib.IActionContext)">
            <summary>
            Updates the model in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.InternalUpdate(ComLib.IActionContext,System.Action{ComLib.IActionContext})">
            <summary>
            Updates the model in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Save(`0)">
            <summary>
            Saves the entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Save(ComLib.IActionContext)">
            <summary>
            Updates the model in the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Delete(`0)">
            <summary>
            Creates the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Delete(System.Int32)">
            <summary>
            Creates the entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.DeleteAll">
            <summary>
            Delete all entities from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Delete(ComLib.IActionContext)">
            <summary>
            Deletes the model from the repository.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Get(System.Int32)">
            <summary>
            Creates the entity.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Get(ComLib.IActionContext)">
            <summary>
            Retrieves the model from the repository.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetAll">
            <summary>
            Creates the entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetAll(ComLib.IActionContext)">
            <summary>
            Retrieves all the instances of the model from the repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetAllItems(ComLib.IActionContext)">
            <summary>
            Retrieves all the instances of the model from the repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Get(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="pageNumber">Page number to get. e.g. 1</param>
            <param name="pageSize">Number of records per page. e.g. 15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page using the specified criteria.
            </summary>
            <param name="pageNumber">Page number to get. e.g. 1</param>
            <param name="pageSize">Number of records per page. e.g. 15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.First(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.FindByUser(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page and by the user who created them.
            </summary>
            <param name="userName">Name of user who created the entities.</param>
            <param name="pageNumber">Page number to get. e.g. 1</param>
            <param name="pageSize">Number of records per page. e.g. 15</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Find(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter">The sql filter string to use.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Find(ComLib.Data.IQuery)">
            <summary>
            Get items by page using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.GetRecentAs``1(System.Int32,System.Int32)">
            <summary>
            Get recent items as a different type.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.PerformAction(ComLib.IActionContext,System.Action{ComLib.IActionContext},ComLib.Entities.EntityAction)">
            <summary>
            Performs the action.
            </summary>
            <param name="ctx">The actioncontext.</param>
            <param name="action">Delegate to call to perform the action on the model.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.PerformValidation(ComLib.IActionContext,ComLib.Entities.EntityAction)">
            <summary>
            Performs the validation on the model.
            </summary>
            <param name="ctx">The action context.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.PerformAuthentication(ComLib.IActionContext)">
            <summary>
            Performs authentication to determine if the current use is allowed to edit
            this entity.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityService`1.ApplyMassageOnAuditData(ComLib.IActionContext,ComLib.Entities.EntityAction)">
            <summary>
            Massage the data before validation.
            e.g. Convert cityname, county name to CountryId for persistance.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="P:ComLib.Entities.EntityService`1.Repository">
            <summary>
            The resposity for the model.
            </summary>
            <value></value>
        </member>
        <member name="P:ComLib.Entities.EntityService`1.Resources">
            <summary>
            Resources used for the service.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityService`1.Validator">
            <summary>
            The validator for the model.
            </summary>
            <value></value>
        </member>
        <member name="P:ComLib.Entities.EntityService`1.Settings">
            <summary>
            Configuration settings for the service.
            </summary>
            <value></value>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateService.#ctor">
            <summary>
            default construction
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateService.PerformValidation(ComLib.IActionContext,ComLib.Entities.EntityAction)">
            <summary>
            Get list of data massagers for the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdateService.BatchName">
            <summary>
            Name of the batch. e.g. "EndOfMonth"
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdateService.BatchTime">
            <summary>
            Batch time - Start time of the batch.
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdateService.BatchId">
            <summary>
            Batch id identifies a single batch between multiple batch names,
            business dates.
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdateService.BusinessDate">
            <summary>
            Business date of the batch / tasks run.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateSettings">
            <summary>
            Settings class for StatusUpdate.
            </summary>
            <typeparam name="?"></typeparam>
        </member>
        <member name="T:ComLib.Entities.EntitySettings`1">
            <summary>
            This settings class uses the configSourceDecorator to allow the config settings
            to be either file based or database based.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Configuration.ConfigSourceDynamic">
            <summary>
            Config source dynamicall saves all properties that are in this or sub-classed type.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceBase.Init">
            <summary>
            Called after construction
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceBase.Load">
            <summary>
            Load the config settings from the underlying datasource.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceBase.Save">
            <summary>
            Save the config settings to the underlying datasource.
            </summary>
        </member>
        <member name="E:ComLib.Configuration.IConfigSourceBase.OnConfigSourceChanged">
            <summary>
            Event handler when the configuration store changes.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.IConfigSourceBase.SourcePath">
            <summary>
            Name of the source.
            This cane be the file path.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceDynamic.Load(System.Object)">
            <summary>
            Load the config settings from the underlying datasource via full life-cycle.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceDynamic.Save(System.Object)">
            <summary>
            Save the config settings to the underlying datasource via full life-cycle.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceDynamic.OnBeforeLoad">
            <summary>
            Called before loading.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceDynamic.OnLoad(System.Object)">
            <summary>
            Called to load the config values.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceDynamic.OnAfterLoad">
            <summary>
            Called after loading.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceDynamic.OnBeforeSave">
            <summary>
            Called before saving.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceDynamic.OnSave(System.Object)">
            <summary>
            Called to save the values.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.IConfigSourceDynamic.OnAfterSave">
            <summary>
            Called after saving.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initialize with the reference to source path.
            </summary>
            <param name="appName">E.g. "MyWebApp"</param>
            <param name="configName">E.g. "Dev.config"</param>
            <param name="sourcePath">File path or connectionstring</param>
            <param name="isSourcePathFileBased">Whether or not the source path is a file path or database connection string.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.#ctor(System.String,System.String,ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem})">
            <summary>
            Initialize w/ lamda factory method for creating the configSourcePersistant
            </summary>
            <param name="appName">E.g. "MyWebApp"</param>
            <param name="configName">E.g. "Dev.config"</param>
            <param name="configStoreFactoryMethod"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.#ctor(System.String,System.String,System.Func{ComLib.Configuration.IConfigSource})">
            <summary>
            Initialize w/ lamda factory method for creating the configSourcePersistant
            </summary>
            <param name="appName">E.g. "MyWebApp"</param>
            <param name="configName">E.g. "Dev.config"</param>
            <param name="configStoreFactoryMethod"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Init">
            <summary>
            Called after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.SetRepository(System.Func{ComLib.Configuration.IConfigSource},ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem})">
            <summary>
            On initialize called after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Init(System.String,System.String,System.Func{ComLib.Configuration.IConfigSource},ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem})">
            <summary>
            On initialize called after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Load">
            <summary>
            Load the settings from the datastore.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Load(System.Object)">
            <summary>
            Load the settings from the datastore.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Save">
            <summary>
            Save the settings to the datastore.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Save(System.Object)">
            <summary>
            Save the config settings object provided to the datasource.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDynamic.Execute(System.Action)">
            <summary>
            Execute the action in try catch.
            </summary>
            <param name="action"></param>
        </member>
        <member name="E:ComLib.Configuration.ConfigSourceDynamic.OnConfigSourceChanged">
            <summary>
            Event handler for when the underlying config source changed.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.Storage">
            <summary>
            Get the underlying storage.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.SourcePath">
            <summary>
            The source file path.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.AppName">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.ConfigName">
            <summary>
            Config name
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.ExcludedProps">
            <summary>
            List of all the props that should be excluded during load/save.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDynamic.IncludedProps">
            <summary>
            Dictionary of all the props that should be included during load/save.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntitySettings">
            <summary>
            Interface for the models service settings that ares used to 
            configuration settings for the model service.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ComLib.Entities.IEntitySettings.EnableAuthentication">
            <summary>
            Whether authentication is required to edit the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntitySettings.EnableValidation">
            <summary>
            Whether or not to validate the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntitySettings.EditRoles">
            <summary>
            Roles allowed to edit the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntitySettings`1.SetCoreFlags(System.Boolean,System.Boolean,System.String)">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntitySettings`1.EnableAuthentication">
            <summary>
            Whether authentication is required to edit the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntitySettings`1.EnableValidation">
            <summary>
            Whether or not to validate the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntitySettings`1.EditRoles">
            <summary>
            Roles allowed to edit the entity.
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateSettings.Init">
            <summary>
            Initalize settings.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateResources">
            <summary>
            Settings class for StatusUpdate.
            </summary>
            <typeparam name="?"></typeparam>
        </member>
        <member name="T:ComLib.Entities.EntityResources">
            <summary>
            Localization resource provider for the entity.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityResources">
            <summary>
            Localization resource provider for entity.
            </summary>
        </member>
        <member name="T:ComLib.Locale.ILocalizationResourceProvider">
            <summary>
            Simple interface for a localized resource manager.
            </summary>
        </member>
        <member name="M:ComLib.Locale.ILocalizationResourceProvider.GetString(System.String)">
            <summary>
            Get the localized string given the key name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.ILocalizationResourceProvider.GetString(System.String,System.String)">
            <summary>
            Get the localized string given the key name, if it doesn't exist, use the default value.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.ILocalizationResourceProvider.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get the localized string given the key name and culture info.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.ILocalizationResourceProvider.GetString(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Get the localized string given the key name and culture info.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Locale.ILocalizationResourceProvider.Item(System.String)">
            <summary>
            Get / set the localized resource string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IEntityResources.EntityName">
            <summary>
            Get the name of the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityResources.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityResources.#ctor(System.String)">
            <summary>
            Initialize w/ resource file.
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:ComLib.Entities.EntityResources.#ctor(ComLib.Configuration.IConfigSource)">
            <summary>
            Initialize w/ config source containing the resource strings.
            </summary>
            <param name="configSource"></param>
        </member>
        <member name="M:ComLib.Entities.EntityResources.GetString(System.String)">
            <summary>
            Get the resource string associated with the key.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityResources.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get the resource string associated with the key and culture info.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityResources.GetString(System.String,System.String)">
            <summary>
            Check if resource string exists with the specified name.
            If exists, return resource string, otherwise return string value.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityResources.GetString(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Check if resource string exists with the specified name.
            If exists, return resource string, otherwise return string value.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.EntityResources.EntityName">
            <summary>
            Get the name of the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityResources.Item(System.String)">
            <summary>
            Get / set the resource string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateConstants">
            <summary>
            Constants representing the various status.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdates">
            <summary>
            StatusUpdate extensions with helper methods
            </summary>
            <summary>
            Active record functionality for StatusUpdate
            </summary>
        </member>
        <member name="T:ComLib.Entities.ActiveRecordBase`1">
            <summary>
            <para>
            Provides only Active record support for IEntity
            1. Crud methods
            2. Find methods
            No validation supported.
            </para>
            </summary>
            <remarks>
            <para>
            If .NET supported multiple inheritance, this class would extend from
            both DomainObject, and ActiveRecord, however the IActiveRecord interface
            has to be implemented in this class.
            1. Possible alternatives are extension methods 
            2. delegation.
            </para>
            </remarks>
            <typeparam name="TId">The type of the id.</typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(ComLib.Entities.IEntityService{`0})">
            <summary>
            Initialize the behaviour of creating the service and repository.
            </summary>
            <param name="useSingletonService"></param>
            <param name="useSingletonRepository"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(ComLib.Entities.IEntityService{`0},System.Boolean)">
            <summary>
            Singleton service and repository with optional flag to indicate 
            whether or not to configure the repository.
            </summary>
            <param name="service"></param>
            <param name="configureRepository"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId">The connId to use when configuring the repository.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator">The validator creator</param>
            <param name="settings">The settings for the entity.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="configureRepo">Whether or not the repository should be configured.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,ComLib.Entities.IEntityResources,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Create(`0)">
            <summary>
            Creates the entity
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Creates the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Create(System.Collections.Generic.IList{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entities"></param>
            <param name="checkFields"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Update(`0)">
            <summary>
            Updates the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Updates the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Save(`0)">
            <summary>
            Saves the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Delete(`0)">
            <summary>
            Deletes the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.DeleteAll">
            <summary>
            Deletes all the entities from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Delete(System.Int32)">
            <summary>
            Delete the model associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Get(System.Int32)">
            <summary>
            Retrieve the model associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.GetAll">
            <summary>
            Retrieve all instances of model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Get(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.First(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page using Criteria.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Find(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter">e.g. "UserNameLowered = 'kishore'"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Find(ComLib.Data.IQuery)">
            <summary>
            Get items by page using Criteria
            </summary>
            <param name="filter">e.g. "UserNameLowered = 'kishore'"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.GetRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="table">"BlogPosts"</param>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBase`1.DoEntityAction(`0,System.Action{ComLib.IActionContext,ComLib.Entities.IEntityService{`0}})">
            <summary>
            Performs the actual entity action specified by the delegate <paramref name="executor"/>
            </summary>
            <param name="entity"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.ActiveRecordBase`1.Moderators">
            <summary>
            Comma delimited string of roles that can moderate instances of this entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.ActiveRecordBase`1.Repository">
            <summary>
            Get the repository associated w/ this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdates.Update(System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Update status for the specified runId, taskname combination.
            </summary>
            <remarks>Overloaded convenience method.</remarks>
            <param name="statusExpression">"RUN001:Delta:Started"</param>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdates.New">
            <summary>
            Creates a new instance of BlogPost and 
            initializes it with a validator and settings.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdates.Service">
            <summary>
            Get the singleton service.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateMassager">
            <summary>
            Data massager for StatusUpdates.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.EntityMassager">
            <summary>
            Data massager for an entity.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.IEntityMassager">
            <summary>
            Interface for an entity data massager.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.IEntityMassager.Massage(System.Object,ComLib.Entities.EntityAction)">
            <summary>
            Massage
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.EntityMassager.Massage(System.Object,ComLib.Entities.EntityAction)">
            <summary>
            Massage the entity data given the entity action.
            </summary>
            <param name="entity"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateMassager.Massage(System.Object,ComLib.Entities.EntityAction)">
            <summary>
            Populate the username, computer and comment.
            </summary>
            <param name="entity"></param>
            <param name="action"></param>
        </member>
        <member name="T:ComLib.Scheduling.Trigger">
            <summary>
            Trigger for schedule entry. Represents when / how often to run a task.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.MaxRuns(System.Int32)">
            <summary>
            Set the max runs
            </summary>
            <param name="maxRuns">The max runs.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.StopAt(System.DateTime)">
            <summary>
            Set the stop time.
            </summary>
            <param name="timeToStop">The time to stop.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.Every(System.TimeSpan)">
            <summary>
            Set up a repeating time.
            </summary>
            <param name="timespan">The timespan.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.Trigger.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.IRepositoryConfigurable">
            <summary>
            
            </summary>
        </member>
        <member name="P:ComLib.Entities.IRepositoryConfigurable.Database">
            <summary>
            Gets or sets the db helper.
            </summary>
            <value>The helper.</value>
        </member>
        <member name="P:ComLib.Entities.IRepositoryConfigurable.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:ComLib.Entities.IRepositoryConfigurable.ConnectionString">
            <summary>
            Gets the connection STR.
            </summary>
            <value>The connection STR.</value>
        </member>
        <member name="T:ComLib.Entities.IRepositoryQueryable">
            <summary>
            Repository that is Queryable withOUT CRUD/persistance methods.
            This allows some basic functionality across any table, regardless
            of the entities it stores.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.AddNamedFilter(System.String,ComLib.Data.IQuery)">
            <summary>
            Add named filter.
            e.g. "Published last week" => Criteria.Where("CreateDate").Between(1.Week.Ago, DateTime.Now)
            </summary>
            <param name="filterName"></param>
            <param name="criteria"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Any(System.String)">
            <summary>
            Checks whether there are any records that the named filter
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.Any(ComLib.Data.IQuery)">
            <summary>
            Chekcs where there are any records that match the criteria filter.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.AnyBySql(System.String)">
            <summary>
            Get datatable using the sql supplied.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.ToTable">
            <summary>
            Get Table containing all the records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.ToTable(ComLib.Data.IQuery)">
            <summary>
            Get datatable using the IQuery filter
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.ToTable(System.String)">
            <summary>
            Get datatable using the filtername.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryQueryable.ToTableBySql(System.String)">
            <summary>
            Get datatable using the sql filter.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IRepositoryQueryable.TableName">
            <summary>
            The name of the table associated w/ this repository.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IRepositoryQueryable.ParamPrefix">
            <summary>
            Prefix to use for parameterized queries.
            e.g. @ for sql server.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IRepositoryQueryable.NamedFilters">
            <summary>
            Dictionary of named filters/criteria.
            Useful when doing Count("ActiveUsers");
            Or Avg("Rating", "PopularPosts")
            </summary>
        </member>
        <member name="T:ComLib.Entities.IRepositoryWithId`2">
            <summary>
            Interface for a DAO(Data Access Object) to support CRUD operations.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="IdT"></typeparam>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Create(`1)">
            <summary>
            Create an entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Create(System.Collections.Generic.IList{`1})">
            <summary>
            Create a list of entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Create(`1,System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Creates the entity conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entities"></param>
            <param name="conditions"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Copy(`1)">
            <summary>
            Copies the entity and returns the copy.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Get(`0)">
            <summary>
            Retrieve the entity by it's key/id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.GetAll">
            <summary>
            Retrieve all the entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.GetAllItems">
            <summary>
            Retrieve all the entities into a non-generic list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Update(`1)">
            <summary>
            UPdate the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Update(System.Collections.Generic.IList{`1})">
            <summary>
            Create a list of entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Delete(`0)">
            <summary>
            Delete the entitiy by it's key/id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Delete(`1)">
            <summary>
            Delete the entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Delete(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Delete(ComLib.Data.IQuery)">
            <summary>
            Delete by criteria
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.DeleteByNamedFilter(System.String)">
            <summary>
            Delete by criteria
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.DeleteAll">
            <summary>
            Delete all entities from the repository.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Save(`1)">
            <summary>
            Create or update an entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Save(System.Collections.Generic.IList{`1})">
            <summary>
            Create or update all entities
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.ToLookUp">
            <summary>
            Create dictionary of all entities using the Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.ToLookUp(System.String)">
            <summary>
            Create dictionary of all entities using the Id after applying named filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.ToLookUpMulti``1(System.String)">
            <summary>
            Lookup on 2 values. Creates lookup on Id and Id2
            </summary>
            <typeparam name="Id2"></typeparam>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.ToLookUpMulti``1(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Lookup on 2 values. Creates lookup on Id and Id2
            </summary>
            <typeparam name="Id2"></typeparam>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.ToLookUpMulti``1(System.String,System.String)">
            <summary>
            Lookup on 2 values. Creates lookup on Id and Id2 after applying the named Filter.
            </summary>
            <typeparam name="Id2"></typeparam>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Find(System.String)">
            <summary>
            Find by using the sql string
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Find(ComLib.Data.IQuery)">
            <summary>
            Find by query
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.FindByNamedFilter(System.String)">
            <summary>
            Find by named filter.
            </summary>
            <param name="namedFilter">e.g. "Most Popular Posts"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Find(System.String,System.Boolean)">
            <summary>
            Find using the sql provided.
            </summary>
            <param name="sql"></param>
            <param name="isFullSql">If true, assumes that the sql contains "select * from table ..."</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Find items by page using sql
            </summary>        
            <param name="sql">Sql to use for filter</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Find items by page using criteria
            </summary>
            <param name="criteria">Criteria object representing filter.</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.FindByNamedFilter(System.String,System.Int32,System.Int32)">
            <summary>
            Find items by page using named filter
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page based on latest / most recent create date.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.FindRecentAs``1(System.Int32,System.Int32)">
            <summary>
            Find the recent items and convert them to a different type.
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.First(System.String)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.First(ComLib.Data.IQuery)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryWithId`2.FirstByNamedFilter(System.String)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.IRepository`1">
            <summary>
            Interface for Repository with default primary key as int.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IRepositoryVersionable`1">
            <summary>
            Wrapper around Repository to version the entities.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.IRepositoryVersionable`1.RollBack(System.Int32)">
            <summary>
            Roll back the version of the entity with the specified id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryVersionable`1.RollBack(`0)">
            <summary>
            Rollback the specified entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.IRepositoryVersionable`1.GetAllVersions(System.Int32)">
            <summary>
            Get all the versions ( latest / historic ) for the specified entity with id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IRepositoryVersionable`1.Find(ComLib.Data.IQuery,System.Boolean)">
            <summary>
            Find entities using the criteria with option to get only the latest versions and
            not all ( latest/historic ).
            </summary>
            <param name="criteria"></param>
            <param name="onlyLatestVersions"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IRepositoryVersionable`1.IsVersioned">
            <summary>
            To enable / disable versioning.
            </summary>
        </member>
        <member name="T:ComLib.Parsing.TokenReaderSettings">
            <summary>
            Settings for the token reader class.
            </summary>
        </member>
        <member name="F:ComLib.Parsing.TokenReaderSettings.EscapeChar">
            <summary>
            Char used to escape.
            </summary>
        </member>
        <member name="F:ComLib.Parsing.TokenReaderSettings.Tokens">
            <summary>
            Tokens
            </summary>
        </member>
        <member name="F:ComLib.Parsing.TokenReaderSettings.WhiteSpaceTokens">
            <summary>
            White space tokens.
            </summary>
        </member>
        <member name="F:ComLib.Parsing.TokenReaderSettings.EolTokens">
            <summary>
            End of line chars.
            </summary>
        </member>
        <member name="T:ComLib.Parsing.ITokenReader">
            <summary>
            Interface for a Token reader.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.#ctor">
            <summary>
            Initialize
            </summary>
            <param name="text"></param>
            <param name="escapeChar"></param>
            <param name="tokens"></param>
            <param name="whiteSpaceTokens"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.#ctor(System.String,System.String,System.String[],System.String[],System.String[])">
            <summary>
            Initialize
            </summary>
            <param name="text"></param>
            <param name="escapeChar"></param>
            <param name="tokens"></param>
            <param name="whiteSpaceTokens"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.Init(System.String,ComLib.Parsing.TokenReaderSettings)">
            <summary>
            Initialize using settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.Init(System.String,System.String,System.String[],System.String[],System.String[])">
            <summary>
            Initialize default instance.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.RegisterEol(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Store the end of line chars.
            </summary>
            <param name="eolchars"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.RegisterWhiteSpace(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Store the white space chars.
            </summary>
            <param name="whitespaceChars"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.Reset">
            <summary>
            Reset reader for parsing again.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.PeekChar">
            <summary>
            Returns the char at current position + 1.
            </summary>
            <param name="count"></param>
            <returns>Next char or string.empty if end of text.</returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.PeekChars(System.Int32)">
            <summary>
            Returns the chars starting at current position + 1 and
            including the <paramref name="count"/> number of characters.
            </summary>
            <param name="count"></param>
            <returns>Range of chars as string or string.empty if end of text.</returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.PeekLine">
            <summary>
            Peeks at the string all the way until the end of line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ConsumeChar">
            <summary>
            Advance and consume the current current char without storing 
            the char in the additional buffer for undo.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ConsumeChars(System.Int32)">
            <summary>
            Consume the next <paramref name="count"/> chars without
            storing them in the additional buffer for undo.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ConsumeWhiteSpace">
            <summary>
            
            </summary>
            <param name="readFirst"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ConsumeWhiteSpace(System.Boolean)">
            <summary>
            Consume all white space.
            This works by checking the next char against
            the chars in the dictionary of chars supplied during initialization.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ConsumeWhiteSpace(System.Int32@,System.Int32@)">
            <summary>
            Consume white space and return number of times the tab char was consumed,
            and the number of 
            </summary>
            <param name="tabCount"></param>
            <param name="whiteSpace"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ConsumeNewLine">
            <summary>
            Consume new line.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ConsumeNewLines">
            <summary>
            Consume New Lines.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ReadBackChar">
            <summary>
            Read back the last char and reset
            </summary>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ReadBackChar(System.Int32)">
            <summary>
            Unwinds the reader by <paramref name="count"/> chars.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ReadChar">
            <summary>
            Read the next char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ReadChars(System.Int32)">
            <summary>
            Read the next <paramref name="count"/> number of chars.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ReadToEol">
            <summary>
            Read text up to the eol.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.ReadToken(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Read text up to the eol.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.CurrentCharIndex">
            <summary>
            Current position in text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.CurrentCharInt">
            <summary>
            An integer representation of the current char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.IsToken">
            <summary>
            Determine if current char is token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.IsEscape">
            <summary>
            Determine if current char is escape char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.IsEnd">
            <summary>
            Determine if the end of the text input has been reached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.IsAtEnd">
            <summary>
            Determine if at last char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.IsEol">
            <summary>
            Is End of line
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.IsEol(System.Collections.IDictionary)">
            <summary>
            Determine if current char is EOL.
            </summary>
            <param name="eolChars"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.IsWhiteSpace(System.Collections.IDictionary)">
            <summary>
            Determine if current char is whitespace.
            </summary>
            <param name="whitespaceChars"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.TokenReader.IsWhiteSpace">
            <summary>
            Determine if current char is whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Parsing.TokenReader.CurrentChar">
            <summary>
            Current char.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Parsing.TokenReader.PreviousChar">
            <summary>
            Get the previous char that was read in.
            </summary>
        </member>
        <member name="P:ComLib.Parsing.TokenReader.EolChars">
            <summary>
            Get the end of line chars.
            </summary>
        </member>
        <member name="P:ComLib.Parsing.TokenReader.PreviousCharAny">
            <summary>
            Get the previous char that is part of the input and which may be an escape char.
            </summary>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryValidator">
            <summary>
            Extend the validation with validation of the query's parameters if there are any.
            </summary>
            <summary>
            Validator for NamedQuery
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityValidator">
            <summary>
            Validator a domain object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.ValidationSupport.Validator">
            <summary>
            Base class for any validator.
            </summary>
        </member>
        <member name="T:ComLib.IValidator">
            <summary>
            Interface for a validator that supports both stateful and non-stateful
            validation.
            </summary>
        </member>
        <member name="T:ComLib.IValidatorStateful">
            <summary>
            Interface for a class that can serve as a validator.
            This interface is stateful which means it stores the last validation result,
            the object being validated.
            </summary>
        </member>
        <member name="M:ComLib.IValidatorStateful.Validate">
            <summary>
            Performs validation on data provided during initialization/construction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.IValidatorStateful.Validate(ComLib.IValidationResults)">
            <summary>
            Validate using the results collection provided.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IValidatorStateful.Clear">
            <summary>
            Clear the results.
            </summary>
        </member>
        <member name="P:ComLib.IValidatorStateful.Target">
            <summary>
            The object to validate.
            </summary>
        </member>
        <member name="P:ComLib.IValidatorStateful.Message">
            <summary>
            Message to use for a validation failure.
            </summary>
        </member>
        <member name="P:ComLib.IValidatorStateful.IsValid">
            <summary>
            method to determine if validation has passed
            or failed for the object(s) being validated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.IValidatorStateful.Results">
            <summary>
            The last validation results.
            </summary>
        </member>
        <member name="T:ComLib.IValidatorNonStateful">
            <summary>
            Interface for a validator that does not store any stateful instance data.
            This allows for the entire validation to be done in one method.
            </summary>
        </member>
        <member name="M:ComLib.IValidatorNonStateful.ValidateTarget(System.Object)">
            <summary>
            Validates <paramref name="target"/> and returns a new <see cref="T:ComLib.ValidationResults"/> with
            all the <see cref="!:ValidationResult"/> entries that represent the validation failures.
            </summary>
            <param name="target">The object to validate.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:ComLib.IValidatorNonStateful.Validate(System.Object,ComLib.IValidationResults)">
            <summary>
            Validates <paramref name="target"/> and adds <see cref="!:ValidationResult"/> entires 
            representing failures to the supplied <paramref name="validationResults"/>.
            </summary>
            <param name="target">The object to validate.</param>
            <param name="validationResults">The <see cref="T:ComLib.ValidationResults"/> where the validation failures
            should be collected.</param>
        </member>
        <member name="M:ComLib.IValidatorNonStateful.Validate(ComLib.ValidationEvent)">
            <summary>
            Validate using the supplied validation event that encapsulates both the target and results.
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Validate">
            <summary>
            Validate data using data provided during initialization/construction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.ValidateTarget(System.Object)">
            <summary>
            Validate using the object provided.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Validate(ComLib.IValidationResults)">
            <summary>
            Validate using the results collection provided.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Validate(System.Object,ComLib.IValidationResults)">
            <summary>
            Validate using the object provided, and add errors to the results list provided.
            </summary>
            <param name="target"></param>
            <param name="results"></param>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.Validate(ComLib.ValidationEvent)">
            <summary>
            This Method will call the ValidateInternal method of this validator.
            </summary>
            <remarks>
            The reason that the ValidateInternal method is NOT called directly by the
            other Validate methods is because the CodeGenerator generates the Validation
            code inside of the ValidateInternal method.
            If a client wants to override the validation while sill leveraging the autogenerated
            validation code, it can be done by overrideing this method and calling the
            ValidateInternal method.
            This allows a lot of flexibility for codegeneration.
            </remarks>
            <param name="target"></param>
            <param name="useTarget"></param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Implement this method.
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validator.AddResult(ComLib.IValidationResults,System.String,System.String)">
            <summary>
            Add a new result to the list of errors.
            </summary>
            <param name="results"></param>
            <param name="key"></param>
            <param name="message"></param>
            <param name="target"></param>
        </member>
        <member name="P:ComLib.ValidationSupport.Validator.Target">
            <summary>
            The object to validate.
            </summary>
        </member>
        <member name="P:ComLib.ValidationSupport.Validator.Message">
            <summary>
            Message to use for the description of an error.
            </summary>
        </member>
        <member name="P:ComLib.ValidationSupport.Validator.IsValid">
            <summary>
            Simple true/false to indicate if validation passed.
            </summary>
        </member>
        <member name="P:ComLib.ValidationSupport.Validator.Results">
            <summary>
            The results of the last validation.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityValidator">
            <summary>
            Reuse the existing interface for the IValidator, but modify it 
            slightly to incorporate the entityaction being performed.
            This allows for a singleton validator using the it's non-stateful
            method.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.IEntityValidator.Validate(System.Object,ComLib.IValidationResults,ComLib.Entities.EntityAction)">
            <summary>
            Validates <paramref name="target"/> for the <paramref name="action"/> specified
            and adds <see cref="!:ValidationResult"/> entires representing
            failures to the supplied <paramref name="validationResults"/>.
            </summary>
            <param name="target">The object to validate.</param>
            <param name="validationResults">The <see cref="T:ComLib.ValidationResults"/> where the validation failures
            should be collected.</param>
        </member>
        <member name="M:ComLib.Entities.EntityValidator.Validate(System.Object,ComLib.IValidationResults,ComLib.Entities.EntityAction)">
            <summary>
            Validate using the object and the entityaction.
            </summary>
            <param name="target">object to validate.</param>
            <param name="results">results to add validation errors to.</param>
            <param name="action">entity action being done.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityValidator.GetEntityAction(ComLib.ValidationEvent)">
            <summary>
            Get the entity action from the validation event's context.
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryValidator.Validate(ComLib.ValidationEvent)">
            <summary>
            Validate the query parameters if there are any.
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validation method for the entity.
            </summary>
            <param name="target">The target.</param>
            <param name="useTarget">if set to <c>true</c> [use target].</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQuery">
            <summary>
            Extend the named query by adding parameters using a structure rather than string.
            </summary>
            <summary>
            NamedQuery entity.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComLib.Entities.ActiveRecordBaseEntity`1" -->
        <member name="T:ComLib.Entities.Entity`1">
            <summary>
            Generic based Entity class with supporting parameterless CRUD methods. 
            Create,update,save,delete.
            </summary>
            <typeparam name="T">The type of the Entity.</typeparam>
        </member>
        <member name="T:ComLib.Entities.Entity">
            <summary>
            Persistant entity that is auditable and can be validated.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
        </member>
        <member name="T:ComLib.Entities.EntityPersistantAudtiable`1">
            <summary>
            Persistant entity that is auditable.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
        </member>
        <member name="T:ComLib.Entities.EntityPersistant`1">
            <summary>
            Base class for entities than can be persisted.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
        </member>
        <member name="T:ComLib.Entities.IEntityPersistant`1">
            <summary>
            Persistant entity 
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityPersistant`1.IsPersistant">
            <summary>
            Determines whether this instance is persistant.
            </summary>
            <returns>
            	<c>true</c> if this instance is persistant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ComLib.Entities.IEntityPersistant`1.Id">
            <summary>
            Get the id of a persistant entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityPersistant`1.IsPersistant">
            <summary>
            Determines whether this instance is persistant.
            </summary>
            <returns>
            	<c>true</c> if this instance is persistant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ComLib.Entities.EntityPersistant`1.Id">
            <summary>
            Get the id of a persistant entity.
            </summary>
            <value></value>
        </member>
        <member name="T:ComLib.Entities.IEntityAuditable">
            <summary>
            Auditable entity.
            This interface is meant to provide auditing features to
            any entity/domain object.
            When changing the data model, at times it important to know.
            1. who made a change.
            2. when the change was made.
            3. who created it.
            4. what version it is.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.CreateDate">
            <summary>
            Date the entity was created.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.CreateUser">
            <summary>
            User who first created this entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.UpdateDate">
            <summary>
            Date the entitye was updated.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.UpdateUser">
            <summary>
            User who last updated the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityAuditable.UpdateComment">
            <summary>
            Comment used for updates.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.CreateDate">
            <summary>
            Create datetime.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.CreateUser">
            <summary>
            User who first created this entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.UpdateDate">
            <summary>
            Update date time
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.UpdateUser">
            <summary>
            User updating the value
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityPersistantAudtiable`1.UpdateComment">
            <summary>
            Comment to describe any updates to entity.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntity">
            <summary>
            Entity interface.
            </summary>
        </member>
        <member name="T:ComLib.Entities.IEntityCallbacks">
            <summary>
            Callbacks for the persistance lifecycle.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntity.Validate">
            <summary>
            Validate the entity and return collection of errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntity.Validate(ComLib.IValidationResults)">
            <summary>
            Validate the entity using the supplied result collection to collect errors.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.IEntity.Validate(ComLib.IValidationResults,System.Boolean)">
            <summary>
            Validate this entity and collects/stores any validation errors
            into the results supplied and optionally copies the errors into the internal error state for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IEntity.IsValid">
            <summary>
            Determines if the entity is valid.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntity.Errors">
            <summary>
            The the last validation result that is available.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.Validate">
            <summary>
            Validate this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.Validate(ComLib.IValidationResults)">
            <summary>
            Validate this entity and collects/stores any validation errors
            into the results supplied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.Validate(ComLib.IValidationResults,System.Boolean)">
            <summary>
            Validate this entity and collects/stores any validation errors
            into the results supplied and optionally copies the errors into the internal error state for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.GetValidator">
            <summary>
            Gets the validator for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.GetValidatorInternal">
            <summary>
            This is here to facilitate code-generation so that this method can
            be overriden in the generated code. But that generated code
            can then be overriden by the user for customgenerated code by 
            over-riding the GetValidator().
            e.g. GetValidatorInternal() => codegenerator overrides.
                 GetValidator()         => user overrides in separate partial class
                                           to not use the code generation
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.Equals(System.Object)">
            <summary>
            Comapare this object with <paramref name="obj"/>
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the two objects are equal, false otherwise</returns>
        </member>
        <member name="M:ComLib.Entities.Entity.op_Equality(ComLib.Entities.Entity,ComLib.Entities.Entity)">
            <summary>
            Check if 2 entities are the same.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.op_Inequality(ComLib.Entities.Entity,ComLib.Entities.Entity)">
            <summary>
            Checks if 2 entities are different.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeValidate(System.Object)">
            <summary>
            Called when [before validate].
            </summary>
            <param name="ctx">The CTX.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeValidateCreate(System.Object)">
            <summary>
            Called when [before validate create].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeValidateUpdate(System.Object)">
            <summary>
            Called when [before validate update].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeCreate(System.Object)">
            <summary>
            Called when [before create].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeUpdate(System.Object)">
            <summary>
            Called when [before update].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeSave(System.Object)">
            <summary>
            Called when [before save].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnBeforeDelete(System.Object)">
            <summary>
            Called when [before delete].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterNew">
            <summary>
            Called after call to Class.New().
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterValidate">
            <summary>
            Called when [after validate].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterValidateCreate">
            <summary>
            Called when [after validate create].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterValidateUpdate">
            <summary>
            Called when [after validate update].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterCreate">
            <summary>
            Called when [after create].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterUpdate">
            <summary>
            Called when [after update].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterSave">
            <summary>
            Called when [after save].
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity.OnAfterDelete">
            <summary>
            Called when [after delete].
            </summary>
        </member>
        <member name="P:ComLib.Entities.Entity.Settings">
            <summary>
            Settings specific for the entity.
            e.g. MaxLengthOfTitle = 10 etc.
            </summary>
        </member>
        <member name="P:ComLib.Entities.Entity.IsValid">
            <summary>
            Validates this object.
            Only difference compared to Validate() is this more convenient.
            and yeilds a bool instead of the actual validation results.
            </summary>
        </member>
        <member name="P:ComLib.Entities.Entity.Errors">
            <summary>
            Validation errors.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Entity`1.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.GetAll">
            <summary>
            Gets all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.Save">
            <summary>
            Saves this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.Delete">
            <summary>
            Deletes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Entity`1.DeleteAll">
            <summary>
            Deletes all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(ComLib.Entities.IEntityService{`0})">
            <summary>
            Initialize the behaviour of creating the service and repository.
            </summary>
            <param name="service">The entity service</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(ComLib.Entities.IEntityService{`0},System.Boolean)">
            <summary>
            Singleton service and repository with optional flag to indicate 
            whether or not to configure the repository.
            </summary>
            <param name="service"></param>
            <param name="configureRepository"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(ComLib.Entities.IRepository{`0},System.Boolean)">
            <summary>
            Singleton repository with optional flag to indicate
            whether or not to configure the repository.
            </summary>
            <param name="repository">The repository.</param>
            <param name="configureRepository">if set to <c>true</c> [configure repository].</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},ComLib.Entities.IEntitySettings,System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId">The connId to use when configuring the repository.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IRepository{`0}},ComLib.Entities.IEntitySettings,System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="settings">The settings for the entity.</param>
            <param name="configureRepo">Whether or not to configure the reposiory.</param>
            <param name="configureRepo">Whether or not the repository should be configured.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator">The validator creator</param>
            <param name="settings">The settings for the entity.</param>
            <param name="configureRepo">Whether or not to configure the reposiory.</param>
            <param name="configureRepo">Whether or not the repository should be configured.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Init(System.Func{ComLib.Entities.IEntityService{`0}},System.Func{ComLib.Entities.IRepository{`0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,ComLib.Entities.IEntityResources,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Create(`0)">
            <summary>
            Creates the entity
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Creates the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Create(System.Collections.Generic.IList{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities conditionally based on whether they exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entities"></param>
            <param name="checkFields"></param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Update(`0)">
            <summary>
            Updates the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Updates the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Save(`0)">
            <summary>
            Saves the entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Delete(`0)">
            <summary>
            Deletes the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.DeleteAll">
            <summary>
            Deletes all the entities from the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Delete(System.Int32)">
            <summary>
            Delete the model associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Get(System.Int32)">
            <summary>
            Retrieve the model associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.GetAll">
            <summary>
            Retrieve all instances of model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Get(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.First(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page using Criteria.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Find(System.String)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="filter">e.g. "UserNameLowered = 'kishore'"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Find(ComLib.Data.IQuery)">
            <summary>
            Get items by page using Criteria
            </summary>
            <param name="filter">e.g. "UserNameLowered = 'kishore'"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.GetRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page.
            </summary>
            <param name="table">"BlogPosts"</param>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.Count">
            <summary>
            The the total count of entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.ActiveRecordBaseEntity`1.DoEntityAction(`0,System.Action{ComLib.IActionContext,ComLib.Entities.IEntityService{`0}})">
            <summary>
            Performs the actual entity action specified by the delegate <paramref name="executor"/>
            </summary>
            <param name="entity"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.ActiveRecordBaseEntity`1.Repository">
            <summary>
            Get the repository associated w/ this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQuery.AddParameters(System.Collections.Generic.List{ComLib.NamedQueries.NamedQueryParam})">
            <summary>
            Add query parameters.
            </summary>
            <param name="queryParams"></param>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQuery.AddParameters(System.Collections.Generic.List{System.String})">
            <summary>
            Add query parameters.
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Name">
            <summary>
            Get/Set Name
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Description">
            <summary>
            Get/Set Description
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Sql">
            <summary>
            Get/Set Sql
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Parameters">
            <summary>
            Get/Set Parameters
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.IsStoredProcedure">
            <summary>
            Get/Set IsStoredProcedure
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.IsPagingSuppored">
            <summary>
            Get/Set IsPagingSuppored
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.IsScalar">
            <summary>
            Get/Set IsScalar
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.OrderId">
            <summary>
            Get/Set OrderId
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.ItemType">
            <summary>
            Get/Set ItemType
            </summary>
        </member>
        <member name="P:ComLib.NamedQueries.NamedQuery.Roles">
            <summary>
            Get/Set Roles
            </summary>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryParam">
            <summary>
            Class to represent an indivdual parameter that is part
            of a named query.
            </summary>
            <example>
            "@id:int:1:'';@businessDate:date:1:${today};@username:string:1:''".
            </example>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.Name">
            <summary>
            Name of the parameter.
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.Typ">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.IsRequired">
            <summary>
            Indicates if the parameter is requried.
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.DefaultValue">
            <summary>
            The default value of the parameter.
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParam.Val">
            <summary>
            The value to use for the parameter.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParam.ToString">
            <summary>
            Return string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryParamsParser">
            <summary>
            Parser for parsing parameter definition strings in the format 
            "@id:int:1:'';@businessDate:date:1:${today};@username:string:1:''".
            </summary>
        </member>
        <member name="F:ComLib.NamedQueries.NamedQueryParamsParser.ParamDefinitionRegEx">
            <summary>
            Regular expression for the parameter definition.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsParser.ParseParams(System.String)">
            <summary>
            Parses the parameters definition string and returns a List of NamedQueryParam objects.
            </summary>
            <param name="paramDefinitions">E.g. "@id:int:1:'';@businessDate:date:1:${today};@username:string:1:''"</param>
            <returns>List of NamedQueryParam objects.</returns>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryParamsValidator">
            <summary>
            Validator class for the named query parameters.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsValidator.#cctor">
            <summary>
            Keep track of the various types of the parameters.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsValidator.#ctor(System.Collections.Generic.IList{ComLib.NamedQueries.NamedQueryParam})">
            <summary>
            initialize list of parameters.
            </summary>
            <param name="namedQueryParams"></param>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validate all the params and collect all the errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryParamsValidator.ValidateParam(ComLib.NamedQueries.NamedQueryParam)">
            <summary>
            Validate a single parameter by 
            1. checking it's type against
            2. Check the supplied value against the type.
            3. supplied value is not null.
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComLib.Maps.GoogleMapUrlBuilder" -->
        <member name="T:ComLib.Maps.IMapUrlBuilder">
            <summary>
            Interface for building an url to link to a mapping system.
            e.g. Url to access location on google or yahoo maps.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GoogleMapUrlBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GoogleMapUrlBuilder"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GoogleMapUrlBuilder.Build(ComLib.LocationSupport.Address)">
            <summary>
            builds the url.
            e.g. 
            Address : 439 calhoun ave. bronx, ny 10465
            ="439+calhoun+ave.+bronx,+ny+10465"
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ComLib.Maps.GoogleMapUrlBuilder.UrlPrefix" -->
        <member name="T:ComLib.MapperSupport.IMapper`1">
            <summary>
            Mapper for sourcing data from Ini files.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.MapperSupport.IMapper`1.Map(ComLib.IErrors)">
            <summary>
            Map objects used internal state.
            </summary>
            <param name="source"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.IMapper`1.Map(System.Object,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="source"></param>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.IMapper`1.MapFromFile(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="filepath"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.IMapper`1.MapFromText(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="content"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.MapperSupport.IMapper`1.SupportedFormat">
            <summary>
            Get the supported formate of the data source.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogEventEntity">
            <summary>
            Making the LogEventEntity implement IEntity.
            
            Reasons:
            1. Takes advantage of outof the box DomainModel functionality.
            2. Can now use RepositoryLinq2Sql as the repository for CRUD actions.
            
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogEventEntity.New">
            <summary>
            Creates a new instance of BlogPost and 
            initializes it with a validator and settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.LogEventEntity.Delete(ComLib.Logging.LogLevel)">
            <summary>
            Delete all entries based on the level.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:ComLib.Logging.LogEventEntity.Delete(System.DateTime,System.Boolean)">
            <summary>
            Delete log entries before the specified date.
            </summary>
            <param name="date"></param>
            /// <returns></returns>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.Application">
            <summary>
            Get/Set Application
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.Computer">
            <summary>
            Get/Set Computer
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.LogLevel">
            <summary>
            Get/Set LogLevel
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.Exception">
            <summary>
            Get/Set Exception
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.Message">
            <summary>
            Get/Set Message
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogEventEntity.UserName">
            <summary>
            Get/Set UserName
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogEventEntityMapper">
            <summary>
            Creates a LogEventEntity from the contents of a LogEvent
            </summary>
        </member>
        <member name="T:ComLib.Logging.IMapper`2">
            <summary>
            Lightweight input/output mapping interface
            </summary>
            <typeparam name="T">The type to be mapped from</typeparam>
            <typeparam name="TK">The type to be mapped to</typeparam>
        </member>
        <member name="T:ComLib.Logging.LogRepository">
            <summary>
            Generic repository for persisting Log.
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositorySql`1">
            <summary>
            Repository for a relational database, base class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.RepositoryBase`1">
            <summary>
            Repository base class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Entities.RepositoryQueryable">
            <summary>
            Repository base class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Count">
            <summary>
            Total number of records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Count(ComLib.Data.IQuery)">
            <summary>
            Total number of records with filter.
            </summary>
            <param name="criteria">Filter to apply before getting totalrecords.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Count(System.String)">
            <summary>
            Total number of records with named filter.
            </summary>
            <param name="criteria">Filter to apply before getting totalrecords.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Sum(System.String)">
            <summary>
            Sum("Cost");
            </summary>
            <param name="columnName">Name of the column to perform the Sum on</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Sum(System.String,ComLib.Data.IQuery)">
            <summary>
            Sum("cost", filter).
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Sum(System.String,System.String)">
            <summary>
            Sum("cost", "Popular Products").
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Min(System.String)">
            <summary>
            Min("Cost");
            </summary>
            <param name="columnName">Name of the column to perform the Min on</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Min(System.String,ComLib.Data.IQuery)">
            <summary>
            Min("cost", filter).
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Min(System.String,System.String)">
            <summary>
            Min("cost", "Popular Products").
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Max(System.String)">
            <summary>
            Max("Cost");
            </summary>
            <param name="columnName">Name of the column to perform the Max on</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Max(System.String,ComLib.Data.IQuery)">
            <summary>
            Max("cost", filter).
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Max(System.String,System.String)">
            <summary>
            Max("cost", "Popular Products").
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Avg(System.String)">
            <summary>
            Avg("Cost");
            </summary>
            <param name="columnName">Name of the column to perform the Avg on</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Avg(System.String,ComLib.Data.IQuery)">
            <summary>
            Avg("cost", filter).
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Avg(System.String,System.String)">
            <summary>
            Avg("cost", "Popular Products").
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Distinct``1(System.String)">
            <summary>
            Get distinct values from the specified column.
            </summary>
            <typeparam name="TVal"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Distinct``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Get distinct values from the specified column.
            </summary>
            <typeparam name="TVal"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Distinct``1(System.String,System.String)">
            <summary>
            Get distinct values from the specified column.
            </summary>
            <typeparam name="TVal"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Group``1(System.String)">
            <summary>
            GroupBy (date)(CreateDate)
            </summary>
            <typeparam name="TGroup"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Group``1(System.String,ComLib.Data.IQuery)">
            <summary>
            GroupBy (date)(CreateDate)
            </summary>
            <typeparam name="TGroup"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Group``1(System.String,System.String)">
            <summary>
            GroupBy (date)(CreateDate)
            </summary>
            <typeparam name="TGroup"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.GroupNamedFilter(System.String,System.String[])">
            <summary>
            Get datatable using named filter and groupby on multiple columns.
            </summary>
            <param name="namedFilter"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Group(ComLib.Data.IQuery,System.String[])">
            <summary>
            Get datatable using mutliple columns in group by and criteria/filter.
            </summary>
            <param name="criteria"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ToTable">
            <summary>
            Get Table containing all the records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ToTable(ComLib.Data.IQuery)">
            <summary>
            Get datatable using the IQuery filter
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ToTable(System.String)">
            <summary>
            Get datatable using the filtername.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ToTableBySql(System.String)">
            <summary>
            Get datatable using the sql filter.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Any(System.String)">
            <summary>
            Checks whether there are any records that match the sql
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.AnyBySql(System.String)">
            <summary>
            Checks whether there are any records that match the sql
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.Any(ComLib.Data.IQuery)">
            <summary>
            Chekcs where there are any records that match the criteria filter.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.AddNamedFilter(System.String,ComLib.Data.IQuery)">
            <summary>
            Add named filter.
            e.g. "Published last week" => Criteria.Where("CreateDate").Between(1.Week.Ago, DateTime.Now)
            </summary>
            <param name="filterName"></param>
            <param name="criteria"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.InternalGroup``1(System.String,ComLib.Data.IQuery)">
            <summary>
            GroupBy (date)(CreateDate)
            </summary>
            <typeparam name="TGroup"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ExecuteAggregate``1(System.String,System.String,ComLib.Data.IQuery)">
            <summary>
            Sum,Min,Max,Count,Avg execution method.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="funcName">sum | min | max | avg | count</param>
            <param name="columnName">name of the column to perform the function on.</param>
            <param name="criteria">Criteria for filters.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryQueryable.ExecuteAggregateWithFilter``1(System.String,System.String,System.String)">
            <summary>
            Sum,Min,Max,Count,Avg execution method.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="funcName">sum | min | max | avg | count</param>
            <param name="columnName">name of the column to perform the function on.</param>
            <param name="filter">Filter to apply in where clause.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.Database">
            <summary>
            The database db
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.Connection">
            <summary>
            The connection info object
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.ConnectionString">
            <summary>
            Connection info object.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.TableName">
            <summary>
            Get / Set the table name.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryQueryable.NamedFilters">
            <summary>
            Dictionary of named filters/criteria.
            Useful when doing Count("ActiveUsers");
            Or Avg("Rating", "PopularPosts")
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Create(`0)">
            <summary>
            Create the entity in the datastore.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create list of entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Create(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates the entities supplied conditionally based on whether it exists in the datastore.
            Existance in the datastore is done by finding any entities w/ matching values for the 
            <paramref name="checkFields"/> supplied.
            </summary>
            <param name="entity"></param>
            <param name="checkFields"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Copy(`0)">
            <summary>
            Copies the entity and returns the copy.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Get(System.Int32)">
            <summary>
            Get item by id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.GetAll">
            <summary>
            Get all the entities from the datastore.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.GetAllItems">
            <summary>
            Get all the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Update(`0)">
            <summary>
            Update the entity in the datastore.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Update(System.Collections.Generic.IList{`0})">
            <summary>
            Create list of entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Delete(System.Int32)">
            <summary>
            Delete by the entity id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Delete(`0)">
            <summary>
            Delete by the entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.DeleteAll">
            <summary>
            Delete all entities from the repository.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Delete(ComLib.Data.IQuery)">
            <summary>
            Delete using the Criteria object.
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.DeleteByNamedFilter(System.String)">
            <summary>
            Delete by named filter
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Save(`0)">
            <summary>
            Save the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Save(System.Collections.Generic.IList{`0})">
            <summary>
            Create list of entities.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sum using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Min using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Max using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Avg(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sum using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Distinct``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sum using expression. e.g. p => p.FirstName;
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Group``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Group(date)(CreateDate)
            </summary>
            <typeparam name="TGroup"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Increment(System.String,System.Int32,System.Int32)">
            <summary>
            Increments the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="by">The by.</param>
            <param name="id">The id of the row to increment.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Decrement(System.String,System.Int32,System.Int32)">
            <summary>
            Decrements the specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="by">The by.</param>
            <param name="id">The id of the row to increment.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Increment(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Increments the field specified by the expression.
            </summary>
            <param name="exp">The fieldname as an expression.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Decrement(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Int32)">
            <summary>
            Decrements the field specified by the expression.
            </summary>
            <param name="exp">The exp.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUp">
            <summary>
            Create dictionary of all entities using the Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUp(System.String)">
            <summary>
            Create dictionary of all entities using the Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUpMulti``1(System.String)">
            <summary>
            Create dictionary of all entities using the Id and the Field name supplied by <paramref name="propName"/>
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUpMulti``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Lookup on 2 values. Creates lookup on Id and Id2
            </summary>
            <typeparam name="Id2"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.ToLookUpMulti``1(System.String,System.String)">
            <summary>
            Create dictionary of all entities using the Id and the Field name supplied by <paramref name="propName"/>
            </summary>
            <typeparam name="Id2"></typeparam>
            <param name="propName"></param>
            <param name="filterName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(System.String)">
            <summary>
            Find all records matching the query string.
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(ComLib.Data.IQuery)">
            <summary>
            Find by query
            </summary>
            <param name="queryString"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FindByNamedFilter(System.String)">
            <summary>
            Find by named filter : e.g. FindByNamedFilter("PopularPosts");
            </summary>
            <param name="namedFilter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(System.String,System.Boolean)">
            <summary>
            Find by filter.
            </summary>
            <param name="queryString">The query, this can be either just a filter
            after the where clause or the entire sql</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page
            </summary>
            <param name="criteria">Criteria object representing filter</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FindByNamedFilter(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using named filter
            </summary>
            <param name="filterName">Named filter</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page
            </summary>
            <param name="sql">Sql to use as filter.</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page based on latest / most recent create date.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FindRecentAs``1(System.Int32,System.Int32)">
            <summary>
            Find the recent items and convert them to a different type.
            </summary>
            <typeparam name="T2">The type to convert to.</typeparam>
            <param name="pageNumber">The page number to get.</param>
            <param name="pageSize">Number of items in each page.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.First(System.String)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.First(ComLib.Data.IQuery)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.FirstByNamedFilter(System.String)">
            <summary>
            Get the first item after applying the named filter.
            </summary>
            <param name="filterName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.GetOne``1(System.String)">
            <summary>
            Get one item in the 1-to-1 relationship.
            </summary>
            <typeparam name="TRelation">The type of the item in the 1-to-1 relationship.</typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryBase`1.GetMany``1(System.String)">
            <summary>
            Get all the items in the 1-to-many relation
            </summary>
            <typeparam name="TRelation">The type of the item in the many relationship.</typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.RepositoryBase`1.RowMapper">
            <summary>
            Entity row mapper.
            </summary>
        </member>
        <member name="P:ComLib.Entities.RepositoryBase`1.IdentityStatement">
            <summary>
            Statement used to get the identity of the last inserted row.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.#ctor(System.String)">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize
            </summary>
            <param name="connectionInfo"></param>
            <param name="helper"></param>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize
            </summary>
            <param name="connectionInfo"></param>
            <param name="helper"></param>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize
            </summary>
            <param name="connectionInfo"></param>
            <param name="helper"></param>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.Create(`0)">
            <summary>
            Create the entity in the datastore.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.Update(`0)">
            <summary>
            Update the entity in the datastore.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get page of records using filter.
            </summary>
            <param name="filter"></param>
            <param name="table"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositorySql`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get recents posts by page
            </summary>
            <param name="table"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.LogRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection string.</param>
        </member>
        <member name="M:ComLib.Logging.LogRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:ComLib.Logging.LogRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:ComLib.Logging.LogRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize the rowmapper
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogRepository.Create(ComLib.Logging.LogEventEntity)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.LogRepository.Update(ComLib.Logging.LogEventEntity)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Logging.LogEventEntityRowMapper">
            <summary>
            RowMapper for Log.
            </summary>
            <typeparam name="?"></typeparam>
        </member>
        <member name="T:ComLib.Entities.EntityRowMapper`1">
            <summary>
            Maps a row of data from a IDataReader to the entity of type T.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Data.RowMapperReaderBased`1">
            <summary>
            Abstract class for mapping a row from a DataReader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Data.RowMapperBase`3">
            <summary>
            Abstract class for row mapping.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:ComLib.Data.RowMapperBase`3.MapRow(`0,`2)">
            <summary>
            Map the row number.
            </summary>
            <param name="source"></param>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.IRowMapper`2">
            <summary>
            Base class for RowMapping.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSourceData"></typeparam>
            <typeparam name="TSourceRow"></typeparam>
        </member>
        <member name="M:ComLib.Data.IRowMapper`2.MapRows(`0)">
            <summary>
            Maps all the rows in TSource to list objects of type T.
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IRowMapper`2.MapRow(`0,System.Int32)">
            <summary>
            Maps a specific row to an item of type TResult
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.RowMapperReaderBased`1.MapRows(System.Data.IDataReader)">
            <summary>
            Map all the rows to IList of objects T using DataReader
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.IEntityRowMapper`1">
            <summary>
            Row mapper for a model to map database rows to model.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.IocContainerInMemory">
            <summary>
            Simple in Memory container to use for Unit Testing.
            </summary>
        </member>
        <member name="T:ComLib.IIoc">
            <summary>
            Service locator interface used for getting any service instance.
            </summary>
        </member>
        <member name="M:ComLib.IIoc.GetObject``1(System.String)">
            <summary>
            Get a named service  associated with the type.
            </summary>
            <param name="t"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IIoc.GetObject``1">
            <summary>
            Get object using just the type.
            </summary>
            <param name="t"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IIoc.Contains``1">
            <summary>
            Determine if the container contains the specified type.
            </summary>
            <param name="t"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IIoc.AddObject(System.String,System.Object)">
            <summary>
            Add a named service.
            </summary>
            <param name="t"></param>
            <param name="serviceName"></param>
            <param name="obj"></param>
        </member>
        <member name="F:ComLib.IocContainerInMemory.DefaultServiceName">
            <summary>
            The instance name given to the service 
            added as a default service.
            </summary>
        </member>
        <member name="M:ComLib.IocContainerInMemory.#ctor">
            <summary>
            Make this class a singleton.
            </summary>
        </member>
        <member name="M:ComLib.IocContainerInMemory.AddObject(System.String,System.Object)">
            <summary>
            Adds a service to the service to the locator.
            Supports multiple ( instances ) of a specific type.
            This is to support different implementations of specific interface
            for example.
            </summary>
            <param name="t"></param>
            <param name="instanceName"><see cref="!:ServiceNames"/></param>
            <param name="obj"></param>
        </member>
        <member name="M:ComLib.IocContainerInMemory.GetObject``1(System.String)">
            <summary>
            Gets a specific service with name provided.
            </summary>
            <param name="t"></param>
            <param name="serviceName"><see cref="!:ServiceNames"/></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IocContainerInMemory.GetObject``1">
            <summary>
            Get object using just the type.
            </summary>
            <param name="t"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IocContainerInMemory.Contains``1">
            <summary>
            Determine if the container contains the specified type.
            </summary>
            <param name="t"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Calendars.Holiday">
            <summary>
            Represents a single holiday.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.Holiday.#ctor(System.Int32,System.Int32,System.Boolean,System.DayOfWeek,System.Int32,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <param name="isHardDay"></param>
            <param name="dayOfWeek"></param>
            <param name="weekOfMonth"></param>
        </member>
        <member name="T:ComLib.Data.Database">
            <summary>
            Class containing various helper methods for accessing data.
            </summary>
        </member>
        <member name="T:ComLib.Data.IDBHelper">
            <summary>
            Interface for a DatabaseHelper
            </summary>
        </member>
        <member name="M:ComLib.Data.IDBHelper.Execute``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Boolean,System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            Core method which all the 
            1. ExecuteScalar
            2. ExecuteNonQuery
            3. ExecuteReader
            4. ExecuteDataTable methods call.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="dbParameters"></param>
            <param name="useTransaction"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Execute non-query sql.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteNonQueryText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute non-query sql.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteNonQueryProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute non-query sql.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteReader(System.String,System.Data.CommandType,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datareader.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteReaderText(System.String,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datareader.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteReaderProc(System.String,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datareader.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return single scalar value.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteScalarText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return single scalar value.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteScalarProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return single scalar value.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return dataset.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataSetText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return dataset.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataSetProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return dataset.
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datatable
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataTableText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datatable
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.ExecuteDataTableProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute sql and return datatable
            </summary>
            <param name="con"></param>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.BuildInParam(System.String,System.Data.DbType,System.Object)">
            <summary>
            Build an input parameter.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.AddInParam(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.String,System.Data.DbType,System.Object)">
            <summary>
            Builds the input parameter and adds it to the list of parameters.
            </summary>
            <param name="parameters">list of parameters to add to after building.</param>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Data.IDBHelper.BuildOutParam(System.String,System.Data.DbType)">
            <summary>
            Build an input parameter.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.GetFactory">
            <summary>
            Get the database provider factory that creates con, cmd, params etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.GetConnection">
            <summary>
            Get a connection to the appropriate database.
            </summary>
            <param name="connectionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.IDBHelper.GetCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
            Create a new dbcommand using the connection.
            </summary>
            <param name="con"></param>
            <param name="commmandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Data.IDBHelper.Connection">
            <summary>
            The underlying connection to the datastore.
            </summary>
        </member>
        <member name="M:ComLib.Data.Database.#ctor">
            <summary>
            Default construction
            </summary>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(System.String)">
            <summary>
            Construct using only the connection string.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(System.String,System.String)">
            <summary>
            Initialize w/ connection string and provider.
            </summary>
            <param name="connectionString"></param>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="F:ComLib.Data.Database.m_funCreateConnection">
            <summary>
            stingc ; a function for creating new connection
            </summary>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Data.Database.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.DbSettings,System.Data.Common.DbProviderFactory)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Data.Database.Init(ComLib.Data.ConnectionInfo,ComLib.Data.DbSettings,System.Data.Common.DbProviderFactory)">
            <summary>
            Initialize this dbhelper.
            </summary>
            <param name="connection">The connection information.</param>
            <param name="settings">Optional settings for this instance of DbHelper.</param>
            <param name="factory">Optional instance of the provider factory.
            e.g. If using oracle, supply this as OracleClientFactory.Instance</param>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteReaderText(System.String,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute the datareader.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            IDataReader = db.ExecuteReader("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteReaderProc(System.String,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute the datareader.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="action">The lamda to call with the reader as a parameter.</param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            IDataReader = db.ExecuteReader("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteReader(System.String,System.Data.CommandType,System.Action{System.Data.IDataReader},System.Data.Common.DbParameter[])">
            <summary>
            Execute the datareader.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            IDataReader = db.ExecuteReader("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteNonQueryText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a non-query using sql text
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.ExecuteNonQuery("update users set isactive =1", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteNonQueryProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a non-query using command
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.ExecuteNonQuery("update users set isactive =1", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes a non-query using command
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.ExecuteNonQuery("update users set isactive =1", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteScalarText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a scalar query using sql text.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            object obj = db.ExecuteScalar("select count(*) from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteScalarProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a scalar query using a stored procedure.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            object obj = db.ExecuteScalar("select count(*) from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes a scalar query.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            object obj = db.ExecuteScalar("select count(*) from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataTableText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            executes
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataTable tbl = db.ExecuteDataTable("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataTableProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            executes
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataTable tbl = db.ExecuteDataTable("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            executes
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataTable tbl = db.ExecuteDataTable("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataSetText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored proc command and returns a dataset.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataSet set = db.ExecuteDataSet("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataSetProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored proc command and returns a dataset.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataSet set = db.ExecuteDataSet("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Executes the stored proc command and returns a dataset.
            </summary>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            DataSet set = db.ExecuteDataSet("select * from users", CommandType.Text, null);
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.GetFactory">
            <summary>
            Get database provider factory so caller can create dbparams, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.GetConnection">
            <summary>
            Create a connection to the database.
            </summary>
            <param name="connectionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.GetCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
            Create a dbCommand given the DbConnection.
            </summary>
            <param name="con"></param>
            <param name="commmandText"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.BuildInParam(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Data.Database.AddInParam(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>
            <param name="parameters"></param>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Data.Database.BuildOutParam(System.String,System.Data.DbType)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Data.Database.BuildOutParam(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.String,System.Data.DbType)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>
            <param name="paramName"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Data.Database.BuildOutParam(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.Data.Common.DbParameter)">
            <summary>
            Creates a DbParameter object from the arguments and adds it to the ctx command.
            </summary>        
            <param name="parameters">List of parameters.</param>
            <param name="dbParam"></param>
        </member>
        <member name="M:ComLib.Data.Database.Execute``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            A template method to execute any command action.
            This is made virtual so that it can be extended to easily include Performance profiling.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.Execute(int)("Users_GrantAccessToAllUsers", CommandType.StoredProcedure, 
                                          null, delegate(DbCommand cmd) { cmd.ExecuteNonQuery(); } );
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.ExecuteProc``1(System.String,System.Data.Common.DbParameter[],System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            A template method to execute any command action that is Stored Procedure based.
            This is made virtual so that it can be extended to easily include Performance profiling.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.Execute(int)("Users_GrantAccessToAllUsers", CommandType.StoredProcedure, 
                                          null, delegate(DbCommand cmd) { cmd.ExecuteNonQuery(); } );
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.Execute``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Boolean,System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            A template method to execute any command action.
            This is made virtual so that it can be extended to easily include Performance profiling.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="commandText">Sql text or StoredProcedure Name. </param>
            <param name="commandType"><see cref="T:System.Data.CommandType"/></param>
            <param name="dbParameters">List of parameters</param>
            <example>
            IDatabase db = new Database("connectionString value");
            int result = db.Execute(int)("Users_GrantAccessToAllUsers", CommandType.StoredProcedure, 
                                          null, delegate(DbCommand cmd) { cmd.ExecuteNonQuery(); } );
            </example>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.GetSingleValue(System.Data.IDataReader,System.Boolean)">
            <summary>
            Gets a single value from the reader and closes it after reading
            the value if the close is true.
            </summary>
            <param name="reader"></param>
            <param name="close"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Database.InitFactory">
            <summary>
            Initialize the database factory.
            </summary>
        </member>
        <member name="P:ComLib.Data.Database.Settings">
            <summary>
            Database settings
            </summary>
        </member>
        <member name="P:ComLib.Data.Database.Connection">
            <summary>
            Get/Set the connection object.
            This is specifically made as a setter to
            1. Allow dependency injection
            2. Allow connections to multiple database with multiple instances of DbHelper.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigSourceDb">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="T:ComLib.Configuration.ConfigSection">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="T:ComLib.Configuration.IConfigSection">
            <summary> 
            Base class for config settings. 
            This stores settings in 
            1. At the root level ( similiar to AppSettings ). 
            2. At a section level ( similar to GetSection("SectionName") ); 
            </summary> 
            <remarks> 
            The following properties are associated with 
            storing settings at the root level. 
            1. Count 
            </remarks> 
            <typeparam name="T"></typeparam> 
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.Get``1(System.String)">
            <summary>
            Get typed value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.GetDefault``1(System.String,``0)">
            <summary>
            Get key value if preset, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.Get(System.String,System.String)">
            <summary>
            Get the section's key value.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.Get``1(System.String,System.String)">
            <summary>
            Get the section's key's specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Get section/key value if preset, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.GetSection(System.String)">
            <summary>
            Get the section with the name specified.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.GetSection(System.String,System.Int32)">
            <summary>
            Get sectionlist with the specified name.
            </summary>
            <param name="sectionName"></param>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.Contains(System.String,System.String)">
            <summary>
            Checks whether or not the key exists in the section.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.Add(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add to value to the section/key combination.
            </summary>
            <param name="sectionName">"ApplicationSettings"</param>
            <param name="key">PageSize</param>
            <param name="val">15</param>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.Add(System.String,System.String,System.Object)">
            <summary>
            Add section key/value item.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Configuration.IConfigSection.AddMulti(System.String,System.Object,System.Boolean)">
            <summary>
            Add to value to the section/key combination.
            </summary>
            <param name="sectionName">"ApplicationSettings"</param>
            <param name="key">PageSize</param>
            <param name="val">15</param>
        </member>
        <member name="P:ComLib.Configuration.IConfigSection.Name">
            <summary>
            The name of the this config section.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.IConfigSection.Item(System.String,System.String)">
            <summary>
            Get the section key value using the indexer.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Configuration.IConfigSection.Sections">
            <summary>
            Get the names of the sections.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.#ctor">
            <summary> 
            Allow default constructor. 
            </summary> 
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.#ctor(System.String)">
            <summary>
            Initialize the config section w/ the name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.Get``1(System.String)">
            <summary>
            Get typed root setting by string key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.GetDefault``1(System.String,``0)">
            <summary>
            Validate and return the default value if the key is not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.Get(System.String,System.String)">
            <summary>
            Get section key value.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.Get``1(System.String,System.String)">
            <summary>
            Get typed section key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Get section/key value if present, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.GetSection(System.String)">
            <summary> 
            Get a section. 
            </summary> 
            <param name="?"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.GetSection(System.String,System.Int32)">
            <summary> 
            Get a section associated with the specified key at the specified index.
            </summary> 
            <param name="?"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.Contains(System.String,System.String)">
            <summary>
            Checks whether or not the key exists in the section.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.Add(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add the key value to the section specified.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.Add(System.String,System.String,System.Object)">
            <summary>
            Add the key value to the section specified.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSection.AddMulti(System.String,System.Object,System.Boolean)">
            <summary>
            Add key value with option of overwriting value of existing key
            or adding to a list of values associated w/ the same key.
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="P:ComLib.Configuration.ConfigSection.Name">
            <summary>
            Name of config section.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSection.Item(System.String,System.String)">
            <summary> 
            Get / set the value using both the section name and key. 
            e.g. "globalsettings", "pageSize"
            </summary> 
            <param name="sectionName"></param> 
            <param name="key"></param> 
            <returns></returns> 
        </member>
        <member name="P:ComLib.Configuration.ConfigSection.Sections">
            <summary>
            The names of all the sections.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.IConfigSource">
            <summary>
            Configuration source interface for loading/viewing/saving settings.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connection">Connection to a database that contains the log events table</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="connection">Connection to a database that contains the log events table</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.#ctor(System.String,System.String,ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem},System.Boolean)">
            <summary>
            Constructor taking the IRepository that will handle CRUD operations
            of log messages to the Database.
            Also, the repo provided can be a FAKE( In-Memory ) implementation which
            is useful in testing.
            </summary>
            <param name="connection">Repository to use for the logs.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.Init(System.String,System.String,ComLib.Entities.IRepository{ComLib.Configuration.ConfigItem},System.Boolean)">
            <summary>
            Initialize.
            </summary>
            <param name="appName">"MyApplication"</param>
            <param name="configNames">"dev.config,qa.config"</param>
            <param name="repo"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.Init">
            <summary>
            Initialization after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.Load">
            <summary>
            Load from database.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDb.Save">
            <summary>
            Save to the database.
            </summary>
        </member>
        <member name="E:ComLib.Configuration.ConfigSourceDb.OnConfigSourceChanged">
            <summary>
            Event handler for when the underlying config source changed.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDb.SourcePath">
            <summary>
            The source path. "dev.config".
            </summary>
        </member>
        <member name="T:ComLib.Collections.IIndexedComponent`1">
            <summary>
            Interface that any component must implement
            so that it can be indexed by an id or by a name.
            </summary>
            <typeparam name="TNumericKey"></typeparam>
        </member>
        <member name="T:ComLib.Collections.IIndexedLookUp`2">
            <summary>
            Interface for storing a collection of objects of type T,
            such that the objects can be looked up by either the
            id of the object T or by creating a distinct name for the object
            based on it's hashcode.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Collections.IndexedLookUp`2">
            <summary>
            Indexed lookup class for storing objects of type T which can
            be retrieved by either an id or name.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.IndexedLookUp`2.#ctor(System.Collections.Generic.IList{`1})">
            <summary>
            Generic based lookup.
            </summary>
            <param name="allItems"></param>
        </member>
        <member name="M:ComLib.Collections.IndexedLookUp`2.Initialize(System.Collections.Generic.IList{`1})">
            <summary>
            Initialize the internal lookup tables with the items.
            Store them by id and name.
            </summary>
            <param name="allItems"></param>
        </member>
        <member name="P:ComLib.Collections.IndexedLookUp`2.Item(`0)">
            <summary>
            Returns the location item given the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.IndexedLookUp`2.Item(System.String)">
            <summary>
            Returns the location item given the full name ("New York") or abbr ( "NY" )
            </summary>
            <param name="abbreviationOrName"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.IndexedLookUp`2.Count">
            <summary>
            Get the number of items in this lookup.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.UserPrincipal">
            <summary>
            Custom prinical class with additional propertes to identity user.
            </summary>
        </member>
        <member name="F:ComLib.Authentication.UserPrincipal._empty">
            <summary>
            Empty/null value.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.#ctor">
            <summary>
            Create a new default instance.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.#ctor(System.Int32,System.String,System.String,System.Security.Principal.IIdentity)">
            <summary>
            Create new instance using supplied user information.
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="userRolesDelimitedByComma"></param>
            <param name="identity"></param>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create new instance using supplied user information.
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="userRolesDelimitedByComma"></param>
            <param name="identity"></param>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.#ctor(System.Int32,System.String,System.String[],System.Security.Principal.IIdentity)">
            <summary>
            Create new instance using supplied user information.
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="userRolesDelimitedByComma"></param>
            <param name="identity"></param>
        </member>
        <member name="M:ComLib.Authentication.UserPrincipal.IsInRole(System.String)">
            <summary>
            Determines if this user is in the role supplied.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.Empty">
            <summary>
            Get the empty value.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.Identity">
            <summary>
            Identity of the principal. 
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.UserId">
            <summary>
            Id of the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.Name">
            <summary>
            Username.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserPrincipal.Roles">
            <summary>
            Comma delimited string of users roles.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.UserIdentity">
            <summary>
            Custom Identity class
            </summary>
        </member>
        <member name="M:ComLib.Authentication.UserIdentity.#ctor">
            <summary>
            Create new instance using default initialization,
            authenticated = false, username = string.Empty
            </summary>
        </member>
        <member name="M:ComLib.Authentication.UserIdentity.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Create new instance using supplied values.
            </summary>
            <param name="userName"></param>
            <param name="authenticationType"></param>
            <param name="isAuthenticated"></param>
        </member>
        <member name="P:ComLib.Authentication.UserIdentity.AuthenticationType">
            <summary>
            Get the authentication type.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserIdentity.IsAuthenticated">
            <summary>
            Indicates if user is authenticated.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserIdentity.Name">
            <summary>
            Return the username.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.UserIdentity.UserId">
            <summary>
            Get the user id.
            </summary>
        </member>
        <member name="T:ComLib.Reflection.AttributeHelper">
            <summary>
            Reflection utility class for attributes.
            </summary>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetAssemblyInfoDescription(System.Type,System.String)">
            <summary>
            Get the description attribute from the assembly associated with <paramref name="type"/>
            </summary>
            <param name="type">The type who's assembly's description should be obtained.</param>
            <param name="defaultVal">Default value to use if description is not available.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetClassAttributes``1(System.Object)">
            <summary>
            Gets the attributes of the specified type applied to the class.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <param name="attributeType">Type of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetPropsWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetPropsOnlyWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.AttributeHelper.GetPropsWithAttributesList``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.EmailSupport.IEmailService">
            <summary>
            Email service.
            Simplly sends an email.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(ComLib.EmailSupport.NotificationMessage)">
            <summary>
            Sends an email using the data from the message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(ComLib.EmailSupport.NotificationMessage,System.String,System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Send the mailmessage.
            </summary>
            <param name="message">The mail message</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>        
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="from">Who the email is from.</param>
            <param name="to">Who the email is being sent to.</param>
            <param name="subject">Subject of email.</param>
            <param name="body">Email body.</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>        
        </member>
        <member name="M:ComLib.EmailSupport.IEmailService.Send(System.Net.Mail.MailMessage)">
            <summary>
            Mail the message using the native MailMessage class and the credentials from the current configuration.
            </summary>
            <param name="message">The mail message</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.EmailSupport.IEmailService.Settings">
            <summary>
            Configuration information needed for sending emails.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.NotificationContext">
            <summary>
            Notification context.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationContext.Values">
            <summary>
            Values.
            These are used to replace the place holders in the template files.
            e.g.
            key = "message.to" replaces "${message.to}" 
            in the template file with the value associated with "message.to" 
            in this dictionary.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationContext.#ctor">
            <summary>
            Allow default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialize using supplied values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:ComLib.Paging.IPagerBuilderWeb">
            <summary>
            Pager url mode builder interface.
            </summary>
        </member>
        <member name="M:ComLib.Paging.IPagerBuilderWeb.Build(System.Int32,System.Int32,System.Func{System.Int32,System.String})">
            <summary>
            Builds the entire html for the specified page index.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="totalPages">The total pages.</param>
            <param name="urlBuilder">The URL builder.</param>
        </member>
        <member name="M:ComLib.Paging.IPagerBuilderWeb.Build(ComLib.Paging.Pager,ComLib.Paging.PagerSettings,System.Func{System.Int32,System.String})">
            <summary>
            Build the entire html for the pager.
            </summary>
            <param name="ctx"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Paging.PagerBuilderWeb">
            <summary>
            Buider class that builds the pager in Url mode.
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerBuilderWeb.Build(System.Int32,System.Int32,System.Func{System.Int32,System.String})">
            <summary>
            Builds the entire html for the specified page index / total pages.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="totalPages">The total pages.</param>
            <param name="urlBuilder">The URL builder.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Paging.PagerBuilderWeb.Build(ComLib.Paging.Pager,ComLib.Paging.PagerSettings,System.Func{System.Int32,System.String})">
            <summary>
            Build the entire html for the pager.
            </summary>
            <param name="pager"></param>
            <param name="settings"></param>
            <param name="urlBuilder"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Paging.PagerBuilderWeb.Instance">
            <summary>
            Get singleton instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Paging.IPagerCalculator">
            <summary>
            Interface for any calculator to process the page action.
            </summary>
        </member>
        <member name="M:ComLib.Paging.IPagerCalculator.Calculate(ComLib.Paging.Pager,ComLib.Paging.PagerSettings)">
            <summary>
            Calculate pages
            </summary>
            <param name="pagerData"></param>
            <param name="settings"></param>
        </member>
        <member name="T:ComLib.Paging.PagerCalculator">
            <summary>
            Default implementation of a pager.
            This uses a calculation scheme where the rules are the following :
            
            1. All possible links include ( first, previous, page1, page2, pageX, next, last )
            2. The number of pages in the middle ( page1, page2 ) can be configured.
            3. If current page = 1 ( links first and previous are not applicable )
            4. If current page = last ( links last and next are not applicable )
            5. The number of pages in the middle is cycled.
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerCalculator.GetTotalRanges(System.Int32,System.Int32)">
            <summary>
            Get the total number of ranges.
            </summary>
            <param name="totalPages"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Paging.PagerCalculator.GetRange(System.Int32,System.Int32)">
            <summary>
            Get the total ranges.
            e.g.
            Total pages = 18
            
            1  - 5  = Range 1
            6  - 10 = Range 2
            11 - 15 = Range 3
            14 - 18 = Range 4
            </summary>
            <param name="currentPage">Current/Selected page.</param>
            <param name="numberPagesToDisplay">Number of pages to display in the middle.
            This does not include the first page link and last page link.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Models.ModelUtils.GetModelInheritancePath(ComLib.Models.ModelContainer,System.String,System.Boolean)">
            <summary>
            Get the inheritance path of a model as list of models.
            </summary>
            <param name="ctx"></param>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Models.ModelUtils.GetModelInheritancePath(ComLib.Models.ModelContainer,System.String)">
            <summary>
            Get the inheritance path of a model as list of models.
            </summary>
            <param name="ctx"></param>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Models.ModelUtils.ConvertNestedToFlatInheritance(ComLib.Models.Model,ComLib.Models.ModelContainer)">
            <summary>
            Traverses the nodes inheritance path to build a single flat delimeted line of 
            inheritance paths.
            e.g. returns "Job,Post,EntityBase"
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Models.ModelUtils.Sort(System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Sort the 
            </summary>
            <param name="modelChain"></param>
        </member>
        <member name="M:ComLib.Models.ModelContext.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContext.#ctor(ComLib.Models.ModelContainer)">
            <summary>
            Initialize.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:ComLib.Models.ModelContext.Init">
            <summary>
            Initialize by storing all the model chain inheritance paths for each model.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContext.AllModels">
            <summary>
            Get / Set the container.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContext.IncludeModels">
            <summary>
            Names of models to be included in the processing.
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.ErrorManagerDefault">
            <summary>
            Localized error manager.
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.ErrorManagerBase">
            <summary>
            Localized error manager.
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.IErrorManager">
            <summary>
            Interface for an exception manager.
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.IErrorManager.Handle(System.Object,System.Exception)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Exceptions.IErrorManager.Handle(System.Object,System.Exception,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.IErrorManager.Handle(System.Object,System.Exception,ComLib.IErrors)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
        </member>
        <member name="M:ComLib.Exceptions.IErrorManager.Handle(System.Object,System.Exception,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errorResults">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.Handle(System.Object,System.Exception)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.Handle(System.Object,System.Exception,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error"></param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.Handle(System.Object,System.Exception,ComLib.IErrors)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errorResults">The error results.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.Handle(System.Object,System.Exception,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errorResults">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerBase.InternalHandle(System.Object,System.Exception,ComLib.IErrors,System.Object[])">
            <summary>
            Internal method for handling errors.
            </summary>
            <param name="error"></param>
            <param name="exception"></param>
            <param name="handler"></param>
            <param name="errorResults"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:ComLib.Exceptions.ErrorManagerBase.Name">
            <summary>
            The name of this exception manager.
            </summary>
        </member>
        <member name="T:ComLib.Diagnostics.Diagnostics">
            <summary>
            Obtains diagnostic information related to the Machine, Currently executing 
            process, among other areas.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.#cctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.Init(System.Func{ComLib.Diagnostics.IDiagnosticsService})">
            <summary>
            Initialize the provider.
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.GetAllInfo">
            <summary>
            Get all the diagnostic information.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.GetDataAsDictionary(ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Get all the diagnostic information.
            <param name="filter">MachineInfo,AppDomain,Env_System,Env_User</param>
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.GetInfo(System.String)">
            <summary>
            Get all the information associated with the specified groups.
            </summary>
            <param name="commaDelimitedGroups"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.GetInfo(ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Get all the information associated with the specified groups.
            </summary>
            <param name="commaDelimitedGroups"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.WriteAllInfo(System.String)">
            <summary>
            Write all diagnostic information to the file specified.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.WriteInfo(System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="commaDelimitedGroups">"Machine,AppDomain"</param>
            <param name="path">Path of file to write information to.</param>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.WriteInfo(System.String,System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="commaDelimitedGroups">"Machine,AppDomain"</param>
            <param name="path">Path of file to write information to.</param>
        </member>
        <member name="M:ComLib.Diagnostics.Diagnostics.WriteInfo(System.String,System.String,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="commaDelimitedGroups">"Machine,AppDomain"</param>
            <param name="path">Path of file to write information to.</param>
        </member>
        <member name="T:ComLib.Data.DbBuilder">
            <summary>
            Class containing various helper methods for accessing data.
            </summary>
        </member>
        <member name="M:ComLib.Data.DbBuilder.BuildCommand(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            Builds a command object with a multiple parameters.
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="paramName"></param>
            <param name="paramType"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DbBuilder.BuildCommand(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.String,System.Data.DbType,System.Object)">
            <summary>
            Builds a command object with a single parameter.
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="paramName"></param>
            <param name="paramType"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.ISet`1">
            <summary>
            Interface for a set of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.ISet`1.Union(ComLib.Collections.ISet{`0})">
            <summary>
            Unions the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.ISet`1.Intersect(ComLib.Collections.ISet{`0})">
            <summary>
            Returns set with elements common to both.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.ISet`1.ExclusiveOr(ComLib.Collections.ISet{`0})">
            <summary>
            Either or.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.ISet`1.Minus(ComLib.Collections.ISet{`0})">
            <summary>
            Gets the items in the set not contained in the set supplied.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.SetHelper`1">
            <summary>
            Helper class for sets.
            </summary>
        </member>
        <member name="M:ComLib.Collections.SetHelper`1.Union(ComLib.Collections.ISet{`0},ComLib.Collections.ISet{`0})">
            <summary>
            Gets all the unique elements from both sets.
            Whats in first OR second.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.SetHelper`1.Intersect(ComLib.Collections.ISet{`0},ComLib.Collections.ISet{`0})">
            <summary>
            Finds the intersection of the elements in first and second.
            Whats in both first AND second.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.SetHelper`1.ExclusiveOr(ComLib.Collections.ISet{`0},ComLib.Collections.ISet{`0})">
            <summary>
            Exclusives the or.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.SetHelper`1.Minus(ComLib.Collections.ISet{`0},ComLib.Collections.ISet{`0})">
            <summary>
            Minuses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderBase">
            <summary>
            Base class for code builders.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.GetIndent">
            <summary>
            Gets the indentation level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.IncrementIndent">
            <summary>
            Increments the indentation by 1 level of spaces ( 4 ).
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.IncrementIndent(System.Int32)">
            <summary>
            Increments the indentation by count number of spaces ( 4 )
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.DecrementIndent">
            <summary>
            Decrements the indentation by 1 level of spaces ( 4 )
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderBase.DecrementIndent(System.Int32)">
            <summary>
            Decrements the indentation by count levels of spaces ( 4 ).
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.#ctor">
            <summary>
            Default setup.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.#ctor(System.Boolean,ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.Process(ComLib.Models.ModelContext)">
            <summary>
            Creates the models in the database.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.CreateStoredProcs(ComLib.Models.ModelContext,ComLib.Models.Model,System.Boolean)">
            <summary>
            Create stored procedures
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.ConvertModelChainToTable(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model},ComLib.Models.ModelContext)">
            <summary>
            Convert the model chain to database table.
            </summary>
            <param name="modelInheritanceChain">The list of models representing the inheritance chain, this includes the model
            being created. </param>
            <param name="modelToCreate">The model being created.</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.CreateTablePrefix(ComLib.Models.Model)">
            <summary>
            Prefix to use for Table creation.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.CreateTableSuffix(ComLib.Models.Model)">
            <summary>
            Prefix to use for Table creation.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.BuildColumnInfo(ComLib.Models.PropInfo)">
            <summary>
            Builds sql column ddl
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.BuildColumnInfoForKey(ComLib.Models.PropInfo)">
            <summary>
            Builds sql column identity ddl.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.CreateInstallSqlFile(ComLib.Models.ModelContext,ComLib.Models.Model,System.String)">
            <summary>
            Create an install sql file specifically for creating the table for this model.
            The location of the file is obtained from the settings and the model name.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="sql"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDb.ExecuteSqlInDb(System.Collections.Generic.List{System.String},ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Create table in the database.
            </summary>
            <param name="sql"></param>
            <param name="ctx"></param>
            <param name="currentModel"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildCreateParamsSql(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Builds the create params SQL.
            </summary>
            <param name="model">The model.</param>
            <param name="modelInheritanceChain">The model inheritance chain.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildUpdateParamsSql(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Builds the update params SQL.
            </summary>
            <param name="model">The model.</param>
            <param name="modelInheritanceChain">The model inheritance chain.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildDbParams(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Build the database parameters for Create/Update using parameterized sql.
            </summary>
            <param name="model"></param>
            <param name="modelInheritanceChain"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildRowMapper(ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model})">
            <summary>
            Build the entire row mapper.
            </summary>
            <param name="model"></param>
            <param name="modelInheritanceChain"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomainDatabase.BuildRowMapperProperties(System.String,ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.PropInfo})">
            <summary>
            Build row mapper.
            </summary>
            <param name="ctx"></param>
            <param name="model"></param>
            <param name="buffer"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.CodeGeneration.CodeBuilderDomainDatabase.Tab">
            <summary>
            The tabs to use.
            </summary>
        </member>
        <member name="T:ComLib.Caching.CacheItemPriority">
            <summary>
            Priority for cache items.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheItemPriority.Low">
            <summary>
            Very Likely to be deleted.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheItemPriority.Normal">
            <summary>
            Somewhat likely to be deleted.
            </summary>        
        </member>
        <member name="F:ComLib.Caching.CacheItemPriority.High">
            <summary>
            Less likely to be deleted.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ComLib.Caching.CacheItemPriority.NotRemovable" -->
        <member name="F:ComLib.Caching.CacheItemPriority.Default">
            <summary>
            The default value for a cached item's priority is
            <see cref="!:Spring.Caching.CachePriority.Normal"/>.
            </summary>
        </member>
        <member name="T:ComLib.BootStrapSupport.AppContext">
            <summary>
            Simple wrapper for passing context data between tasks.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.AuthWin">
            <summary>
            <see cref="T:ComLib.Authentication.IAuth"/> implementation to provide Authentication service for DESKTOP based windows applications where there is just 1 user.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsAuthenticated">
            <summary>
            Determine if the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsGuest">
            <summary>
            Return whether or not the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsAdmin">
            <summary>
            Determine if currently logged in user is an administrator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsUser(System.String)">
            <summary>
            Determine if the logged in user is the same as the username supplied.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsUserOrAdmin(System.String)">
            <summary>
            Returns true if the logged in user is the same as the username supplied,
            or if the logged in user is an admin.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthBase.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Authentication.AuthBase.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthBase.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthBase.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthBase.UserId">
            <summary>
            The user id.
            </summary>
        </member>
        <member name="T:ComLib.Authentication.IAuth">
            <summary>
            Interface for Authentication.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsAuthenticated">
            <summary>
            Determines whether the user is authenticted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsGuest">
            <summary>
            Return whether or not the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.GetUser``1(System.String)">
            <summary>
            Get the user principal and cast it to an implementation class.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsAdmin">
            <summary>
            Determine whether or not user is an admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsUser(System.String)">
            <summary>
            Determine if the logged in user is the same as the username supplied.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.IsUserOrAdmin(System.String)">
            <summary>
            Returns true if the logged in user is the same as the username supplied,
            or if the logged in user is an admin.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.IAuth.SignIn(System.Security.Principal.IPrincipal)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.IAuth.SignIn(System.String)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.IAuth.SignIn(System.String,System.Boolean)">
            <summary>
            Sign the user in via username and remember the user.
            </summary>
            <param name="user"></param>
            <param name="rememberUser"></param>
        </member>
        <member name="M:ComLib.Authentication.IAuth.SignOut">
            <summary>
            Signout the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.IAuth.UserId">
            <summary>
            User's Id - If applicable.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.IAuth.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.IAuth.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="P:ComLib.Authentication.IAuth.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.#ctor(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Initialize with the admin role name.
            </summary>
            <param name="adminRoleName"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.GetUser``1(System.String)">
            <summary>
            Get the user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.IsAuthenticated">
            <summary>
            Determine if the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.SignIn(System.Security.Principal.IPrincipal)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.SignIn(System.String)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.SignIn(System.String,System.Boolean)">
            <summary>
            Sign the user in via username and remember user.
            </summary>
            <param name="user">username.</param>
            <param name="rememberUser"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWin.SignOut">
            <summary>
            Signout the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWin.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWin.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWin.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="T:ComLib.Arguments.ArgAttribute">
            <summary>
            Attribute to apply to properties of an object which can 
            recieve the argument values supplied to a program.
            This also describes named arguments.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Name">
            <summary>
            Name of the argument.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Alias">
            <summary>
            Short alias to represent the name.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Description">
            <summary>
            Describes the argument name.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.DefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.DataType">
            <summary>
            Date type of the argument.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.IsCaseSensitive">
            <summary>
            Indicates if argument is case sensitive.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.IsRequired">
            <summary>
            Indicates if is required.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.IndexPosition">
            <summary>
            The index position of any un-named args.
            As in index 0 = a, 1 = b in "-config:Prod a b c"
            where a, b, c are unnamed arguments and -config:Prod is a named argument.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Interpret">
            <summary>
            Flag to indicate if this value should be interpreted.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.IsUsedOnlyForDevelopment">
            <summary>
            Whether or not this is used only for development.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Example">
            <summary>
            Example value.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.ExampleMultiple">
            <summary>
            Example of mutliple various values.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.ArgAttribute.Tag">
            <summary>
            Used to group various arguments.
            e.g. The tag can be used to separate base/derived argument defintions.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor">
            <summary>
            Allow initialize via named property initializers.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.String,System.String,System.Type,System.Boolean,System.Object,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.String,System.String,System.Type,System.Boolean,System.Object,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.String,System.String,System.Type,System.Boolean,System.Object,System.String)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.String,System.String,System.Type,System.Boolean,System.Object,System.String,System.String)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.Int32,System.String,System.Type,System.Boolean,System.Boolean,System.Object,System.Boolean,System.String)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.Int32,System.String,System.Type,System.Boolean,System.Object,System.String)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.Int32,System.String,System.Type,System.Boolean,System.Object,System.String,System.String)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.#ctor(System.Int32,System.String,System.Type,System.Boolean,System.Boolean,System.Object,System.String,System.String)">
            <summary>
            Initialize using description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.Init(System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Object,System.Boolean,System.String,System.String)">
            <summary>
            Initialize all the properties.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="dataType"></param>
            <param name="isRequired"></param>
            <param name="isCaseSensitive"></param>
            <param name="defaultValue"></param>
            <param name="onlyForDevelopment"></param>
            <param name="example"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgAttribute.ToString">
            <summary>
            Build the usage for this argument.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.ValidationSupport.Validation">
            <summary>
            Futher validation methods provided in an assert like manner 
            without throwing any exceptions.
            All methods take in the IStatusResults interface to collect the errors.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsStringLengthMatch(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Determine if string is valid with regard to minimum / maximum length.
            </summary>
            <param name="text">Text to check length of.</param>
            <param name="allowNull">Indicate whether or not to allow null.</param>
            <param name="checkMaxLength">Indicate whether to check min length.</param>
            <param name="checkMinLength">Indicate whether to check max length.</param>
            <param name="minLength">-1 to not check min length, > 0 to represent min length.</param>
            <param name="maxLength">-1 to not check max length, > 0 to represent max length.</param>
            <returns>True if match based on parameter conditions, false otherwise.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsBetween(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Check if the integer value is between the min/max sizes.
            </summary>
            <returns>True if match based on parameter conditions, false otherwise.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsSizeBetween(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Determine if the size <paramref name="val"/> in bytes is between the min/max size in kilobytes
            </summary>
            <returns>True if match based on parameter conditions, false otherwise.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsStringRegExMatch(System.String,System.Boolean,System.String)">
            <summary>
            Determines if string matches the regex.
            </summary>
            <param name="text">Text to match.</param>
            <param name="allowNull">Whether or not text can be null or empty for successful match.</param>
            <param name="regEx">Regular expression to use.</param>
            <returns>True if match, false otherwise.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsNumeric(System.String)">
            <summary>
            Determines if text supplied is numeric
            </summary>
            <param name="text"></param>
            <param name="checkMinBound"></param>
            <param name="checkMaxBound"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsNumericWithinRange(System.String,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Determines if text supplied is numeric and within the min/max bounds.
            </summary>
            <param name="text">Text to check if it's numeric and within bounds.</param>
            <param name="checkMinBound">Whether or not to check</param>
            <param name="checkMaxBound"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsNumericWithinRange(System.Double,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Determines if text supplied is numeric and within the min/max bounds.
            </summary>
            <param name="text">Text to check if it's numeric and within bounds.</param>
            <param name="checkMinBound">Whether or not to check</param>
            <param name="checkMaxBound"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsAlpha(System.String,System.Boolean)">
            <summary>
            Determines if text is either lowercase/uppercase alphabets.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsAlphaNumeric(System.String,System.Boolean)">
            <summary>
            Determines if text is either lowercase/uppercase alphabets or numbers.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsDate(System.String)">
            <summary>
            Determines if the date supplied is a date.
            </summary>
            <param name="text"></param>
            <param name="checkBounds"></param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsDateWithinRange(System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Determines if the date supplied is a date.
            </summary>
            <param name="text"></param>
            <param name="checkBounds"></param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsDateWithinRange(System.DateTime,System.Boolean,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Determines if the date supplied is a date within the specified bounds.
            </summary>
            <param name="date"></param>
            <param name="checkMinBound"></param>
            <param name="checkMaxBound"></param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsTimeOfDay(System.String)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time"></param>
            <param name="checkBounds"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsTimeOfDayWithinRange(System.String,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time"></param>
            <param name="checkBounds"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsTimeOfDayWithinRange(System.TimeSpan,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time"></param>
            <param name="checkBounds"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsPhoneUS(System.String,System.Boolean)">
            <summary>
            Determines if the phone number supplied is a valid US phone number.
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsPhoneUS(System.Int32)">
            <summary>
            Determines if the phone number supplied is a valid US phone number.
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsSsn(System.String,System.Boolean)">
            <summary>
            Determines if ssn supplied is a valid ssn.
            </summary>
            <param name="ssn"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsSsn(System.Int32)">
            <summary>
            Determines if ssn supplied is a valid ssn.
            </summary>
            <param name="ssn"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsEmail(System.String,System.Boolean)">
            <summary>
            Determines if email supplied is a valid email.
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsUrl(System.String,System.Boolean)">
            <summary>
            Determines if url supplied is a valid url.
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsZipCode(System.String,System.Boolean)">
            <summary>
            Determines if email supplied is a valid email.
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsZipCodeWith4Char(System.String,System.Boolean)">
            <summary>
            Determines if email supplied is a valid zip with 4 additional chars.
            e.g. 12345-2321
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.AreEqual``1(``0,``0)">
            <summary>
            Determines if items are equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.AreNotEqual``1(``0,``0)">
            <summary>
            Determines if objects are not equal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.ContainsLongSingleWord(System.String,System.Int32,System.String)">
            <summary>
            Is valid - text doesn't contain any word that has
            more than maxChars specified.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.AreEqual``1(``0,``0,ComLib.IErrors,System.String)">
            <summary>
            Determines if items are equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.AreNotEqual``1(``0,``0,ComLib.IErrors,System.String)">
            <summary>
            Determines if objects are not equal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.AreNoneNull(System.String[],System.String[],System.String,System.String)">
            <summary>
            Checks that none of the strings in the array are null.
            </summary>
            <param name="items">Array of strings to check for null. e.g. "username1", "password1"</param>
            <param name="itemNames">Representative names of the strings supplied in the array.</param>
            <param name="errorSuffix">String to use at the end of each error ( if string is emtpy. )
            e.g. " is not supplied." would be suffixed to "Username is not supplied."</param>
            <param name="multiLineSeparator">Separator to use for representing multiple errors on separate lines.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsStringLengthMatch(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,ComLib.IErrors,System.String)">
            <summary>
            Determine if string is valid with regard to minimum / maximum length.
            </summary>
            <param name="text">Text to check length of.</param>
            <param name="allowNull">Indicate whether or not to allow null.</param>
            <param name="minLength">-1 to not check min length, > 0 to represent min length.</param>
            <param name="maxLength">-1 to not check max length, > 0 to represent max length.</param>
            <returns>True if match based on parameter conditions, false otherwise.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsStringRegExMatch(System.String,System.Boolean,System.String,ComLib.IErrors,System.String)">
            <summary>
            Determines if string matches the regex.
            </summary>
            <param name="text">Text to match.</param>
            <param name="allowNull">Whether or not text can be null or empty for successful match.</param>
            <param name="regEx">Regular expression to use.</param>
            <returns>True if match, false otherwise.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsStringIn(System.String,System.Boolean,System.Boolean,System.String[],ComLib.IErrors,System.String)">
            <summary>
            Determines whether the text [is string in] [the specified values].
            </summary>
            <param name="text">The text.</param>
            <param name="allowNull">if set to <c>true</c> [allow null].</param>
            <param name="compareCase">if set to <c>true</c> [compare case].</param>
            <param name="allowedValues">The allowed values.</param>
            <param name="errors">The errors.</param>
            <param name="tag">The tag.</param>
            <returns>
            	<c>true</c> if [is string in] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsNumeric(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is numeric
            </summary>
            <param name="text"></param>
            <param name="checkMinBound"></param>
            <param name="checkMaxBound"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsNumericWithinRange(System.String,System.Boolean,System.Boolean,System.Double,System.Double,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is numeric and within the min/max bounds.
            </summary>
            <param name="text">Text to check if it's numeric and within bounds.</param>
            <param name="checkMinBound">Whether or not to check</param>
            <param name="checkMaxBound"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsNumericWithinRange(System.Double,System.Boolean,System.Boolean,System.Double,System.Double,ComLib.IErrors,System.String)">
            <summary>
            Determines if text supplied is numeric and within the min/max bounds.
            </summary>
            <param name="text">Text to check if it's numeric and within bounds.</param>
            <param name="checkMinBound">Whether or not to check</param>
            <param name="checkMaxBound"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsAlpha(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text is either lowercase/uppercase alphabets.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsAlphaNumeric(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if text is either lowercase/uppercase alphabets or numbers.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsDate(System.String,ComLib.IErrors,System.String)">
            <summary>
            Determines if the date supplied is a date.
            </summary>
            <param name="text"></param>
            <param name="checkBounds"></param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsDateWithinRange(System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime,ComLib.IErrors,System.String)">
            <summary>
            Determines if the date supplied is a date.
            </summary>
            <param name="text"></param>
            <param name="checkBounds"></param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsDateWithinRange(System.DateTime,System.Boolean,System.Boolean,System.DateTime,System.DateTime,ComLib.IErrors,System.String)">
            <summary>
            Determines if the date supplied is a date within the specified bounds.
            </summary>
            <param name="date"></param>
            <param name="checkMinBound"></param>
            <param name="checkMaxBound"></param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsTimeOfDay(System.String,ComLib.IErrors,System.String)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time"></param>
            <param name="checkBounds"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsTimeOfDayWithinRange(System.String,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan,ComLib.IErrors,System.String)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time"></param>
            <param name="checkBounds"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsTimeOfDayWithinRange(System.TimeSpan,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan,ComLib.IErrors,System.String)">
            <summary>
            Determines if the time string specified is a time of day. e.g. 9am
            and within the bounds specified.
            </summary>
            <param name="time"></param>
            <param name="checkBounds"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsPhoneUS(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if the phone number supplied is a valid US phone number.
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsPhoneUS(System.Int32,ComLib.IErrors,System.String)">
            <summary>
            Determines if the phone number supplied is a valid US phone number.
            </summary>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsSsn(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if ssn supplied is a valid ssn.
            </summary>
            <param name="ssn"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsSsn(System.Int32,ComLib.IErrors,System.String)">
            <summary>
            Determines if ssn supplied is a valid ssn.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsEmail(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if email supplied is a valid email.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsUrl(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if url supplied is a valid url.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsZipCode(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if email supplied is a valid email.
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsZipCodeWith4Char(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if email supplied is a valid zip with 4 additional chars.
            e.g. 12345-2321
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.IsZipCodeWith4CharOptional(System.String,System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Determines if email supplied is a valid zip with 4 additional chars.
            e.g. 12345-2321
            </summary>
            <param name="text">The text check</param>
            <param name="allowNull">Whether or not the text can be null</param>
            <param name="errors">List of errors.</param>
            <param name="tag">Tag used to identify the error.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.CheckError(System.Boolean,ComLib.IErrors,System.String,System.String)">
            <summary>
            Check the condition and add the error.
            </summary>
            <param name="isValid"></param>
            <param name="errors"></param>
            <param name="tag"></param>
            <param name="error"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.Validation.CheckErrorRegEx(System.String,System.Boolean,System.String,ComLib.IErrors,System.String,System.String)">
            <summary>
            Check the text for the regex pattern and adds errors in incorrect.
            </summary>
            <param name="inputText"></param>
            <param name="allowNull"></param>
            <param name="regExPattern"></param>
            <param name="errors"></param>
            <param name="tag"></param>
            <param name="error"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.EnumerableExtensions">
            <summary>
            Extension methods for collections.
            </summary>
        </member>
        <member name="M:ComLib.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute action on each item in enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.EnumerableExtensions.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Joins the specified items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="delimeter">The delimeter.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.AsDelimited``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts an enumerable collection to an delimited string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.HasAnyNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check for any nulls.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.IsTrueForAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check if any of the items in the collection satisfied by the condition.
            </summary>
            <param name="items"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.IsTrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check if all of the items in the collection satisfied by the condition.
            </summary>
            <param name="items"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumerableExtensions.ToDictionary``1(System.Collections.Generic.IList{``0})">
            <summary>
            Check if all of the items in the collection satisfied by the condition.
            </summary>
            <param name="items"></param>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Queue.IQueueProcessor">
            <summary>
            Queue processing interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor.GetStatus">
            <summary>
            Gets information about the current state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.IsBusy">
            <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.IsStopped">
            <summary>
            Gets a value indicating whether this instance is stopped.
            </summary>
            <value>
            	<c>true</c> if this instance is stopped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:ComLib.Queue.IQueueProcessor`1">
            <summary>
            Queue processing interface w/ specific type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor`1.Dequeue">
            <summary>
            Dequeues a single item from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.IQueueProcessor`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Queue.IQueueProcessor`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="M:ComLib.Models.PropInfo.#ctor(System.String,System.Type)">
            <summary>
            Initialize using name of property and it's datatype.
            </summary>
            <param name="name"></param>
            <param name="dataType"></param>
        </member>
        <member name="P:ComLib.Models.PropInfo.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.DataType">
            <summary>
            DataType of the property.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.DefaultValue">
            <summary>
            Default value for this property.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.RegEx">
            <summary>
            Regular expression to use for validations.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsKey">
            <summary>
            Is Primary key.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsRequired">
            <summary>
            If this is a required / not-null property.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsGetterOnly">
            <summary>
            Indicate if this property is only a getter, no setter.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.CheckMinLength">
            <summary>
            Indicate if min length should be checked.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.CheckMaxLength">
            <summary>
            Indicate if max length should be checked.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.MinLength">
            <summary>
            Maximum length for this property if string.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.MaxLength">
            <summary>
            Maximum length for this property if string.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsUnique">
            <summary>
            Is unique.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.ColumnName">
            <summary>
            Name if empty.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.CreateCode">
            <summary>
            Whether or not to create this property in code.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.CreateColumn">
            <summary>
            Whether or not to create this property in code.
            </summary>
        </member>
        <member name="P:ComLib.Models.PropInfo.IsRegExConst">
            <summary>
            Indicates if the regular expression supplied is a constant.
            </summary>
        </member>
        <member name="T:ComLib.Models.Relation">
            <summary>
            Relationship to model.
            </summary>
        </member>
        <member name="M:ComLib.Models.Relation.#ctor(System.String)">
            <summary>
            Initialize with the model name.
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="T:ComLib.Logging.LogHelper">
            <summary>
            Helper class for logging.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogHelper.LogToConsole``1(ComLib.Logging.LogLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Logs to the console.
            </summary>
            <typeparam name="T">The datatype of the caller that is logging the event.</typeparam>
            <param name="level">The log level</param>
            <param name="message">Message to log</param>
            <param name="ex">Exception to log</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:ComLib.Logging.LogHelper.BuildLogEvent(System.Type,ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Construct the logevent using the values supplied.
            Fills in other data values in the log event.
            </summary>
            <param name="level">The log level</param>
            <param name="message">Message to log</param>
            <param name="ex">Exception to log</param>
            <param name="args">Additional args.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComLib.Logging.LogHelper.GetLogLevel(System.String)" -->
        <member name="M:ComLib.Logging.LogHelper.BuildLogFileName(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Build the log file name.
            </summary>
            <param name="appName">E.g. "StockMarketApplication".</param>
            <param name="date">E.g. Date to put in the name.</param>
            <param name="env">Environment name. E.g. "DEV", "PROD".</param>
            <param name="logFileName">E.g. "%name%-%yyyy%-%MM%-%dd%-%env%-%user%.log".
            Name of logfile containing substituions. </param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Logging.LogFormatter">
            <summary>
            Log formatter.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFormatter.Format(System.String,ComLib.Logging.LogEvent)">
            <summary>
            Quick formatter that toggles between delimited and xml.
            </summary>
            <param name="formatter"></param>
            <param name="logEvent"></param>
        </member>
        <member name="M:ComLib.Logging.LogFormatter.Format(ComLib.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.LogFormatter.FormatXml(ComLib.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Logging.LogEvent">
            <summary>
            A record in the log.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Level">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Message">
            <summary>
            Message that is logged.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.FinalMessage">
            <summary>
            This is the final message that is printed.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Error">
            <summary>
            Exception passed.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Args">
            <summary>
            Additional arguments passed by caller.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Computer">
            <summary>
            Name of the computer.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.CreateTime">
            <summary>
            Create time.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.ThreadName">
            <summary>
            The name of the currently executing thread that created this log entry.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.UserName">
            <summary>
            Name of the user.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.Ex">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogEvent.LogType">
            <summary>
            The data type of the caller that is logging the event.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogEvent.#ctor">
            <summary>
            Enable default constructor.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogLevel">
            <summary>
            Level for the logging.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Message">
            <summary>
            Used to always log a message regardless of loglevel
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Debug">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Info">
            <summary>
            Info level
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Warn">
            <summary>
            Warn level
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Error">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogLevel.Fatal">
            <summary>
            Fatal level
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogSettings">
            <summary>
            Settings for a logger.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogSettings.Level">
            <summary>
            Current log level.
            </summary>
        </member>
        <member name="F:ComLib.Logging.LogSettings.AppName">
            <summary>
            Application associated w/ logger.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogBase">
            <summary>
            Provides basic methods for implementation classes,
            including the Wrapper class around Log4Net.
            </summary>
        </member>
        <member name="T:ComLib.Logging.ILog">
            <summary>
            Simple interface for logging information.
            This extends the common Log4net interface by 
            
            1. Taking additional argument as an object array
            2. Exposing a simple Log method that takes in the loglevel.
            
            </summary>
        </member>
        <member name="M:ComLib.Logging.ILog.Log(ComLib.Logging.LogEvent)">
            <summary>
            Logs the specified level.
            </summary>
        </member>
        <member name="M:ComLib.Logging.ILog.Warn(System.Object)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a warning message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a warning message with exception and additional arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs an error message with the exception additional arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a debug message with the exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Fatal(System.Object)">
            <summary>
            Logs a Fatal message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a Fatal message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a fatal message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Info(System.Object)">
            <summary>
            Logs a Info message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs a Info message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a info message with the arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Message(System.Object)">
            <summary>
            Logs a Message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Message(System.Object,System.Exception)">
            <summary>
            Logs a Message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Messages should always get logged.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Log(ComLib.Logging.LogLevel,System.Object)">
            <summary>
            Logs a Message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Log(ComLib.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs a Message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.ILog.Log(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Messages should always get logged.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>        
        </member>
        <member name="M:ComLib.Logging.ILog.IsEnabled(ComLib.Logging.LogLevel)">
            <summary>
            Is the level enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.ILog.BuildLogEvent(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Builds a log event from the parameters supplied.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.ILog.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.ILog.ShutDown">
            <summary>
            Shutdown the logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.ILog.Name">
            <summary>
            Get the name of the logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.ILog.Level">
            <summary>
            Get / set the loglevel.
            </summary>
        </member>
        <member name="P:ComLib.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.ILog.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.ILog.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.ILog.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is info enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.ILog.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ComLib.Logging.LogBase.#ctor">
            <summary>
            Default logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.#ctor(System.Type)">
            <summary>
            Initialize logger with default settings.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.#ctor(System.String)">
            <summary>
            Initialize logger with default settings.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.IsEnabled(ComLib.Logging.LogLevel)">
            <summary>
            Whether or not the level specified is enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.LogBase.Log(ComLib.Logging.LogEvent)">
            <summary>
            Logs the event.
            </summary>
            <remarks>This is the method to override in any logger that extends this class.</remarks>
        </member>
        <member name="M:ComLib.Logging.LogBase.Flush">
            <summary>
            Flush the log entries to output.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.Warn(System.Object)">
            <summary>
            Logs as Warn.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Warn(System.Object,System.Exception)">
            <summary>
            Logs as Warn.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Error(System.Object)">
            <summary>
            Logs as Error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Error(System.Object,System.Exception)">
            <summary>
            Logs as Error.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Debug(System.Object)">
            <summary>
            Logs as Debug.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Debug(System.Object,System.Exception)">
            <summary>
            Logs as Debug.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message as debug.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Fatal(System.Object)">
            <summary>
            Logs as Fatal.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Fatal(System.Object,System.Exception)">
            <summary>
            Logs as Fatal.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message as fatal.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Info(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Info(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Infoes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Message(System.Object)">
            <summary>
            Logs as Message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Message(System.Object,System.Exception)">
            <summary>
            Logs as Message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Infoes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Log(ComLib.Logging.LogLevel,System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Log(ComLib.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.Log(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Infoes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.LogBase.InternalLog(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="M:ComLib.Logging.LogBase.ShutDown">
            <summary>
            Shutdown logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.BuildLogEvent(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Construct the logevent using the values supplied.
            Fills in other data values in the log event.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="M:ComLib.Logging.LogBase.BuildMessage(ComLib.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.LogBase.ExecuteRead(System.Action)">
            <summary>
            Exectutes the action under a read operation after
            aquiring the reader lock.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ComLib.Logging.LogBase.ExecuteWrite(System.Action)">
            <summary>
            Exectutes the action under a write operation after
            aquiring the writer lock.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ComLib.Logging.LogBase.AcquireReaderLock">
            <summary>
            Gets the reader lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.ReleaseReaderLock">
            <summary>
            Release the reader lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.AcquireWriterLock">
            <summary>
            Acquire the writer lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogBase.ReleaseWriterLock">
            <summary>
            Release the writer lock.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.Name">
            <summary>
            Name of this logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.Parent">
            <summary>
            Get / set the parent of this logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.Settings">
            <summary>
            Log settings.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.Level">
            <summary>
            Log level.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is info enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.LogBase.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:ComLib.Logging.LogBase.Item(System.Int32)">
            <summary>
            Get logger at the specified index.
            This is a single logger and this call will always return 
            referece to self.
            </summary>
            <param name="logIndex"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.IO.IniDocument">
            <summary>
            IniDocument to handle loading and writing(not yet done)
            of ini files.
            
            This class can load a MULTI-LINE ini file into a dictionary like data structure.
            
            [BlogPost1]
            Title : Introduction to Oil painting class.
            Description : "Learn how to paint using
            oil, in this beginners class for painting enthusiats."
            Url : http://www.knowledgedrink.com
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigSource">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="M:ComLib.Configuration.ConfigSource.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSource.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSource.Load">
            <summary>
            Load from datasource.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSource.Save">
            <summary>
            Save to the datasource.
            </summary>
        </member>
        <member name="E:ComLib.Configuration.ConfigSource.OnConfigSourceChanged">
            <summary>
            Event handler for when the underlying config source changed.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSource.SourcePath">
            <summary>
            The source file path.
            </summary>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.Collections.Generic.IList{ComLib.Configuration.ConfigSection})">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="sections"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="sections"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="sections"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the ini document with the string or file path.
            </summary>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the ini document with the string or file path.
            </summary>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.Init(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize.
            </summary>
            <param name="name"></param>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:ComLib.IO.IniDocument.Load">
            <summary>
            Load settings.
            </summary>
        </member>
        <member name="M:ComLib.IO.IniDocument.Save">
            <summary>
            Save the document to file.
            </summary>
        </member>
        <member name="M:ComLib.IO.IniDocument.Save(System.String)">
            <summary>
            Save the document to the filepath specified.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:ComLib.IO.IniDocument.SourcePath">
            <summary>
            Source path of this file.
            </summary>
        </member>
        <member name="T:ComLib.IO.IniSection">
            <summary>
            Class to represent an IniSection/Group and which also stores the entries
            associated under the section/group.
            e.g. 
            [group1]
            key1 = value1
            key2 = value2
            </summary>
        </member>
        <member name="M:ComLib.IO.IniSection.Clone">
            <summary>
            Create shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.IniSection.ToString">
            <summary>
            Return the ini format of the contents.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.IO.IniLineType">
            <summary>
            The type of the ini line type.
            </summary>
        </member>
        <member name="T:ComLib.IO.IniParserConstants">
            <summary>
            Parser constants.
            </summary>
        </member>
        <member name="T:ComLib.IO.IniParserSettings">
            <summary>
            Settings for the parser.
            </summary>
        </member>
        <member name="T:ComLib.IO.IIniParser">
            <summary>
            Interface for an IniParser, This is a parser that supports
            parsing multiple lines for the values.
            e.g. 
            
            [post1]
            title: My first post
            description: " This is a ini parser that can handle
            parsing multiples lines for the value. "
            
            </summary>
        </member>
        <member name="M:ComLib.IO.IIniParser.Parse(System.String)">
            <summary>
            Parse the ini content.
            </summary>
            <param name="iniContent"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.IO.IIniParser.Settings">
            <summary>
            Settings for the parser.
            </summary>
        </member>
        <member name="P:ComLib.IO.IIniParser.Errors">
            <summary>
            List of errors
            </summary>
        </member>
        <member name="T:ComLib.IO.IniParser">
            <summary>
            Parser.
            Terms:
            1. Char - a single char whether it's space, doublequote, singlequote, etc.
            2. Token - a collection of chars that make up a valid word/word-boundary.
                e.g.
                1. abc, 
                2. -format:csv
                3. -file:"c:/my files/file1.txt"
                4. loc:'c:/my files/file1.txt'
                5. -format:csv
            </summary>
        </member>
        <member name="M:ComLib.IO.IniParser.Parse(System.String)">
            <summary>
            Parse the text and convert into list of params.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.IniParser.Init(System.String)">
            <summary>
            Initialize the reader and the stack.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ComLib.IO.IniParser.ValidateText">
            <summary>
            Confirm that the input text is valid text
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.IO.IniParser.Errors">
            <summary>
            List of errors.
            </summary>
        </member>
        <member name="T:ComLib.ImportExport.IImportExportService`1">
            <summary>
            Interface for an import/export service on objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.TotalExportCount">
            <summary>
            Gets the total count of the items that can be exported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.Load(System.Collections.IDictionary)">
            <summary>
            Determines whether this instance can import the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.LoadFile(System.String)">
            <summary>
            Determines whether this instance can import the specified items from the file
            </summary>
            <param name="filePath">The path to the file to import.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.LoadText(System.String,System.String)">
            <summary>
            Determines whether this instance can import the specified items from text.
            </summary>
            <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.ImportFile(System.String)">
            <summary>
            Imports the specified items from the file.
            </summary>
            <param name="filePath">The path to the file to import.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.ImportText(System.String,System.String)">
            <summary>
            Imports the specified items from the text
            </summary>
            <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.Export(System.Int32,System.Int32)">
            <summary>
            Exports a batch of items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.ExportToFile(System.String)">
            <summary>
            Exports all to the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.ExportToFile(System.String,System.Int32,System.Int32)">
            <summary>
            Exports the specified batch to the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.IImportExportService`1.ExportToText(System.Int32,System.Int32)">
            <summary>
            Exports the specified batch as a text string.
            </summary>
            <param name="batchIndex"></param>
            <param name="batchSize"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.ImportExport.IImportExportService`1.Validator">
            <summary>
            The validator for validating items during import.
            </summary>
        </member>
        <member name="T:ComLib.Feeds.IPublishable">
            <summary>
            Interface for items that can generated into syndication feeds(rss, atom).
            </summary>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.Title">
            <summary>
            Gets the title of the object
            </summary>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.CreateDate">
            <summary>
            Gets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.UpdateDate">
            <summary>
            Gets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.GuidId">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.UrlRelative">
            <summary>
            Gets the relative link.
            </summary>
            <value>The relative link.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.UrlAbsolute">
            <summary>
            Gets the absolute link.
            </summary>
            <value>The absolute link.</value>
        </member>
        <member name="P:ComLib.Feeds.IPublishable.Author">
            <summary>
            Gets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="M:ComLib.Extensions.TimeSpanExtensions.IsMidnightExactly(System.TimeSpan)">
            <summary>
            Determines whether [is midnight exactly] [the specified t].
            </summary>
            <param name="t">The t.</param>
            <returns>
            	<c>true</c> if [is midnight exactly] [the specified t]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Extensions.TimeSpanExtensions.ToMilitaryString(System.TimeSpan)">
            <summary>
            Get simple time format
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.TimeSpanExtensions.ToMilitaryInt(System.TimeSpan)">
            <summary>
            Returns an integer representing mii
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.EntityCreationType">
            <summary>
            Specifies how to create the service for the entity.
            If set to IocWithNamingConvention names will have to be :
            1. Service      "(EntityName)Service"
            2. Repository   "(EntityName)Repository"
            3. Validator    "(EntityName)Valdiator"
            4. Controller   "(EntityName)Controller"
            5. Settings     "(EntityName)Settings"
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityRegistrationContext">
            <summary>
            This represents whether or not to create a Service/Repository/Validator
            and how to create it.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Name">
            <summary>
            The prefix used for naming all the various components in the DomainModel
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.ConnectionId">
            <summary>
            Id of the connection string to use.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.EntityType">
            <summary>
            The type of the entity.
            Post or CommonLibrary.NamedQuery
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.ActionContextType">
            <summary>
            Get the type of the context used for an entity service.
            e.g. type that extends IActionContext
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Service">
            <summary>
            Singleton service.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Repository">
            <summary>
            Singleton repository
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Validator">
            <summary>
            Validator for the entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Settings">
            <summary>
            The settings object for the type.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.Resources">
            <summary>
            Resource strings for the object.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.FactoryMethodForService">
            <summary>
            Reference to the factory-like method for creating the entityService.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.FactoryMethodForRepository">
            <summary>
            Factory for the repository.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.FactoryMethodForValidator">
            <summary>
            Validator creator.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.IsSingletonService">
            <summary>
            Singleton service.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.IsSingletonRepository">
            <summary>
            Singleton repository.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.IsSingletonValidator">
            <summary>
            Singleton validator.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.IsRepositoryConfigurationRequired">
            <summary>
            Does the repository need to be configured w/ the connection?
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationContext.CreationMethod">
            <summary>
            The approach used to create the components used in the ActiveRecord DomainModel.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityRegistrationContext.#ctor">
            <summary>
            Allow default construction.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityRegistrationContext.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="!:ActiveRecordRegistrationContext"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="typ">The typ.</param>
        </member>
        <member name="P:ComLib.Entities.EntityRegistrationContext.IsExceptionThrownOnCrudFailure">
            <summary>
            Gets or sets a value indicating whether this instance is exception thrown.
            </summary>
            <value><c>true</c> if this instance is exception thrown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Entities.EntityRegistrationContext.IsEntityErrorCollectionPopulated">
            <summary>
            Gets or sets a value indicating whether this instance is entity error collection populated.
            </summary>
            <value><c>true</c> if this instance is entity error collection populated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Entities.EntityRegistrationContext.IsEntityErrorCollectionClearedBeforePopulation">
            <summary>
            Gets or sets a value indicating whether this instance is entity error collection cleared first.
            </summary>
            <value><c>true</c> if this instance is entity error collection cleared first; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComLib.Data.RowMapperTableBased`1">
            <summary>
            Abstract class for mapping a DataTable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Data.RowMapperTableBased`1.MapRows(System.Data.DataTable)">
            <summary>
            Maps all the rows using DataTable.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.RowMappingContext`3">
            <summary>
            Context used when mapping a row.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRowId"></typeparam>
        </member>
        <member name="F:ComLib.Data.RowMappingContext`3.IsRowIdStringBased">
            <summary>
            Just used for contextual information at the moment.
            </summary>
        </member>
        <member name="F:ComLib.Data.RowMappingContext`3.Source">
            <summary>
            The Datasource. e.g. Xmldocument, Inidocument, Csvdocument.
            </summary>
        </member>
        <member name="F:ComLib.Data.RowMappingContext`3.RowId">
            <summary>
            The Row id, either a sting, int or some other object.
            </summary>
        </member>
        <member name="F:ComLib.Data.RowMappingContext`3.ValidationResults">
            <summary>
            Collect the errors during the mapping.
            </summary>
        </member>
        <member name="T:ComLib.Data.RowMapperContextual`3">
            <summary>
            Row Mapper with contextual information.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRowId"></typeparam>
        </member>
        <member name="M:ComLib.Data.RowMapperContextual`3.MapRows(ComLib.Data.RowMappingContext{`0,`1,`2})">
            <summary>
            Map rows with more extensive error capturing.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.RowMapperContextual`3.MapRow(ComLib.Data.RowMappingContext{`0,`1,`2})">
            <summary>
            Map row with more extensive error capturing.
            </summary>
            <param name="source"></param>
            <param name="rowId"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.DbExecute">
            <summary>
            Class containing various helper methods for accessing data.
            </summary>
        </member>
        <member name="M:ComLib.Data.DbExecute.Execute``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.String)">
            <summary>
            Execute a non-query with a single output value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">E.g. Storedprocedure : Posts_DeleteExpired</param>
            <param name="commandType">Type of the command.</param>
            <param name="outputParamName">The name of the output parameter. E.g. @TotalRows</param>
            <param name="dbParameters">Input parameters.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DbExecute.Execute(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.String,System.Data.DbType,System.Object)">
            <summary>
            Execute a non-query with a single input parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">E.g. Storedprocedure : Posts_DeleteByUser</param>
            <param name="commandType">Type of the command.</param>
            <param name="paramName">E.g. "@UserName"</param>
            <param name="paramType">E.g. DbType.String</param>
            <param name="paramValue">E.g. "kreddy"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DbExecute.Execute(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.String[])">
            <summary>
            Executes the non-query and returns a dictionary of all the output parameters.
            </summary>
            <param name="dbHelper"></param>
            <param name="commandText">StoredProc : Posts_PerformActivation</param>
            <param name="commandType">StoredProc</param>
            <param name="dbParameters">Array of all input parameters to the proc.</param>
            <param name="outputParamNames">Array of output parameter names.
            e.g. "@TotalRecordsUpdated", @TotalProductTypesUpdated"</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Cryptography.CryptoHash">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="T:ComLib.Cryptography.ICrypto">
            <summary>
            Cryptography interface to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.ICrypto.Encrypt(System.String)">
            <summary>
            Encrypts a string.
            </summary>
            <param name="plaintext"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.ICrypto.Decrypt(System.String)">
            <summary>
            Decrypt the encrypted text.
            </summary>
            <param name="base64Text">The encrypted base64 text</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.ICrypto.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="text1"></param>
            <param name="text2"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Cryptography.ICrypto.Settings">
            <summary>
            Options for encryption.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.#ctor">
            <summary>
            Default options
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.#ctor(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="!:SymmetricCryptoService"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.#ctor(ComLib.Cryptography.CryptoConfig,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="!:SymmetricCryptoService"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.SetAlgorithm(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Set the creator for the algorithm.
            </summary>
            <param name="algorithmCreator"></param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptoHash.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="text1"></param>
            <param name="text2"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Cryptography.CryptoHash.Settings">
            <summary>
            Options for encryption.
            </summary>
            <value></value>
        </member>
        <member name="T:ComLib.Cryptography.CryptoSym">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.#ctor">
            <summary>
            Default options
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.#ctor(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="!:SymmetricCryptoService"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.#ctor(ComLib.Cryptography.CryptoConfig,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="!:SymmetricCryptoService"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.SetAlgorithm(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Set the creator for the algorithm.
            </summary>
            <param name="algorithmCreator"></param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptoSym.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="text1"></param>
            <param name="text2"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Cryptography.CryptoSym.Settings">
            <summary>
            Options for encryption.
            </summary>
            <value></value>
        </member>
        <member name="T:ComLib.Configuration.ConfigSectionUtils">
            <summary>
            Config section utils for adding/removing from both a map and list.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSectionUtils.Add(System.Collections.IDictionary,System.String,System.Object,System.Boolean)">
            <summary>
            Add item to map checking for duplicate keys.
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSectionUtils.Add(System.Collections.IDictionary,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add key / value pair to the section specified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="sectionName">E.g. "server"</param>
            <param name="key">"name"</param>
            <param name="val">"myserver01"</param>
            <param name="overWrite">true</param>
            <param name="creator">delegate that can create section </param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSectionUtils.Get``1(System.Collections.IDictionary,System.String,System.Int32)">
            <summary>
            Get the entry at the specified index of the multivalue list 
            associated with the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key">"post"</param>
            <param name="ndx">1</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.DictionaryMultiValue`2">
            <summary>
            Dictionary based class to allow multiple values for a specific key.
            e.g. "searchsettings" = list{ setting1, setting2, setting3, .. settingN }
            where setting1 and setting2 both are associated with keys.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Get(`0)">
            <summary>
            Returns the entire list associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Add(`0,`1)">
            <summary>
            Add the key-value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryMultiValue`2.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.Item(`0)">
            <summary>
            Returns the first of the multiple values associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryMultiValue`2.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionaryStringExtensions">
            <summary>
            Extensions to Non-Generic Dictionary
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetInt``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a int.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetBool``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a bool.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetString``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetDouble``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a double.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetDateTime``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a datetime.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryStringExtensions.GetLong``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Get the value associated with the key as a long.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Caching.Cacher">
            <summary>
            Cache manager using AspNet which groups all the keys with a prefix.
            </summary>
        </member>
        <member name="M:ComLib.Caching.Cacher.#cctor">
            <summary>
            Initialize with spring cache.
            </summary>
            <param name="springCache"></param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Init(ComLib.Caching.ICache)">
            <summary>
            Initialize the cache provider.
            </summary>
            <param name="cacheProvider"></param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Contains(System.String)">
            <summary>
            Whether or not there is a cache entry for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.Object)">
            <summary>
            Get the object associated with the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            Get the cached entry specified by the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key</param>
            <param name="timeInSeconds">How long to cache</param>
            <param name="fetcher">The lamda to call to get the item if not in cache.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            Get the cached entry specified by the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key</param>
            <param name="timeInSeconds">How long to cache</param>
            <param name="fetcher">The lamda to call to get the item if not in cache.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.String,System.Boolean,System.TimeSpan,System.Func{``0})">
            <summary>
            Get the cached entry specified by the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key</param>
            <param name="useCache">Whether or not cache should be used at all.</param>
            <param name="timeInSeconds">How long to cache</param>
            <param name="fetcher">The lamda to call to get the item if not in cache.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Get``1(System.String,System.Boolean,System.Int32,System.Boolean,System.Func{``0})">
            <summary>
            Get the cached entry specified by the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The cache key</param>
            <param name="useCache">Whether or not cache should be used at all.</param>
            <param name="timeInSeconds">How long to cache</param>
            <param name="slidingExpiration">Whether or not to apply sliding expiration to cache.</param>
            <param name="fetcher">The lamda to call to get the item if not in cache.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.Cacher.Remove(System.Object)">
            <summary>
            Remove from cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ComLib.Caching.Cacher.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the items associated with the keys specified.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Clear">
            <summary>
            Clear all the items in the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.Cacher.Insert(System.Object,System.Object)">
            <summary>
            Insert an item into the cache.
            </summary>
            <param name="key">The cache key</param>
            <param name="value">The cache value</param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Insert(System.Object,System.Object,System.Int32,System.Boolean)">
            <summary>
            Insert an item into the cache with the specified sliding expiration.
            </summary>
            <param name="key">The cache key</param>
            <param name="value">The cache value</param>
            <param name="timeToLive">How long in seconds the object should be cached.</param>
            <param name="slidingExpiration">Whether or not to reset the time to live if the object is touched.</param>
        </member>
        <member name="M:ComLib.Caching.Cacher.Insert(System.Object,System.Object,System.Int32,System.Boolean,ComLib.Caching.CacheItemPriority)">
            <summary>
            Insert an item into the cache with the specified time to live, 
            sliding expiration and priority.
            </summary>
            <param name="key">The cache key</param>
            <param name="value">The cache value</param>
            <param name="timeToLive">How long in seconds the object should be cached.</param>
            <param name="slidingExpiration">Whether or not to reset the time to live if the object is touched.</param>
            <param name="priority">Priority of the cache entry.</param>
        </member>
        <member name="M:ComLib.Caching.Cacher.GetDescriptors">
            <summary>
            Get the items in the cache and their types.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Caching.Cacher.Provider">
            <summary>
            Get the current cache provider being used.
            </summary>
        </member>
        <member name="P:ComLib.Caching.Cacher.Count">
            <summary>
            Get the number of items in the cache that are 
            associated with this instance.
            </summary>
        </member>
        <member name="P:ComLib.Caching.Cacher.Keys">
            <summary>
            Get the collection of cache keys associated with this instance of
            cache ( using the cachePrefix ).
            </summary>
        </member>
        <member name="M:ComLib.Authentication.RoleHelper.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.RoleHelper.IsInRoles(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Arguments.ArgsValidator">
            <summary>
            Validation Helper class for confirming that argument were correctly supplied and with 
            appropriate typed values.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgsValidator.ValidateInputs(System.String[],System.String,System.String)">
            <summary>
            Validate the inputs for parsing the arguments.
            </summary>
            <param name="args"></param>
            <param name="prefix"></param>
            <param name="separator"></param>
            <param name="argSpecs"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsValidator.Validate(ComLib.Arguments.Args,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.IList{System.String},System.Action{ComLib.Arguments.ArgAttribute,System.String,System.Int32})">
            <summary>
            Validate the parsed args supplied with the args specification list.
            </summary>
            <param name="parsedArgs"></param>
            <param name="argSpecs"></param>
            <param name="errors"></param>
            <param name="onArgumentValidationSuccessCallback"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsValidator.ValidateArg(ComLib.Arguments.ArgAttribute,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates various aspects of the argument.
            </summary>
            <param name="argAttr"></param>
            <param name="argVal"></param>
            <param name="errors"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsValidator.ValidateIndex(ComLib.Arguments.ArgAttribute,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates the index position of the non-named argument.
            </summary>
            <param name="argAttr"></param>
            <param name="positionalArgCount"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchSource">
            <summary>
            Type of data to search.
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchEngine">
            <summary>
            SearchEngine
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngine.Init(ComLib.Web.Services.Search.ISearchEngineService)">
            <summary>
            Inits the specified service.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngine.Search(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Searches the specified keywords.
            </summary>
            <param name="keywords">The keywords.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="recordsPerPage">The records per page.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngine.SearchSite(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Searches the site.
            </summary>
            <param name="keywords">The keywords.</param>
            <param name="siteToSearch">The site to search.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="recordsPerPage">The records per page.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchEngine.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchEngineBing">
            <summary>
            Search Engine.
            commoncms
            7F2DBB51D1FE49D765EE5BE05984D589872A74E6
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.Search.ISearchEngineService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.Search.ISearchEngineService.Search(ComLib.Web.Services.Search.SearchRequest)">
            <summary>
            Searches the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Web.Services.Search.ISearchEngineService.Settings">
            <summary>
            Settings for search.
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngineBing.#ctor(ComLib.Web.Services.Search.SearchSettings)">
            <summary>
            Initialize.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:ComLib.Web.Services.Search.SearchEngineBing.Search(ComLib.Web.Services.Search.SearchRequest)">
            <summary>
            Executes the query.
            </summary>
            <returns></returns>            
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchEngineBing.Settings">
            <summary>
            Settings for searching.
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchSettings">
            <summary>
            Settings for the search engine.
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchSettings.AppId">
            <summary>
            Gets or sets the app id.
            </summary>
            <value>The app id.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchSettings.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchResult">
            <summary>
            Search Engine results.
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchResult.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchResult.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchResult.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchResult.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="T:ComLib.Web.Services.Search.SearchRequest">
            <summary>
            SearchEngine request
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.SiteToSearch">
            <summary>
            Used to search only a specific site.
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.ResultsPerPage">
            <summary>
            Gets or sets the results per page.
            </summary>
            <value>The results per page.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.PageIndex">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.QueryText">
            <summary>
            Gets or sets the query text.
            </summary>
            <value>The query text.</value>
        </member>
        <member name="P:ComLib.Web.Services.Search.SearchRequest.Highlight">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ComLib.Web.Services.Search.SearchEngine"/> is highlight.
            </summary>
            <value><c>true</c> if highlight; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComLib.PagedList`1">
            <summary>
            Paged list to represent the page index, size, total records, and total pages
            in addition to the items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ComLib.PagedList`1.Empty">
            <summary>
            Empty/ null object.
            </summary>
        </member>
        <member name="M:ComLib.PagedList`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Initialize w/ items, page index, size and total records.
            </summary>
            <param name="items">The items representing the list.</param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
        </member>
        <member name="T:ComLib.Scheduling.IScheduler">
            <summary>
            Runs the task
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Scheduling.SchedulerStatus">
            <summary>
            Status of the task scheduler.
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositoryVersioned`1">
            <summary>
            Repository that versions the Entities on updates.
            </summary>
            <remarks>
            This works via the following:
            1. Decorates any existing Repository you want to use.
            2. The entity T of the repository must implement IEntityVersionable
            3. The Update method will create a new version of the entity without changing it's primary key.
            4. The VersionRefId of historic/older versions becomes the reference to the primary key.
               and the historic/older versions have a different primary key.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.RollBack(System.Int32)">
            <summary>
            Roll back the entity w/ the specified id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.RollBack(`0)">
            <summary>
            Rollback the entity to the prior version.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.GetAll">
            <summary>
            Returns the latest versions of all entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.GetAllVersions(System.Int32)">
            <summary>
            Returns the latest versions of all entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Update(`0)">
            <summary>
            Updates the entity while storing historic versions
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Delete(System.Int32)">
            <summary>
            Deletes the entity and all it's versions.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(ComLib.Data.IQuery)">
            <summary>
            Finds the latest versions, excluding historic ones.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(ComLib.Data.IQuery,System.Boolean)">
            <summary>
            Finds the latest versions, excluding historic ones.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryVersioned`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Finds latest versions, excluding historic ones.
            </summary>
            <param name="criteria"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.MapperSupport.MapperCsv`1">
            <summary>
            Mapper for sourcing data from Ini files.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.#ctor">
            <summary>
            Initialize with csv doc.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.#ctor(ComLib.CsvParse.CsvDoc)">
            <summary>
            Initialize with csv doc.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.Map(System.Object,ComLib.IErrors)">
            <summary>
            Map the objects.
            </summary>
            <param name="source"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.Map(ComLib.IErrors)">
            <summary>
            Map the ini file
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.MapFromFile(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="source"></param>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.MapFromText(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="source"></param>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperCsv`1.MapToFile(System.Collections.Generic.IList{`0},System.Collections.Generic.IDictionary{System.String,System.String},System.String,ComLib.IErrors)">
            <summary>
            Map the items to a csv text.
            </summary>
            <param name="items">The items to map</param>
            <param name="errors">The errors to collect.</param>
        </member>
        <member name="P:ComLib.MapperSupport.MapperCsv`1.SupportedFormat">
            <summary>
            Get the supported format of the data source.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.Init(System.String,ComLib.Calendars.ICalendarDataProvider,System.Int32,System.Int32)">
            <summary>
            Initialize
            </summary>
            <param name="calendarCode"></param>
            <param name="provider"></param>
            <param name="startYear"></param>
            <param name="endYear"></param>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.IsHolidayDataAvailable(System.Int32)">
            <summary>
            Determine if holiday data is available for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.IsBusinessDay(System.DateTime)">
            <summary>
            Is the supplied business date a holiday.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.Holidays(System.Int32)">
            <summary>
            Get all the holidays for the specified year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.Weekends(System.Int32)">
            <summary>
            Get all the weekends for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.BusinessDays(System.Int32)">
            <summary>
            Get all the business dates for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.NextBusinessDate(System.DateTime)">
            <summary>
            Get the next business date.
            </summary>
            <param name="afterDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.PreviousBusinessDate(System.DateTime)">
            <summary>
            Get the previous business date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.FirstBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the first business date for the specified month, year.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.FirstBusinessDateOfYear(System.Int32)">
            <summary>
            Get the first business date for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.LastBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the last business date for the specified month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.ICalendar.LastBusinessDateOfYear(System.Int32)">
            <summary>
            Get the last businessdate for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.ICalendar.CalendarCode">
            <summary>
            Calendar code.
            </summary>
        </member>
        <member name="P:ComLib.Calendars.ICalendar.HolidayProvider">
            <summary>
            The underlying holiday data provider.
            </summary>
        </member>
        <member name="T:ComLib.Calendars.ICalendarDataProvider">
            <summary>
            Holidays data provider.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.ICalendarDataProvider.Holidays(System.Int32,System.Int32)">
            <summary>
            Get all the holidays from the starting year the ending year specified.
            </summary>
            <param name="startyear"></param>
            <param name="endYear"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.ICalendarDataProvider.CalendarCode">
            <summary>
            Calendar code.
            </summary>
        </member>
        <member name="T:ComLib.Feeds.FeedFormat">
            <summary>
            Feed format.
            </summary>
        </member>
        <member name="T:ComLib.Feeds.FeedFormatDocType">
            <summary>
            
            </summary>
        </member>
        <member name="T:ComLib.Feeds.FeedHelper">
            <summary>
            Helper class for reading/writing feeds.
            </summary>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.LoadUrl(System.String)">
            <summary>
            Load a syndication from the specified url.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.LoadUrlItemsTitle(System.String,System.Int32)">
            <summary>
            Loads the URL items Title and Link into a list of key/values.
            </summary>
            <param name="url">The URL.</param>
            <param name="maxEntries">The max entries.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.LoadUrlAsXml(System.String)">
            <summary>
            Load feed from url into an xml string.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.Write(System.ServiceModel.Syndication.SyndicationFeed,ComLib.Feeds.FeedFormat,System.Xml.XmlWriter)">
            <summary>
            Writes the specified feed to either rss or atom format.
            </summary>
            <param name="feed">The feed.</param>
            <param name="format">The format.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.WriteAtom10(System.ServiceModel.Syndication.SyndicationFeed,System.IO.Stream)">
            <summary>
            Writes the feed as atom10.
            </summary>
            <param name="feed">The feed.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.WriteRss20(System.ServiceModel.Syndication.SyndicationFeed,System.IO.Stream)">
            <summary>
            Writes the feed as RSS20.
            </summary>
            <param name="feed">The feed.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.WriteAtom10(System.ServiceModel.Syndication.SyndicationFeed,System.Xml.XmlWriter)">
            <summary>
            Writes the atom10.
            </summary>
            <param name="feed">The feed.</param>
            <param name="xw">The xw.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedHelper.WriteRss20(System.ServiceModel.Syndication.SyndicationFeed,System.Xml.XmlWriter)">
            <summary>
            Writes the RSS20.
            </summary>
            <param name="xw">The xw.</param>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.IsLeapYear(System.DateTime)">
            <summary>
            Determines whether [is leap year] [the specified date].
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [is leap year] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.IsLastDayOfMonth(System.DateTime)">
            <summary>
            Determines whether [is last day of month] [the specified date].
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [is last day of month] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Gets the Last the day of month.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.ToJavascriptDate(System.DateTime)">
            <summary>
            Converts to javascript compatible date.
            </summary>
            <param name="dt">The dt.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.GetDateWithTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time on the date
            </summary>
            <param name="date">The date.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.GetDateWithTime(System.DateTime,System.TimeSpan)">
            <summary>
            Sets the time on the date
            </summary>
            <param name="date">The date.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DateTimeExtensions.GetDateWithCurrentTime(System.DateTime)">
            <summary>
            Sets the time on the date
            </summary>
            <param name="date">The date.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.Management.EntityServiceContext">
            <summary>
            Context information for performing CRUD operations at the Service <see cref="!:ComLib.Entities.Service"/>
            level on any Domain Entity.
            </summary>
        </member>
        <member name="T:ComLib.ActionContext">
            <summary>
            The action context to pass to ModelService to perform any action on the model.
            This is used to for encapsulation to avoid changing the method signature
            of a ModelService if additional arguments need to be passed.
            </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.IActionContext">
            <summary>
            Interface for action context.
            </summary>
            <remarks>This interface is NOT generic in order to
            use reflection for the EntityManager to be able to easily 
            create an instance where it does NOT know the type of entity.</remarks>
            <typeparam name="TId">The type of the id.</typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ComLib.IActionContext.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:ComLib.IActionContext.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <remarks>This is NOT genericly type. See remarkds above.</remarks>
            <value>The item.</value>
        </member>
        <member name="P:ComLib.IActionContext.Items">
            <summary>
            List of models to perform action on.
            </summary>
        </member>
        <member name="P:ComLib.IActionContext.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="P:ComLib.IActionContext.CombineMessageErrors">
            <summary>
            Gets or sets a value indicating whether [combine message errors].
            </summary>
            <value>
            	<c>true</c> if [combine message errors]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.IActionContext.UserName">
            <summary>
            The name of the user used for authentication.
            </summary>
        </member>
        <member name="P:ComLib.IActionContext.Args">
            <summary>
            Additional arguments to supply to context.
            </summary>
        </member>
        <member name="F:ComLib.ActionContext._item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="F:ComLib.ActionContext._combineMessagesErrors">
            <summary>
            Combines the messages and errors into a single line.
            </summary>
        </member>
        <member name="M:ComLib.ActionContext.#ctor">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(System.Object)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="!:ActionContext&lt;TId, T&gt;"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="combineErrors">if set to <c>true</c> [combine errors].</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:ActionContext&lt;TId, T&gt;"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="combineErrors">if set to <c>true</c> [combine errors].</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(ComLib.IValidationResults)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(System.Object,ComLib.IValidationResults)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="M:ComLib.ActionContext.#ctor(ComLib.IValidationResults,System.Int32)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
        </member>
        <member name="P:ComLib.ActionContext.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:ComLib.ActionContext.UserName">
            <summary>
            The name of user used for authentication purposes.
            </summary>
        </member>
        <member name="P:ComLib.ActionContext.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceContext.EntityName">
            <summary>
            The fully-qualified name of the entity on which the action is being performed on.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceContext.PropValues">
            <summary>
            List of key/value pairs corresponding the properties on the Entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Management.EntityServiceContext.#ctor(System.String,System.Int32)">
            <summary>
            Store the id and/or entityName.
            </summary>
            <param name="entityName"></param>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.Management.EntityServiceContext.#ctor(System.Type,System.Int32,System.Object)">
            <summary>
            Store the id and/or entityName.
            </summary>
            <param name="entityName"></param>
            <param name="id"></param>
        </member>
        <member name="T:ComLib.Entities.Management.EntityManager">
            <summary>
            Generic Reference data service to provide 
            1. Creation
            2. Retrieve
            3. Update
            4. Deletion
            
            operations to Reference data entities, such as 
            1. category
            2. state
            3. country
            4. location short names
            5. cities.
            
            </summary>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.#ctor">
            <summary>
            Initialize the mappings to the entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Create(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Update the specific entity with property values specified.
            </summary>
            <param name="entityName">"Category"</param>
            <param name="propValues">List of key value pairs.
            Where the key is the property name, and the value is a string 
            representation of the property value.</param>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Create(ComLib.Entities.Entity)">
            <summary>
            Create the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.GetAll(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Retrieves all the reference data records associated with the
            specified entity
            </summary>
            <param name="entity">e.g. "Category"</param>
            <returns>DataTable containing all entity records and all properties of the entity</returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Get(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Retrieve the entity with the specified id, given the entityType
            </summary>
            <param name="entityName">"Category"</param>
            <param name="id">"1" Id of a specific entity.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Update(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Update the specific entity with property values specified.
            </summary>
            <param name="entityName">"Category"</param>
            <param name="propValues">List of key value pairs.
            Where the key is the property name, and the value is a string 
            representation of the property value.</param>
            <param name="id">"2"</param>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Update(ComLib.Entities.Entity)">
            <summary>
            Update the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Delete(ComLib.Entities.Management.EntityServiceContext)">
            <summary>
            Delete the specific entity with the id.
            </summary>
            <param name="entityName">"Category"</param>
            <param name="id">"2"</param>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Delete(ComLib.Entities.Entity)">
            <summary>
            Delete the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.Management.EntityManager.Save(ComLib.Entities.Entity)">
            <summary>
            Save the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.Management.EntityManager.Instance">
            <summary>
            Get singleton instance.
            </summary>
        </member>
        <member name="P:ComLib.Entities.Management.EntityManager.Settings">
            <summary>
            Settings for the entity service.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixService">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportservice"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixValidator">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportvalidator"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixRepository">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportrepository"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixController">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportcontroller"
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityRegistrationConstants.SuffixSettings">
            <summary>
            suffix used for the naming the DomainModel service object.
            e.g. "reportsettings"
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.IRandomTextGenerator">
            <summary>
            Interface for the random text generator.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.IRandomTextGenerator.Generate">
            <summary>
            Generates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.CaptchaSupport.IRandomTextGenerator.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:ComLib.CaptchaSupport.RandomTextGeneratorSettings">
            <summary>
            Settings for the random text generator.
            </summary>
        </member>
        <member name="P:ComLib.CaptchaSupport.RandomTextGeneratorSettings.Length">
            <summary>
            Gets or sets the length of random charachters to generate
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:ComLib.CaptchaSupport.RandomTextGeneratorSettings.AllowedChars">
            <summary>
            Gets or sets the allowed chars.
            </summary>
            <value>The allowed chars.</value>
        </member>
        <member name="T:ComLib.CaptchaSupport.CaptchaGenerator">
            <summary>
            Generates an Captcha image.
            Credit: http://www.brainjar.com/dotNet/CaptchaImage/
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:CaptchaImageGenerator"/> class.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaGenerator.Generate(System.String)">
            <summary>
            Generates the bitmap using a random text using the random text generator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaGenerator.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.#ctor">
            <summary>
            Initialize.
            </summary>
            <param name="hiddenFieldName"></param>
            <param name="userInputTextFieldName"></param>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="hiddenFieldName"></param>
            <param name="userInputTextFieldName"></param>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.Generate">
            <summary>
            Generate a new Bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.GenerateFromUrl">
            <summary>
            Generate a new BitMap using the encoded random text supplied in the url.
            </summary>
            <param name="urlParamName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.GetRandomText">
            <summary>
            Get random text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.GetRandomTextEncoded">
            <summary>
            Get the random encoded text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.IsCorrect">
            <summary>
            Determine whether the captca image is correct based on the 
            1. user input text
            2. hidden encoded captcha text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaWeb.IsCorrect(System.String)">
            <summary>
            Determine whether the captca image is correct based on the 
            1. user input text
            2. hidden encoded captcha text.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Caching.CacheAspNet">
            <summary>
            Cache manager using AspNet which groups all the keys with a prefix.
            </summary>
        </member>
        <member name="T:ComLib.Caching.ICache">
            <summary>
            Contract for Caching provider
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Contains(System.String)">
            <summary>
            Whether or not there is a cache entry for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.ICache.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Get``1(System.Object)">
            <summary>
            Retrieves an item from the cache of the specified type.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.GetOrInsert``1(System.Object,System.Int32,System.Boolean,System.Func{``0})">
            <summary>
            Retrieves an item from the cache of the specified type and key and 
            inserts by getting it using the lamda it if isn't there
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Remove(System.Object)">
            <summary>
            Removes an item from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.RemoveAll(System.Collections.ICollection)">
            <summary>
            Removes collection of items from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Insert(System.Object,System.Object)">
            <summary>
            Inserts an item into the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Insert(System.Object,System.Object,System.Int32,System.Boolean)">
            <summary>
            Inserts an item into the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.Insert(System.Object,System.Object,System.Int32,System.Boolean,ComLib.Caching.CacheItemPriority)">
            <summary>
            Inserts an item into the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.ICache.GetDescriptors">
            <summary>
            Get description of the cache entries.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Caching.ICache.Count">
            <summary>
            Gets the number of items in the cache.
            </summary>
        </member>
        <member name="P:ComLib.Caching.ICache.Keys">
            <summary>
            Gets a collection of all cache item keys.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.#ctor">
            <summary>
            Initialize with spring cache.
            </summary>
            <param name="springCache"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.#ctor(ComLib.Caching.CacheSettings)">
            <summary>
            Initialize using cache settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Contains(System.String)">
            <summary>
            Whether or not there is a cache entry for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Get(System.Object)">
            <summary>
            Retrieves an item from the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Get``1(System.Object)">
            <summary>
            Get the object associated with the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.GetOrInsert``1(System.Object,System.Int32,System.Boolean,System.Func{``0})">
            <summary>
            Retrieves an item from the cache of the specified type.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Remove(System.Object)">
            <summary>
            Remove from cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the items associated with the keys specified.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Clear">
            <summary>
            Clear all the items in the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Insert(System.Object,System.Object)">
            <summary>
            Insert an item into the cache.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Insert(System.Object,System.Object,System.Int32,System.Boolean)">
            <summary>
            Insert an item into the cache with the specified sliding expiration.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeToLive"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Insert(System.Object,System.Object,System.Int32,System.Boolean,ComLib.Caching.CacheItemPriority)">
            <summary>
            Insert an item into the cache with the specified time to live, 
            sliding expiration and priority.
            </summary>
            <param name="key">The cache key</param>
            <param name="value">The cache value</param>
            <param name="timeToLive">How long in seconds the object should be cached.</param>
            <param name="slidingExpiration">Whether or not to reset the time to live if the object is touched.</param>
            <param name="priority">Priority of the cache entry.</param>
        </member>
        <member name="M:ComLib.Caching.CacheAspNet.Init(ComLib.Caching.CacheSettings)">
            <summary>
            Initialize.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:ComLib.Caching.CacheAspNet.Settings">
            <summary>
            Get the cache settings.
            </summary>
        </member>
        <member name="P:ComLib.Caching.CacheAspNet.Count">
            <summary>
            Get the number of items in the cache that are 
            associated with this instance.
            </summary>
        </member>
        <member name="P:ComLib.Caching.CacheAspNet.Keys">
            <summary>
            Get the collection of cache keys associated with this instance of
            cache ( using the cachePrefix ).
            </summary>
        </member>
        <member name="T:ComLib.Caching.CacheSettings">
            <summary>
            Cache settings for the Cache instance.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.PrefixForCacheKeys">
            <summary>
            Used to prefix all the cache keys.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.UsePrefix">
            <summary>
            Indicates if using prefixes.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.DefaultCachePriority">
            <summary>
            Default cache item priority.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.DefaultSlidingExpirationEnabled">
            <summary>
            Default flag indicating if sliding expiration is enabled.
            </summary>
        </member>
        <member name="F:ComLib.Caching.CacheSettings.DefaultTimeToLive">
            <summary>
            Default amount of time to keep item in cache.
            10 mins.
            </summary>
        </member>
        <member name="T:ComLib.Arguments.ArgsUsage">
            <summary>
            Arguments utility class.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildUsingReciever(System.Object)">
            <summary>
            Build a string showing what arguments are expected.
            This is done by inspecting the argattributes on all the
            properties of the supplied object.
            </summary>
            <param name="argsReciever"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildUsingReciever(System.Object,System.String,System.String)">
            <summary>
            Build a string showing what arguments are expected.
            This is done by inspecting the argattributes on all the
            properties of the supplied object.
            </summary>
            <param name="argsReciever"></param>
            <param name="prefix"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Build(System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute})">
            <summary>
            Build usage of the arguments.
            </summary>
            <param name="argsList"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Build(ComLib.Arguments.ArgsSchema)">
            <summary>
            Build usage of the arguments using the schema
            </summary>
            <param name="argsList"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Build(System.String,System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.String,System.String)">
            <summary>
            Build descriptive usage showing arguments and sample runs.
            </summary>
            <param name="argsReciever"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildSampleRuns(System.String,System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.String,System.String)">
            <summary>
            Build a sample run.
            </summary>
            <param name="argAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildSampleRuns(System.Collections.Generic.IList{System.String})">
            <summary>
            Build a sample run.
            </summary>
            <param name="argAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildDescriptive(System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Build a string showing argument usage.
            </summary>
            <param name="argAttributes">The argument definitions.</param>
            <param name="examples">Examples of command line usage.</param>
            <param name="prefix">Prefix for the command line named args. e.g. "-"</param>
            <param name="separator">Separator for named args key/value pairs. e.g. ":".</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.BuildArgs(System.Int32,System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.String,System.String)">
            <summary>
            Build the usage for arguments only.
            </summary>
            <param name="paddingLength"></param>
            <param name="argAttributes"></param>
            <param name="examples"></param>
            <param name="prefix"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Build(System.Collections.Generic.IList{ComLib.Arguments.ArgAttribute},System.Func{ComLib.Arguments.ArgAttribute,System.String})">
            <summary>
            Build a string showing what arguments are expected.
            This is done by inspecting the argattributes on all the
            properties of the supplied object.
            </summary>
            <param name="argsReciever"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.Show(System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.List{System.String})">
            <summary>
            Return a string that shows how this should be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsUsage.ShowUsingReciever(System.Object,System.String,System.String)">
            <summary>
            Show usage using reciever.
            </summary>
            <param name="reciever"></param>
        </member>
        <member name="T:ComLib.Account.User">
            <summary>
            User entity.
            </summary>
            <summary>
            User entity extensions.
            1. Setup the password encryption 
            2. Handle lowering the case for username, email etc.
            </summary>
        </member>
        <member name="M:ComLib.Account.User.New">
            <summary>
            Creates a new instance of BlogPost and 
            initializes it with a validator and settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.InitEncryptor(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Initalize the internal encryptor lamda method.
            </summary>
            <param name="encryptor"></param>
        </member>
        <member name="M:ComLib.Account.User.Encrypt(System.String)">
            <summary>
            Encrypts using the initialized lamda encryption method.
            If it is not initialize, uses the default method.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.Decrypt(System.String)">
            <summary>
            Encrypts using the initialized lamda encryption method.
            If it is not initialize, uses the default method.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.VerifyUser(System.String,System.String)">
            <summary>
            Provide a static method for verifying a user is registerd/exists.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.LogOn(System.String,System.String,System.Boolean)">
            <summary>
            Try logging in to server.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.Create(System.String,System.String,System.String)">
            <summary>
            Register the user.
            </summary>
            <param name="userName"></param>
            <param name="email"></param>
            <param name="password"></param>
            <param name="confirmPassword"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Register the user.
            </summary>
            <param name="userName"></param>
            <param name="email"></param>
            <param name="password"></param>
            <param name="confirmPassword"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.Create(System.String,System.String,System.String,System.String,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Register the user.
            </summary>
            <param name="userName"></param>
            <param name="email"></param>
            <param name="password"></param>
            <param name="confirmPassword"></param>
            <param name="roles"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change the current password.
            </summary>
            <param name="userName">username of the account for which the password is being changed.</param>
            <param name="currentPassword">Existing password on file.</param>
            <param name="newPassword">New password</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.LockOut(System.String,System.String)">
            <summary>
            Lock out the specified user.
            </summary>
            <param name="userName">User to lock out.</param>
            <param name="lockOutReason">Reason for locking out.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.UndoLockOut(System.String,System.String)">
            <summary>
            UndoLock out the specified user.
            </summary>
            <param name="userName">User to undo lock out for.</param>
            <param name="comment">Reason for re-activating</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.Get(System.String)">
            <summary>
            Get the specified user by username.
            </summary>
            <param name="userName">User to get.</param>
            <param name="comment">Reason for re-activating</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.Approve(System.String)">
            <summary>
            Approve user.
            </summary>
            <param name="userName">User to approve.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ComLib.Account.User.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initialize using username.
            </summary>
            <param name="username"></param>
            <param name="email"></param>
        </member>
        <member name="M:ComLib.Account.User.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initialize using username.
            </summary>
            <param name="username"></param>
            <param name="email"></param>
        </member>
        <member name="M:ComLib.Account.User.GetValidatorInternal">
            <summary>
            Gets the validator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.User.OnBeforeCreate(System.Object)">
            <summary>
            Called one before creating a user in the datastore.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Account.User.Roles">
            <summary>
            Get / Set the roles. e.g. "publishers,admin"
            
            NOTE: The roles do not have to be stored here.
            They can be separately stored in a "Roles" table/class.
            This is here for convenience in cases where 
            a simple 1 table is sufficient to store user info and roles info.
            </summary>
        </member>
        <member name="P:ComLib.Account.User.MobilePhone">
            <summary>
            Phone number of the user. 
            </summary>
        </member>
        <member name="P:ComLib.Account.User.SecurityQuestion">
            <summary>
            Get/Set SecurityQuestion
            </summary>
        </member>
        <member name="P:ComLib.Account.User.SecurityAnswer">
            <summary>
            Get/Set SecurityAnswer
            </summary>
        </member>
        <member name="P:ComLib.Account.User.IsApproved">
            <summary>
            Get/Set IsApproved
            </summary>
        </member>
        <member name="P:ComLib.Account.User.IsLockedOut">
            <summary>
            Get/Set IsLockedOut
            </summary>
        </member>
        <member name="P:ComLib.Account.User.Comment">
            <summary>
            Get/Set Comment
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LockOutReason">
            <summary>
            Get/Set LockOutReason
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LastLoginDate">
            <summary>
            Get/Set LastLoginDate
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LastPasswordChangedDate">
            <summary>
            Get/Set LastPasswordChangedDate
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LastPasswordResetDate">
            <summary>
            Get/Set LastPasswordResetDate
            </summary>
        </member>
        <member name="P:ComLib.Account.User.LastLockOutDate">
            <summary>
            Get/Set LastLockOutDate
            </summary>
        </member>
        <member name="P:ComLib.Account.User.Password">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
            <param name="plainTextPassword"></param>
        </member>
        <member name="P:ComLib.Account.User.PasswordPlain">
            <summary>
            Set password using plaintext which gets encrypted.
            </summary>
        </member>
        <member name="P:ComLib.Account.User.UserName">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
            <param name="plainTextPassword"></param>
        </member>
        <member name="P:ComLib.Account.User.UserNameLowered">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
            <param name="plainTextPassword"></param>
        </member>
        <member name="P:ComLib.Account.User.Email">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
            <param name="plainTextPassword"></param>
        </member>
        <member name="P:ComLib.Account.User.EmailLowered">
            <summary>
            Sets a plain text password as encrypted.
            </summary>
            <param name="plainTextPassword"></param>
        </member>
        <member name="T:ComLib.Web.Services.GravatarSupport.Rating">
            <summary>
            Rating to use for the gravatar
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.GravatarSupport.IconType">
            <summary>
            Icon Type to use for the gravatar
            </summary>
        </member>
        <member name="T:ComLib.Web.Services.GravatarSupport.Gravatar">
            <summary>
            Twitter class for getting tweets
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.GravatarSupport.Gravatar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Web.Services.GravatarSupport.Gravatar"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.GravatarSupport.Gravatar.#ctor(System.String,System.Int32,ComLib.Web.Services.GravatarSupport.Rating,ComLib.Web.Services.GravatarSupport.IconType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Web.Services.GravatarSupport.Gravatar"/> class.
            </summary>
            <param name="email">The email.</param>
            <param name="size">The size.</param>
            <param name="rating">The rating.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="imageExtension">The extension of the image.</param>
        </member>
        <member name="M:ComLib.Web.Services.GravatarSupport.Gravatar.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Web.Services.GravatarSupport.Gravatar"/> class.
            </summary>
            <param name="email">The email.</param>
            <param name="size">The size.</param>
            <param name="rating">The rating.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="imageExtension">The extension of the image.</param>
        </member>
        <member name="M:ComLib.Web.Services.GravatarSupport.Gravatar.Init(System.String,System.Int32,ComLib.Web.Services.GravatarSupport.Rating,ComLib.Web.Services.GravatarSupport.IconType,System.String)">
            <summary>
            Inits the variables with the values supplied.
            </summary>
            <param name="email">The email.</param>
            <param name="size">The size.</param>
            <param name="rating">The rating.</param>
            <param name="iconType">Type of the icon.</param>
            <param name="imageExtension">The extension of the image.</param>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.ImageExtension">
            <summary>
            extension used for image. e.g. jpg or png if applicable.
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.Rating">
            <summary>
            Rating can either be g, pg, r, x
            </summary>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.IconType">
            <summary>
            Gets or sets the type of the icon.
            </summary>
            <value>The type of the icon.</value>
        </member>
        <member name="P:ComLib.Web.Services.GravatarSupport.Gravatar.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:ComLib.StringHelpers">
            <summary>
            String helper methods.
            </summary>
        </member>
        <member name="M:ComLib.StringHelpers.ReadLines(System.String)">
            <summary>
            Read all the lines in the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.GetDelimitedChars(System.String,System.String,System.Char)">
            <summary>
            Get delimited chars from a string.
            </summary>
            <param name="rawText">search-classes-workshops-4-1-1-6</param>
            <param name="excludeText">search-classes-workshops</param>
            <param name="delimiter">-</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string.
            </summary>
            <param name="txt"></param>
            <param name="maxChars"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.TruncateWithText(System.String,System.Int32,System.String)">
            <summary>
            Truncate the text supplied by number of characters specified by <paramref name="maxChars"/>
            and then appends the suffix.
            </summary>
            <param name="txt"></param>
            <param name="maxChars"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Join string enumeration items.
            </summary>
            <param name="items"></param>
            <param name="delimeter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.GetOriginalOrEmptyString(System.String)">
            <summary>
            If null returns empty string.
            Else, returns original.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.GetDefaultStringIfEmpty(System.String,System.String)">
            <summary>
            Returns the defaultval if the val string is null or empty.
            Returns the val string otherwise.
            </summary>
            <param name="val"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.ConvertToSentanceCase(System.String,System.Char)">
            <summary>
            Convert the word(s) in the sentence to sentence case.
            UPPER = Upper
            lower = Lower
            MiXEd = Mixed
            </summary>
            <param name="s"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.GetIndexOfSpacer(System.String,System.Int32,System.Boolean@)">
            <summary>
            Get the index of a spacer ( space" " or newline )
            </summary>
            <param name="txt"></param>
            <param name="currentPosition"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.ConvertBoolToYesNo(System.Boolean)">
            <summary>
            Convert boolean value to "Yes" or "No"
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.ConvertToString(System.Object[])">
            <summary>
            Converts to string.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.ToMapReadonly(System.String,System.Char)">
            <summary>
            Parses a delimited list of items into a readonly dictionary.
            </summary>
            <param name="delimitedText"></param>
            <param name="delimeter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.ToMap(System.String,System.Char)">
            <summary>
            Convert to delimited text to a dictionary.
            </summary>
            <param name="delimitedText">"1,2,3,4,5"</param>
            <param name="delimeter">','</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.ToMap(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Map a set of keyvalue pairs to a dictionary.
            </summary>
            <param name="delimitedText">e.g. "city=Queens, state=Ny, zipcode=12345, country=usa"</param>
            <param name="keyValuePairDelimiter">","</param>
            <param name="keyValueDelimeter">"="</param>
            <param name="makeKeysCaseSensitive">Flag to make the keys case insensitive, which
            converts the keys to lowercase if set to true.</param>
            <param name="trimValues">Flag to trim the values in the key-value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.ToStringArray(System.String,System.Char)">
            <summary>
            Parses a delimited list of items into a string[].
            </summary>
            <param name="delimitedText">"1,2,3,4,5,6"</param>
            <param name="delimeter">','</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.Substitute(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Substitute the placeholders ${name} where name is the key in <paramref name="substitutions"/>
            and replace it with the value associated with the key.
            </summary>
            <param name="subsitutions"></param>
            <param name="contentPlaceholders"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StringHelpers.DoFixedLengthPrinting(System.Collections.IDictionary,System.Int32,System.Action{System.String,System.Object})">
            <summary>
            Finds the maximum length of a key and padd all the rest of the keys to be 
            the same fixed length, and calls the delegate supplied.
            </summary>
            <param name="keyValues">The key value pairs.</param>
            <param name="extraPadding">Additional number of chars to pad to the keys.</param>
            <param name="printer">The delegate to call to print to.</param>
        </member>
        <member name="M:ComLib.StringHelpers.GetFixedLengthString(System.String,System.Int32,System.String)">
            <summary>
            Builds a fixed length string with the maxChars provided.
            </summary>
            <param name="text"></param>
            <param name="maxChars"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldService.Create(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Update the specific entity with property values specified.
            </summary>
            <param name="entityName">"Category"</param>
            <param name="propValues">List of key value pairs.
            Where the key is the property name, and the value is a string 
            representation of the property value.</param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldService.GetAll(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Retrieve datatable containing all the records for the specified entity.
            </summary>
            <param name="entity"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldService.Get(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Retrieve the entity with the specified id, given the entityType
            </summary>
            <param name="entityName">"Category"</param>
            <param name="id">"1" Id of a specific entity.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldService.Update(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Update the specific entity with property values specified.
            </summary>
            <param name="entityName">"Category"</param>
            <param name="propValues">List of key value pairs.
            Where the key is the property name, and the value is a string 
            representation of the property value.</param>
            <param name="id">"2"</param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldService.Delete(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Delete the specific entity with the id.
            </summary>
            <param name="entityName">"Category"</param>
            <param name="id">"2"</param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldService.GetProperties(System.String)">
            <summary>
            Get all the properties of the entity.
            </summary>
            <param name="entityName">The name of any of the supported entities that 
            are manageable.</param>
            <example>Given "Category" Returns :
            1. Name
            2. Id 
            3. Description. etc.</example>
            <returns></returns>
        </member>
        <member name="P:ComLib.Scaffolding.ScaffoldService.Settings">
            <summary>
            Settings for the entity service.
            </summary>
        </member>
        <member name="T:ComLib.Reflection.ReflectionTypeChecker">
            <summary>
            Various reflection based utility methods.
            </summary>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.CanConvertTo``1(System.String)">
            <summary>
            Checks whether or not the 
            </summary>
            <param name="propInfo">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.CanConvertTo(System.Type,System.String)">
            <summary>
            Checks whether or not the 
            </summary>
            <param name="propInfo">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Check to see if can convert to appropriate type
            </summary>
            <param name="propInfo"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Checks whether or not the 
            </summary>
            <param name="propInfo">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.ConvertToSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Convert the val from string type to the same time as the property.
            </summary>
            <param name="propInfo">Property representing the type to convert to</param>
            <param name="val">val to convert</param>
            <returns>converted value with the same time as the property</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionTypeChecker.IsSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Determine if the type of the property and the val are the same
            </summary>
            <param name="propInfo"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Paging.PageNumber">
            <summary>
            Page number to store page and css class for it.
            </summary>
        </member>
        <member name="M:ComLib.Paging.PageNumber.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="number"></param>
            <param name="cssClass"></param>
        </member>
        <member name="P:ComLib.Paging.PageNumber.Page">
            <summary>
            page number
            </summary>
        </member>
        <member name="P:ComLib.Paging.PageNumber.CssClass">
            <summary>
            Css class associated with this page.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationBase">
            <summary>
            Location data base class for state, country, location short name.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.Name">
            <summary>
            Full / Formal name.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.Abbreviation">
            <summary>
            Short name or abbreviation
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.IsAlias">
            <summary>
            Gets or sets a value indicating whether this instance is alias.
            </summary>
            <value><c>true</c> if this instance is alias; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.AliasRefId">
            <summary>
            Gets or sets the alias ref id.
            </summary>
            <value>The alias ref id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.RealId">
            <summary>
            Get the real id, if this is a country.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationBase.IsActive">
            <summary>
            Indicates whether or not this entity is active
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationCountryBase">
            <summary>
            Location data with the country id.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationCountryBase.CountryId">
            <summary>
            Country Id
            </summary>
        </member>
        <member name="T:ComLib.Paging.Pager">
            <summary>
            Holds the paging data.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor to set properties.
            </summary>
            <param name="currentPage"></param>
            <param name="totalPages"></param>
            <param name="numPagesInRange"></param>
        </member>
        <member name="M:ComLib.Paging.Pager.#ctor(System.Int32,System.Int32,ComLib.Paging.PagerSettings)">
            <summary>
            Constructor to set properties.
            </summary>
            <param name="currentPage"></param>
            <param name="totalPages"></param>
            <param name="numPagesInRange"></param>
        </member>
        <member name="M:ComLib.Paging.Pager.Init(ComLib.Paging.IPagerCalculator)">
            <summary>
            Initialize pager calculator.
            </summary>
            <param name="pager"></param>
        </member>
        <member name="M:ComLib.Paging.Pager.SetCurrentPage(System.Int32)">
            <summary>
            Set the current page and calculate the rest of the pages.
            </summary>
            <param name="currentPage"></param>
        </member>
        <member name="M:ComLib.Paging.Pager.SetCurrentPage(System.Int32,System.Int32)">
            <summary>
            Set the current page and calculate the rest of the pages.
            </summary>
            <param name="currentPage"></param>
        </member>
        <member name="M:ComLib.Paging.Pager.MoveFirst">
            <summary>
            Move to the fist page.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.MovePrevious">
            <summary>
            Move to the previous page.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.MoveNext">
            <summary>
            Move to the next page.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.MoveLast">
            <summary>
            Move to the last page.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.MoveToPage(System.Int32)">
            <summary>
            Move to a specific page.
            </summary>
            <param name="selectedPage"></param>
        </member>
        <member name="M:ComLib.Paging.Pager.Calculate">
            <summary>
            Calcuate pages.
            </summary>
        </member>
        <member name="M:ComLib.Paging.Pager.Calculate(ComLib.Paging.Pager,ComLib.Paging.PagerSettings)">
            <summary>
            Calculate the starting page and ending page.
            </summary>
            <param name="pagerData"></param>
            <param name="pagerSettings"></param>
        </member>
        <member name="M:ComLib.Paging.Pager.Get(System.Int32,System.Int32,ComLib.Paging.PagerSettings)">
            <summary>
            Get the pager data using current page and totalPages.
            </summary>
            <param name="currentPage"></param>
            <param name="totalPages"></param>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.Paging.Pager.Clone">
            <summary>
            Clones the object.
            Good as long as properties are not objects.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Paging.Pager.CurrentPage">
            <summary>
            Current page
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.TotalPages">
            <summary>
            Total pages available
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.FirstPage">
            <summary>
            Always 1.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.PreviousPage">
            <summary>
            What is the previous page number if applicable.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.StartingPage">
            <summary>
            Starting page.
            e.g.
            can be 1 as in                    1, 2, 3, 4, 5   next, last
            can be 6 as in   first, previous, 6, 7, 8, 9, 10  next, last
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.EndingPage">
            <summary>
            Starting page.
            e.g.
            can be 5 as in                     1, 2, 3, 4, 5   next, last
            can be 10 as in   first, previous, 6, 7, 8, 9, 10  next, last
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.NextPage">
            <summary>
            What is the next page number if applicable.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.LastPage">
            <summary>
            Last page number is always the Total pages.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.IsMultiplePages">
            <summary>
            Whether or not there are more than 1 page.
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.CanShowFirst">
            <summary>
            Can show First page link?
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.CanShowPrevious">
            <summary>
            Can show previous link?
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.CanShowNext">
            <summary>
            Can show Next page link?
            </summary>
        </member>
        <member name="P:ComLib.Paging.Pager.CanShowLast">
            <summary>
            Can show Last page link?
            </summary>
        </member>
        <member name="T:ComLib.ImportExport.ImportExportActionContext`1">
            <summary>
            Contextual information for import export actions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportActionContext`1.#ctor">
            <summary>
            Initialize the action context.
            </summary>
            <param name="item"></param>
            <param name="errorList"></param>
            <param name="messages"></param>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportActionContext`1.#ctor(`0,System.Collections.Generic.IList{`0},ComLib.IValidationResults)">
            <summary>
            Initialize the action context.
            </summary>
            <param name="item"></param>
            <param name="errorList"></param>
            <param name="messages"></param>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportActionContext`1.ItemList">
            <summary>
            Get the list of items to import or export.
            </summary>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportActionContext`1.ImportText">
            <summary>
            Gets or sets the import text.
            </summary>
            <value>The import text.</value>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportActionContext`1.ExportBatchSize">
            <summary>
            Gets or sets the size of the export batch.
            </summary>
            <value>The size of the export batch.</value>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportActionContext`1.ExportBatchIndex">
            <summary>
            Gets or sets the index of the export batch.
            </summary>
            <value>The index of the export batch.</value>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportActionContext`1.ExportTotalCount">
            <summary>
            Gets or sets the export total count.
            </summary>
            <value>The export total count.</value>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportActionContext`1.ExportFormat">
            <summary>
            Gets or sets the export format.
            </summary>
            <value>The export format.</value>
        </member>
        <member name="T:ComLib.Calendars.Calendar">
            <summary>
            Provides static access to all the <see cref="T:ComLib.Calendars.ICalendar"/> functionality using the Holiday calendar service initialized.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.Calendar.Init(System.String,ComLib.Calendars.ICalendarDataProvider,System.Int32,System.Int32)">
            <summary>
            Initialize the Holiday calendar data provider and calendar code.
            </summary>
            <param name="calendarCode">"country='US', province='NewYork', ref='some value to indicate source'"</param>
            <param name="provider">The underlying holiday dates provider.</param>
            <param name="startYear">Used for initialization. Loads holidays from the starting year.</param>
            <param name="endYear">Used for initialization. Loads holidays up to the ending year.</param>
        </member>
        <member name="M:ComLib.Calendars.Calendar.IsHolidayDataAvailable(System.Int32)">
            <summary>
            Indicates if there is holiday data available for the
            specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.IsBusinessDay(System.DateTime)">
            <summary>
            Determine if the date is a business date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.Holidays(System.Int32)">
            <summary>
            Get the holidays for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.Weekends(System.Int32)">
            <summary>
            Get the weekends in the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.BusinessDays(System.Int32)">
            <summary>
            Get the business dates for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.NextBusinessDate(System.DateTime)">
            <summary>
            Get the next business date after the date supplied.
            </summary>
            <param name="afterDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.PreviousBusinessDate(System.DateTime)">
            <summary>
            Get the last 
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.FirstBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the first business date of the month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.FirstBusinessDateOfYear(System.Int32)">
            <summary>
            Get the first business date of the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.LastBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the last business date fo the month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.Calendar.LastBusinessDateOfYear(System.Int32)">
            <summary>
            Get the last business date of the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.Calendar.CalendarCode">
            <summary>
            Calendar code used to indentify which holiday calendar data source to use.
            e.g. "country='US', province='NewYork', ref='some value to indicate source'";
            </summary>
        </member>
        <member name="P:ComLib.Calendars.Calendar.HolidayProvider">
            <summary>
            Holiday data provider.
            </summary>
        </member>
        <member name="T:ComLib.Feeds.FeedBuilder">
            <summary>
            Helper class for build feeds.
            </summary>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildRss(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable})">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildAtom(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable})">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildRss(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable},System.IO.TextWriter)">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
            <param name="writer">The writer to write the feed to</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildAtom(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable},System.IO.TextWriter)">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
            <param name="writer">The writer to write the feed to</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.Build(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable})">
            <summary>
            Build the feed using the IPublishable items.
            </summary>
            <param name="feedAuthor">The author of the feed.</param>
            <param name="feedTitle">The title of the feed</param>
            <param name="feedDescription">The description of the feed.</param>
            <param name="feedUrl">The url of the feed</param>
            <param name="posts">The feed entries.</param>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildAsXml(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable},System.Func{System.ServiceModel.Syndication.SyndicationFeed,System.ServiceModel.Syndication.SyndicationFeedFormatter})">
            <summary>
            Builds as XML.
            </summary>
            <param name="feedAuthor">The feed author.</param>
            <param name="feedTitle">The feed title.</param>
            <param name="feedDescription">The feed description.</param>
            <param name="feedUrl">The feed URL.</param>
            <param name="posts">The posts.</param>
            <param name="formatFetcher">The format fetcher.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.BuildAsXml(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{ComLib.Feeds.IPublishable},System.IO.TextWriter,System.Func{System.ServiceModel.Syndication.SyndicationFeed,System.ServiceModel.Syndication.SyndicationFeedFormatter})">
            <summary>
            Builds as XML.
            </summary>
            <param name="feedAuthor">The feed author.</param>
            <param name="feedTitle">The feed title.</param>
            <param name="feedDescription">The feed description.</param>
            <param name="feedUrl">The feed URL.</param>
            <param name="posts">The posts.</param>
            <param name="twriter">The writer to write the feed to.</param>
            <param name="formatFetcher">The format fetcher.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Feeds.FeedBuilder.Build(System.ServiceModel.Syndication.SyndicationFeed,System.IO.TextWriter,System.String)">
            <summary>
            Builds as XML.
            </summary>
            <param name="feed">The feed.</param>
            <param name="twriter">The writer to write the feed to.</param>
            <param name="format">The format either "rss" | "atom"</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CsvParse.CsvConfig">
            <summary>
            Settings for the csv.
            </summary>
        </member>
        <member name="F:ComLib.CsvParse.CsvConfig.IsReadOnly">
            <summary>
            Indicates if loading as readonly.
            </summary>
        </member>
        <member name="F:ComLib.CsvParse.CsvConfig.Separator">
            <summary>
            The character used to separate values in csv file.
            </summary>
        </member>
        <member name="F:ComLib.CsvParse.CsvConfig.ContainsHeaders">
            <summary>
            Indicate if first line contains headers/columns.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.Config">
            <summary>
            Utility class for the configuration reflector.
            </summary>
        </member>
        <member name="F:ComLib.Configuration.Config._current">
            <summary>
            Current configuration source based on the current
            Environment. <see cref="!:Environments.Current"/>
            </summary>
        </member>
        <member name="M:ComLib.Configuration.Config.Init(ComLib.Configuration.IConfigSource)">
            <summary>
            Initialize the current config provider.
            </summary>
            <param name="inheritanceBasedConfig"></param>
        </member>
        <member name="M:ComLib.Configuration.Config.Get(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.GetString(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Get``1(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Get``1(System.Int32)">
            <summary>
            Convenience method for getting typed config value from current config provider using index position of key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Get(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.GetString(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Get``1(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.GetSection(System.String)">
            <summary>
            Get the configuration section with the specified name.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.ContainsKey(System.String)">
            <summary>
            Convenience method for checking if config key exists.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.ContainsKey(System.String,System.String)">
            <summary>
            Convenience method for checking if config key exists.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Config.Save">
            <summary>
            Save the configuration.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.Config.Current">
            <summary>
            Current config.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.Config.Sections">
            <summary>
            The names of the sections in this config provider.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.Config.Name">
            <summary>
            The name of this config provider.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.Config.SourcePath">
            <summary>
            The full path to the source for this config provider.
            </summary>
        </member>
        <member name="T:ComLib.Collections.EnumeratorMulti`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{`0}})">
            <summary>
            Initialize the list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.Reset">
            <summary>
            Reset the iterator to first item enumerator.
            </summary>
        </member>
        <member name="M:ComLib.Collections.EnumeratorMulti`1.IsWithinBounds">
            <summary>
            Check if current index referencing the enumerator in the list 
            is within bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.EnumeratorMulti`1.Current">
            <summary>
            Get the current item.
            </summary>
        </member>
        <member name="P:ComLib.Collections.EnumeratorMulti`1.System#Collections#IEnumerator#Current">
            <summary>
            Get the current item in list.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.Init(ComLib.CaptchaSupport.ICaptcha)">
            <summary>
            Initialize captcha provider.
            </summary>
            <param name="captcha"></param>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.GetRandomText">
            <summary>
            Get random text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.GetRandomTextEncoded">
            <summary>
            Get encoded random text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.IsCorrect">
            <summary>
            Determine if the current captcha is correct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.IsCorrect(System.String)">
            <summary>
            Determine if the current captcha is correct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.Generate">
            <summary>
            Create a new Captcha image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.GenerateFromUrl">
            <summary>
            Create a new Captcha image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CaptchaSupport.Captcha.Generate(System.String)">
            <summary>
            Create a new captcha image using the random text supplied.
            </summary>
            <param name="randomText"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.Time(System.Int32,System.Boolean)">
            <summary>
            Converts the military time to a timespan.
            </summary>
            <param name="num"></param>
            <param name="convertSingleDigitsToHours">Indicates whether to treat "9" as 9 hours instead of minutes.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.IntegerExtensions.TimeWithSuffix(System.Int32)">
            <summary>
            Returns military time formatted as standard time w/ suffix am/pm.
            e.g. 1am 9:30pm
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Types.TextSplitter">
            <summary>
            Helper class to split a long word into a single one.
            Alternative to possibly using Regular expression.
            </summary>
        </member>
        <member name="M:ComLib.Types.TextSplitter.CheckAndSplitText(System.String,System.Int32)">
            <summary>
            Check the single line of text for long word that exceeds the
            maximum allowed.
            If found, splits the word.
            </summary>
            <param name="text"></param>
            <param name="maxCharsInWord"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TextSplitter.SplitWord(System.String,System.Int32,System.String)">
            <summary>
            Split the word, N number of times.
            </summary>
            <param name="word">The text to split.</param>
            <param name="charsPerWord">40 chars in each word.</param>
            <param name="spacer">" "</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TextSplitter.GetNumberOfTimesToSplit(System.Int32,System.Int32)">
            <summary>
            Determine how many times the word has to be split.
            </summary>
            <param name="wordLength"></param>
            <param name="maxCharsInWord"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.LocationSupport.LocationLookUpType">
            <summary>
            This enumeration matches up with the enumerations used in the stored procedure
            for searching up by location.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationConstants">
            <summary>
            Location constants.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Schedule(System.String,ComLib.Scheduling.Trigger,System.Boolean,System.Action)">
            <summary>
            Schedules the specified task via a delegate.
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="trigger"></param>
            <param name="start"></param>
            <param name="method"></param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Schedule(System.String,ComLib.Scheduling.Trigger,System.Action)">
            <summary>
            Schedules the specified task via a delegate.
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="trigger"></param>
            <param name="start"></param>
            <param name="method"></param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Schedule(System.String,ComLib.Scheduling.Trigger,System.Action,System.Action{ComLib.Scheduling.Task})">
            <summary>
            Schedules the specified task via a lamda and also get notification when it completes.
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="trigger"></param>
            <param name="start"></param>
            <param name="method"></param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Pause(System.String)">
            <summary>
            Pauses the task
            </summary>
            <param name="name"></param>
            <param name="group"></param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Resume(System.String)">
            <summary>
            Resumes the task
            </summary>
            <param name="name"></param>
            <param name="group"></param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.Delete(System.String)">
            <summary>
            Delete task
            </summary>
            <param name="name"></param>
            <param name="group"></param>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.GetNames">
            <summary>
            Gets all the active tasks in the schedule.
            BUG: Currently does not return the task name that are associated 
            with the group name.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.PauseAll">
            <summary>
            Pause all tasks
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.ResumeAll">
            <summary>
            Resume all tasks
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.GetStatuses">
            <summary>
            return a list of all the statues of all tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.Scheduler.ShutDown">
            <summary>
            Shuts down the scheduler.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Scheduler.IsStarted">
            <summary>
            Is started.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.Scheduler.IsShutDown">
            <summary>
            Is shut down.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationUtils.GetInternalNotificationTemplate(System.String)">
            <summary>
            Get the internal template content from the commonlibrary assembly.
            </summary>
            <param name="fileName">e.g. welcome.html</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Notifications.INotificationService">
            <summary>
            Notification service
            </summary>
        </member>
        <member name="P:ComLib.Notifications.INotificationService.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.INotificationService.AccountService">
            <summary>
            The account services.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.INotificationService.MessageService">
            <summary>
            Messageing services.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.INotificationAccountService">
            <summary>
            Notification services for account based messages.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.INotificationAccountService.WelcomeNewUser(ComLib.Notifications.NotificationContext)">
            <summary>
            Send welcome email to new user.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Notifications.INotificationAccountService.WelcomeNewUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send welcome email to new user.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="firstname"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:ComLib.Notifications.INotificationAccountService.RemindUserPassword(ComLib.Notifications.NotificationContext)">
            <summary>
            Send message to remind user of password.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Notifications.INotificationAccountService.RemindUserPassword(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send remind account/password email to user.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="firstname"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="P:ComLib.Notifications.INotificationAccountService.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.INotificationMessagingService">
            <summary>
            Notification services for other non-account related messaging.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SendToFriend(ComLib.Notifications.NotificationContext)">
            <summary>
            Send the website url to a friend.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SendToFriend(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send the website url to a friend. 
            </summary>
            <param name="toEmail"></param>
            <param name="subject"></param>
            <param name="friendName"></param>
            <param name="fromName"></param>
            <param name="messageFromFriend"></param>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SendToFriendPost(ComLib.Notifications.NotificationContext)">
            <summary>
            Send a post to a friend.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SendToFriendPost(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send a post to a friend.
            </summary>
            <param name="toEmail"></param>
            <param name="subject"></param>
            <param name="toFirstname"></param>
            <param name="fromName"></param>
            <param name="messageToFriend"></param>
            <param name="postTitle"></param>
            <param name="postUrl"></param>
        </member>
        <member name="M:ComLib.Notifications.INotificationMessagingService.SubmitFeedBack(ComLib.Notifications.NotificationContext)">
            <summary>
            User feedback.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="P:ComLib.Notifications.INotificationMessagingService.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="T:ComLib.Maps.GeoAddressViewModel">
            <summary>
            View model for a GeoAddress.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(ComLib.Maps.GeoAddress,ComLib.Maps.GeoProvider,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="provider"></param>
            <param name="height"></param>
            <param name="width"></param>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(ComLib.LocationSupport.Address,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(ComLib.LocationSupport.Address,ComLib.Maps.GeoProvider,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(ComLib.LocationSupport.Address,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddressViewModel"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddressViewModel.Init(ComLib.Maps.GeoAddress,ComLib.Maps.GeoProvider,System.Int32,System.Int32)">
            <summary>
            Inits with the data supplied.
            </summary>
            <param name="address">The address.</param>
            <param name="provider">The provider.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="P:ComLib.Maps.GeoAddressViewModel.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddressViewModel.Provider">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddressViewModel.Width">
            <summary>
            Gets or sets the width in pixels to show the map.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddressViewModel.Height">
            <summary>
            Gets or sets the height in pixels to show the map.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:ComLib.Maps.GeoProvider">
            <summary>
            The geo provider to use.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoProvider.Init(ComLib.Maps.GeoProvider)">
            <summary>
            Inits the current geoprovider with the one specified.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:ComLib.Maps.GeoProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:ComLib.Maps.GeoProvider.Name">
            <summary>
            Gets or sets the provider "bing" | "google"
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:ComLib.Maps.GeoProvider.SourceUrl">
            <summary>
            Gets or sets the provider http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.2
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:ComLib.Maps.GeoProvider.ApiKey">
            <summary>
            Api key used for provider
            </summary>
        </member>
        <member name="T:ComLib.Maps.GeoAddress">
            <summary>
            GeoAddress, can be either address based or Latitude/Longitude based.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddress"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.GeoAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GeoAddress"/> class.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.IsAddressBased">
            <summary>
            Gets or sets a value indicating whether this instance is address based.
            </summary>
            <value>
            	<c>true</c> if this instance is address based; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Maps.GeoAddress.FullAddress">
            <summary>
            Gets the full address.
            </summary>
            <value>The full address.</value>
        </member>
        <member name="T:ComLib.MapperSupport.MapperIni`1">
            <summary>
            Mapper for sourcing data from Ini files.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.Map(System.Object,ComLib.IErrors)">
            <summary>
            Map the objects.
            </summary>
            <param name="source"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.Map(ComLib.IErrors)">
            <summary>
            Map the ini file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.MapFromFile(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="source"></param>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperIni`1.MapFromText(System.String,ComLib.IErrors)">
            <summary>
            Map objects from the source and convert to list of type T. Collect errors into the IErrors.
            </summary>
            <param name="source"></param>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.MapperSupport.MapperIni`1.SupportedFormat">
            <summary>
            Get the supported format of the data source.
            </summary>
        </member>
        <member name="T:ComLib.Environments.EnvItem">
            <summary>
            Represents a single environment.
            </summary>
            <remarks>
            networkloc: "z:/env"
            localloc:   "c:/env"
            conn_dev2: "server:localhost, user=kishore, pass=kishore"
            
            env: name=Dev,   Type=Dev,  Inherits="",           DeepInherit=Yes  RefPath="${localloc}/dev.config",    
            env: name=Dev2,  Type=Dev,  Inherits="",           DeepInherit=Yes  RefPath="${localloc}/dev2.config",   
            env: name=Qa,    Type=Qa,   Inherits="Dev",        DeepInherit=Yes  RefPath="${localloc}/qa.config",     
            env: name=Uat,   Type=Uat,  Inherits="Qa",         DeepInherit=Yes  RefPath="${localloc}/uat.config",    
            env: name=Prod,  Type=Prod, Inherits="Uat",        DeepInherit=Yes  RefPath="${localloc}/prod.config",   
            env: name=Lon,   Type=Prod, Inherits="Prod",       DeepInherit=Yes  RefPath="${localloc}/london.config", 
            env: name=kish,  Type=Dev,  Inherits="Dev2,Prod",  DeepInherit=No,  RefPath="${conn_dev2}", 
            </remarks>
        </member>
        <member name="F:ComLib.Environments.EnvItem.Name">
            <summary>
            Dev or Qa, Name that uniquely identifies the environment.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvItem.EnvType">
            <summary>
            Type environment type for this environment.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvItem.Inherits">
            <summary>
            Environmental Inheritance path.
            e.g. Uat. 
            if this environment name is Prod.
            and this inherit path is "Uat;CommonDev;"
            then this will load Uat backed by CommonDev settings.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvItem.InheritsDeeply">
            <summary>
            e.g. Related to InheritPath.
            If Inherits from Env "UAT", this setting of true
            will also load all the dependent inherited files of UAT.
            </summary>
        </member>
        <member name="M:ComLib.Environments.EnvItem.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Environments.EnvItem.#ctor(System.String,System.Boolean,ComLib.Environments.EnvType,System.String)">
            <summary>
            Initialize with the supplied values.
            </summary>
            <param name="name">"prod"</param>
            <param name="source">"file | db "</param>
            <param name="deepInherit"></param>
            <param name="envType">"Prod | Qa | Uat | Dev"</param>
        </member>
        <member name="P:ComLib.Environments.EnvItem.IsSelectable">
            <summary>
            Whether or not this is a selectable "Concrete" environment that 
            a user can choose from. Similar to abstract/concrete classes.
            I.e. Prod_NY might be a selectable environment, but
            Prod_Shared might not be as it may be a common envrionment
            that concrete environments like "prod_ny", "prod_london" inherit from.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvItem.RefPath">
            <summary>
            Tag associated with environment.
            This can be used to store a reference to config files.
            e.g. prod.config.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityVersioned">
            <summary>
            Persistant entity that can be versioned.
            NOTE: If you want to have a Entity that uses generics
            and therefore provides the Create(), Update(), Save(), Delete() methods
            on it's own then, it's better to implemented the IEntityVersioned interface in your
            class using partial classes. Also the IEntityVersioned only has 3 methods so it's 
            pretty lightweight.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
        </member>
        <member name="T:ComLib.Entities.IEntityVersioned">
            <summary>
            Interface for versioned entities.
            </summary>
        </member>
        <member name="M:ComLib.Entities.IEntityVersioned.IsLatestVersion">
            <summary>
            Whether or not this is the latest version.
            This can be achieved using a test for VersionRefId == -1.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.IEntityVersioned.Version">
            <summary>
            Version number.
            </summary>
        </member>
        <member name="P:ComLib.Entities.IEntityVersioned.VersionRefId">
            <summary>
            Reference of the Id of the entity w/ the latest version.
            This used set for older entities to refer to the latest entity.
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityVersioned.IsLatestVersion">
            <summary>
            Whether or not this is the latest version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.EntityVersioned.Version">
            <summary>
            The current version of the entity.
            </summary>
        </member>
        <member name="P:ComLib.Entities.EntityVersioned.VersionRefId">
            <summary>
            Reference to latest/active entity if this is an older version of the entity.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityAction">
            <summary>
            Enum to represent an action being performed on an entity.
            This action is used and passed on to validators and massagers
            so they can run appropriately.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Create">
            <summary>
            Represents creation action on entity.
            </summary>        
        </member>
        <member name="F:ComLib.Entities.EntityAction.Retrieve">
            <summary>
            Represents retrieval action on entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Update">
            <summary>
            Represents update action on entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Delete">
            <summary>
            Represents deletion action on entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Copy">
            <summary>
            Copy a entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Import">
            <summary>
            Import entity(s)
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Export">
            <summary>
            Export entity(s)
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Backup">
            <summary>
            Backup the entities.
            </summary>
        </member>
        <member name="F:ComLib.Entities.EntityAction.Save">
            <summary>
            Save the entity.
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.#ctor(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
            <param name="columns">The header columns.</param>
            <param name="quoteChar">Quote character to use.</param>
            <param name="append">Append to file</param>
            <param name="newLine">New line to use.</param>
            <param name="quoteAll">Whether or not to quote all the values.</param>        
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Init(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
            <param name="columns">The header columns.</param>
            <param name="quoteAll">Whether or not to quote all the values.</param>  
            <param name="append">Whether or not to append to csv file.</param>
            <param name="quoteChar">The quote char to use to enclose data.</param>
            <param name="newLine">New line to use.</param>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Write">
            <summary>
            Write out the data supplied at Initialization.
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.WriteText">
            <summary>
            Write out the data supplied at Initialization.
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.WriteRow(System.Collections.Generic.List{System.Object})">
            <summary>
            Write out a row of data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.WriteColumns(System.Collections.Generic.List{System.String})">
            <summary>
            Write out the columns.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Dispose object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvWriter.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="T:ComLib.CsvParse.CsvWriter.CsvWriterConfig">
            <summary>
            Settings for writing out the csv data.
            </summary>
        </member>
        <member name="T:ComLib.CsvParse.CsvDoc">
            <summary>
            Csv document.
            Lexical parser that can parse.
            
            Id, Name,      Desc
            0,  Art,       Art classes
            1,  Painting,  Any type of painting
            2,  Sports,    Sports classes
            3.  Boxing,	   Boxing classes
            </summary>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.#ctor(System.String,System.Boolean)">
            <summary>
            Loads a new csv document.
            </summary>
            <param name="contentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.#ctor(System.String,System.Boolean,ComLib.CsvParse.CsvConfig,System.Boolean)">
            <summary>
            Create using supplied settings.
            </summary>
            <param name="contentOfFilePath"></param>
            <param name="isFilePath"></param>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Get``1(System.Int32,System.Int32)">
            <summary>
            Get the value at the row/column index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Get``1(System.Int32,System.String)">
            <summary>
            Get the value at the row/column name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach(System.String,System.Action{System.Int32,System.Int32,System.String})">
            <summary>
            Iterate over each column value using the column name.
            </summary>
            <param name="columnName"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach(System.String,System.Int32,System.Action{System.Int32,System.Int32,System.String})">
            <summary>
            Iterate over each column value.
            </summary>
            <param name="columnName"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach(System.Int32,System.Action{System.Int32,System.Int32,System.String})">
            <summary>
            Iterate over each column value.
            </summary>
            <param name="column"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach(System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.String})">
            <summary>
            Iterate over each column string values.
            </summary>
            <param name="column"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach``1(System.String,System.Int32,System.Action{System.Int32,System.Int32,``0})">
            <summary>
            Iterate over each column values.
            </summary>
            <param name="columnName"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach``1(System.Int32,System.Int32,System.Action{System.Int32,System.Int32,``0})">
            <summary>
            Iterate over each column values.
            </summary>
            <param name="column"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ForEach``1(System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32,``0})">
            <summary>
            Iterate over each column values.
            </summary>
            <param name="column"></param>
            <param name="startingRow"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ToDataTable">
            <summary>
            Convert the document to a datatable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ToDataTable(System.String)">
            <summary>
            Convert the document to a DataTable w/ the specified name.
            </summary>
            <param name="tableName">Name to apply to datatable.</param>
            <returns>System.DataTable</returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ToDataTable(System.String,System.Int32,System.Int32)">
            <summary>
            Convert the document to a DataTable w/ the specified name.
            This starts at the specified row/column and includes all the rows/columns after it.
            </summary>
            <param name="tableName">Name to apply to table</param>
            <param name="startRow">Row to start at.</param>
            <param name="startCol">Column to start at.</param>
            <returns>System.DataTable</returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ToDataTable(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert the document to a DataTable w/ the specified name.
            This starts at the specified row/column and includes all the rows/columns after it.
            </summary>
            <param name="tableName">Name to apply to table</param>
            <param name="startRow">Row to start at.</param>
            <param name="endRow">Row to end at.</param>
            <param name="startCol">Column to start at.</param>
            <param name="endCol">Column to end at.</param>
            <returns>System.DataTable</returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ParseLists">
            <summary>
            Parse lists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.ParseDict">
            <summary>
            Parse as list of records where each record is a dictionary.
            This should be used if the first column has headers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Parse">
            <summary>
            Returns all the records in the csv content.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Write(System.String,System.String)">
            <summary>
            Write csv doc to the file in csv format.
            </summary>
            <param name="fileName"></param>
            <param name="delimeter"></param>
        </member>
        <member name="M:ComLib.CsvParse.CsvDoc.Write(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Write csv doc to the filename.
            </summary>
            <param name="fileName">FileName</param>
            <param name="delimeter">Delimeter to use</param>
            <param name="quoteAll">Quote all fields</param>
            <param name="quoteChar">Character to use for strings when quoting.</param>
            <param name="newLine">New Line character to use.</param>
            <param name="append"></param>
        </member>
        <member name="P:ComLib.CsvParse.CsvDoc.Columns">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:ComLib.CsvParse.CsvDoc.Data">
            <summary>
            Records as a list of dictionaries.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComLib.Collections.GenericListBase`1" -->
        <member name="M:ComLib.Collections.GenericListBase`1.IndexOf(`0)">
            <summary>
            Index of
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Insert(System.Int32,`0)">
            <summary>
            Insert.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.RemoveAt(System.Int32)">
            <summary>
            Remove at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Add(`0[])">
            <summary>
            Add a list of models that should be shown in the dashboard on the sidebar.
            </summary>
            <param name="models"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Add(`0)">
            <summary>
            Add
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy to array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.GenericListBase`1.Remove(`0)">
            <summary>
            Removes the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.GenericListBase`1.Item(System.Int32)">
            <summary>
            Accessor.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.GenericListBase`1.Count">
            <summary>
            Count of items.
            </summary>
        </member>
        <member name="P:ComLib.Collections.GenericListBase`1.IsReadOnly">
            <summary>
            Determine if is read only
            </summary>
        </member>
        <member name="T:ComLib.BootStrapSupport.BootStrapper">
            <summary>
            BootStrapper for application startup.
            </summary>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.#ctor">
            <summary>
            Applies default values.
            </summary>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStart(System.String,System.Boolean,System.Action{ComLib.BootStrapSupport.IAppContext})">
            <summary>
            Add a new startup task.
            </summary>
            <param name="action">Action to execute</param>
            <param name="name">Name of action.</param>
            <param name="continueOnFailure">Whether or not to proceed to next task on failure.</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStart(ComLib.BootStrapSupport.Task)">
            <summary>
            Add a new startup task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStop(System.String,System.Boolean,System.Action{ComLib.BootStrapSupport.IAppContext})">
            <summary>
            Add a shutdown task.
            </summary>
            <param name="action">Action to execute on shutdown</param>
            <param name="name">Name of the action.</param>
            <param name="continueOnFailure">Whether or not to proceed next shutdown task on failure.</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.OnStop(ComLib.BootStrapSupport.Task)">
            <summary>
            Add a shutdown task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.StartUp(ComLib.BootStrapSupport.IAppContext)">
            <summary>
            Run startup.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.StartUp(ComLib.BootStrapSupport.IAppContext,System.String[])">
            <summary>
            Run startup.
            </summary>
            <param name="context">The context.</param>
            <param name="taskNames">The task names to startup.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.ShutDown(ComLib.BootStrapSupport.IAppContext)">
            <summary>
            Run Shutdown.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.ShutDown(ComLib.BootStrapSupport.IAppContext,System.String[])">
            <summary>
            Run Shutdown.
            </summary>
            <param name="context">The context.</param>
            <param name="taskNames">The task names.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.GetStartupStatus">
            <summary>
            Gets the startup status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.BootStrapSupport.BootStrapper.InternalRun(System.Collections.Generic.IList{ComLib.BootStrapSupport.Task},ComLib.BootStrapSupport.IAppContext,System.Boolean,System.String[])">
            <summary>
            Run the tasks supplied.
            </summary>
            <param name="tasks"></param>
            <param name="context"></param>
            <param name="isStartup"></param>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootStrapper.LogErrors">
            <summary>
            Whether or not to log all errors to the default logger.
            </summary>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootStrapper.Logger">
            <summary>
            A lamda to call on errors.
            </summary>
        </member>
        <member name="P:ComLib.BootStrapSupport.BootStrapper.PropagateException">
            <summary>
            If an exception occurrs in one of the tasks and that should prevent continuing,
            this indicates whether or catch the exception or propagate it up.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppHelper.HandleOptions(ComLib.Application.IApp,ComLib.Arguments.Args)">
            <summary>
            <para>
            Handle possible "meta data" options of the application.
            1. -help
            2. -version
            3. -pause
            </para>
            </summary>
            <param name="app"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppHelper.ShowAppInfo(ComLib.Application.IApp)">
            <summary>
            Show the application info.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppHelper.GetAppRunSummary(ComLib.Application.IApp,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Get application run summary.
            </summary>
            <param name="app"></param>
            <param name="isStart"></param>
            <param name="summaryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppHelper.GetAppInfo(ComLib.Application.IApp)">
            <summary>
            Get application information as string.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Account.UserService">
            <summary>
            Service class for User.
            </summary>
            <summary>
            User service extension to handle data massaging for the dates.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserService.#ctor">
            <summary>
            default construction
            </summary>
        </member>
        <member name="M:ComLib.Account.UserService.#ctor(ComLib.Entities.IRepository{ComLib.Account.User})">
            <summary>
            Initialize model with only the repository.
            </summary>
            <param name="repository">Repository for entity.</param>
        </member>
        <member name="M:ComLib.Account.UserService.#ctor(ComLib.Entities.IRepository{ComLib.Account.User},ComLib.Entities.IEntitySettings)">
            <summary>
            Initialize model with repository and settings.
            </summary>
            <param name="repository">Repository</param>
            <param name="settings">Settings</param>
        </member>
        <member name="M:ComLib.Account.UserService.#ctor(ComLib.Entities.IRepository{ComLib.Account.User},ComLib.Entities.IEntityValidator,ComLib.Entities.IEntitySettings)">
            <summary>
            Initialize the model w/ repository, validator, and it's settings.
            </summary>
            <param name="repository">Repository for the model.</param>
            <param name="validator">Validator for model.</param>
            <param name="settings">Settings for the model.</param>
        </member>
        <member name="M:ComLib.Account.UserService.VerifyUser(System.String,System.String)">
            <summary>
            Verify that this is a valid user.
            </summary>
            <param name="userName">"kishore"</param>
            <param name="password">"password"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.LogOn(System.String,System.String,System.Boolean)">
            <summary>
            Similar to VerifyUser except this updates the "LastLoginDate" if successful login.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.Create(System.String,System.String,System.String,System.String,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create the user and also return the membership status
            </summary>
            <param name="userName">kishore</param>
            <param name="email">kishore@abc.com</param>
            <param name="password">password</param>
            <param name="confirmPassword">password</param>
            <param name="status">DuplicateUserName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.Create(ComLib.Account.User,System.String,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create the user and also return the membership status
            </summary>
            <param name="userName">kishore</param>
            <param name="email">kishore@abc.com</param>
            <param name="password">password</param>
            <param name="confirmPassword">password</param>
            <param name="status">DuplicateUserName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Create the user.
            </summary>
            <param name="userName">"kishore"</param>
            <param name="email">"kishore@abc.com"</param>
            <param name="password">password</param>
            <param name="confirmPassword">Must be same as password, to confirm password</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.Create(ComLib.IActionContext)">
            <summary>
            Create a user.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change the current password.
            </summary>
            <param name="userName">username of the account for which the password is being changed.</param>
            <param name="currentPassword">Existing password on file.</param>
            <param name="newPassword">New password</param>
            <param name="confirmPassword">Confirm the password. must be same as new password.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.Get(System.String)">
            <summary>
            Get a user by their name.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.LockOut(System.String,System.String)">
            <summary>
            Lock out the user specified.
            </summary>
            <param name="userName"></param>
            <param name="lockOutReason"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.UndoLockOut(System.String,System.String)">
            <summary>
            Undo the lock out the user specified.
            </summary>
            <param name="userName"></param>
            <param name="lockOutReason"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.Approve(System.String)">
            <summary>
            Lock out the user specified.
            </summary>
            <param name="userName"></param>
            <param name="lockOutReason"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.GetValidator">
            <summary>
            Return a new instance of a validator. This is neccessary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.PerformValidation(ComLib.IActionContext,ComLib.Entities.EntityAction)">
            <summary>
            Override the validation to handle check for existing accounts with same 
            username or email address.
            </summary>
            <param name="ctx">The action context.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.ValidatePasswords(System.String,System.String)">
            <summary>
            Validate passwords are same.
            </summary>
            <param name="password"></param>
            <param name="passwordConfirmation"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserService.ValidateCreation(ComLib.Account.User,ComLib.Account.UserSettings,ComLib.IValidationResults,System.String,System.String)">
            <summary>
            Performs validation for creation purposes. This includes checks for duplicate usernames/emails.
            </summary>
            <param name="password"></param>
            <param name="passwordConfirmation"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Account.UserSettings">
            <summary>
            Settings class for User.
            </summary>
            <typeparam name="?"></typeparam>
            <summary>
            Create other settings for account services.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Account.UserSettings"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserSettings.Init">
            <summary>
            Initalize settings.
            </summary>
        </member>
        <member name="T:ComLib.Account.UserRepository">
            <summary>
            Generic repository for persisting User.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Account.UserRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection string.</param>
        </member>
        <member name="M:ComLib.Account.UserRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:ComLib.Account.UserRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:ComLib.Account.UserRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Set the rowmapper
            </summary>
            <param name="connectionInfo">connection info</param>
            <param name="dbHelper">database helper</param>
        </member>
        <member name="M:ComLib.Account.UserRepository.Create(ComLib.Account.User)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserRepository.Update(ComLib.Account.User)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserRepository.Get(System.Int32)">
            <summary>
            Get item by id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Account.UserRepository.BuildParams(ComLib.Account.User)">
            <summary>
            Builds the params.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Account.UserRowMapper">
            <summary>
            RowMapper for User.
            </summary>
            <typeparam name="?"></typeparam>
        </member>
        <member name="T:ComLib.Xml.XmlSerializerUtil">
            <summary>
            Serializes an object to xml.
            </summary>
        </member>
        <member name="M:ComLib.Xml.XmlSerializerUtil.XmlSerialize``1(``0)">
            <summary>
            Serialize the object to xml.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Xml.XmlSerializerUtil.XmlSerialize(System.Object)">
            <summary>
            Serialize the object to xml.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Xml.XmlSerializerUtil.XmlDeserialize``1(System.String)">
            <summary>
            Deserialize from xml to the appropriate typed object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.Services.TwitterSupport.Tweet">
            <summary>
            Tweet
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.TwitterSupport.Tweet.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.TwitterSupport.Tweet.#ctor(System.String,System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            Initialize
            </summary>
            <param name="id"></param>
            <param name="text"></param>
            <param name="content"></param>
            <param name="published"></param>
            <param name="url"></param>
            <param name="author"></param>
        </member>
        <member name="T:ComLib.Web.Services.TwitterSupport.Twitter">
            <summary>
            Twitter class for getting tweets
            </summary>
        </member>
        <member name="M:ComLib.Web.Services.TwitterSupport.Twitter.GetFeed(System.String,System.Int32)">
            <summary>
            Get the latest tweets from twitter for the specified username.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Guard">
            <summary>
            Used for simple validations
            </summary>      
        </member>
        <member name="M:ComLib.Guard.IsTrue(System.Boolean)">
            <summary>
            Check that the condition is true.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ComLib.Guard.IsTrue(System.Boolean,System.String)">
            <summary>
            Check that the condition is true and return error message provided.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:ComLib.Guard.IsFalse(System.Boolean)">
            <summary>
            Check that the condition is false.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ComLib.Guard.IsFalse(System.Boolean,System.String)">
            <summary>
            Check that the condition is false and return error message provided.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:ComLib.Guard.IsNotNull(System.Object,System.String)">
            <summary>
            Check that the object supplied is not null and throw exception
            with message provided.
            </summary>
            <param name="obj"></param>
            <param name="message"></param>
        </member>
        <member name="M:ComLib.Guard.IsNotNull(System.Object)">
            <summary>
            Check that the object provided is not null.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ComLib.Guard.IsNull(System.Object,System.String)">
            <summary>
            Check that the object supplied is null and throw exception
            with message provided.
            </summary>
            <param name="obj"></param>
            <param name="message"></param>
        </member>
        <member name="M:ComLib.Guard.IsNull(System.Object)">
            <summary>
            Check that the object provided is null.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:ComLib.Errors">
            <summary>
            Class to store errors both by key/value and non-key based errors.
            </summary>
        </member>
        <member name="M:ComLib.Errors.Add(System.String,System.String)">
            <summary>
            Adds an error associated with the key.
            </summary>
            <param name="key">The key.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:ComLib.Errors.Add(System.String)">
            <summary>
            Adds the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:ComLib.Errors.Each(System.Action{System.String,System.String})">
            <summary>
            Iterates over the error map and calls the callback
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ComLib.Errors.EachFull(System.Action{System.String})">
            <summary>
            Iterates over the error map and error list and calls the callback.
            Errormap entries are combined.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ComLib.Errors.Message">
            <summary>
            Builds a full error message of error map and list using NewLine as a separator between errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Errors.Message(System.String)">
            <summary>
            Builds a complete error message using the supplied separator for each error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Errors.Clear">
            <summary>
            Clears all the errors.
            </summary>
        </member>
        <member name="M:ComLib.Errors.On(System.String)">
            <summary>
            Gets the error on the specified error key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Errors.On">
            <summary>
            Gets all the errors
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Errors.CopyTo(ComLib.IErrors)">
            <summary>
            Copies all errors from this instance over to the supplied instance.
            </summary>
            <param name="errors">The errors.</param>
        </member>
        <member name="P:ComLib.Errors.Count">
            <summary>
            Gets the number of errors.
            </summary>
            <value>The number of errors.</value>
        </member>
        <member name="P:ComLib.Errors.HasAny">
            <summary>
            Gets a value indicating whether this instance has any errors.
            </summary>
            <value><c>true</c> if this instance has any errors; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Errors.ErrorList">
            <summary>
            Gets or sets the error list.
            </summary>
            <value>The error list.</value>
        </member>
        <member name="P:ComLib.Errors.ErrorMap">
            <summary>
            Gets or sets the error map.
            </summary>
            <value>The error map.</value>
        </member>
        <member name="T:ComLib.LocationSupport.LocationLookUpResult">
            <summary>
            Result when trying to search by a location.
            This is actually the result provided back from location service
            when parsing some location.
            
            e.g.
            
            zipcode    : "10465"
            state      : "ny"
            city/state : "bronx, ny"
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpResult.#cctor">
            <summary>
            Static constructor to build the null object "Empty"
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpResult.#ctor(ComLib.LocationSupport.LocationLookUpType,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="lookupType"></param>
            <param name="isValid"></param>
            <param name="error"></param>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.City">
            <summary>
            City name
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.CityId">
            <summary>
            City Id.
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.State">
            <summary>
            State name
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.StateAbbr">
            <summary>
            State abbreviation
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.StateId">
            <summary>
            State id
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.Country">
            <summary>
            Country name
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.CountryId">
            <summary>
            Country id
            </summary>
        </member>
        <member name="F:ComLib.LocationSupport.LocationLookUpResult.Zip">
            <summary>
            Zip code
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.Empty">
            <summary>
            Null object. 
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByZip">
            <summary>
            Indicates if looking up by zip
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByState">
            <summary>
            Indicates if looking up by state name
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByCountry">
            <summary>
            Searching by country
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByNotApplicable">
            <summary>
            Looking up by locatio not applicable.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByCity">
            <summary>
            Indicates if looking up by city.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByCityState">
            <summary>
            Indicates if looking up by city/state combination.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsLookUpByCityCountry">
            <summary>
            Indicates if looking up by City country combination.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.LookUpType">
            <summary>
            Get the lookup type.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.IsValid">
            <summary>
            Valid zip code?
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpResult.Error">
            <summary>
            Error if invalid.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.City">
            <summary>
            City
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.City.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.City.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            City constructor.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="abbr"></param>
            <param name="stateId"></param>
            <param name="countryId"></param>
        </member>
        <member name="P:ComLib.LocationSupport.City.StateId">
            <summary>
            State id
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.City.ParentId">
            <summary>
            Parent id can be used to associate an area with it's city/county.
            e.g. Bronx = city, parent id = NYC
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.City.IsPopular">
            <summary>
            Is major / popular city.
            </summary>
        </member>
        <member name="T:ComLib.Data.DataUtils">
            <summary>
            Database / table related utility functions.
            </summary>
        </member>
        <member name="M:ComLib.Data.DataUtils.Encode(System.String)">
            <summary>
            Encode the text for single quotes.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DataUtils.ConvertListToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts the list of objects to a data table using the types public / get properties.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Subs.Substitutor">
            <summary>
            Class to replace symbol names with actual values.
            Such as ${today}
            </summary>
        </member>
        <member name="M:ComLib.Subs.Substitutor.Substitute(System.Collections.Generic.List{System.String})">
            <summary>
            Performs substitutions on all the string items in the list supplied.
            converts: List[0] = ${today} = 03/28/2009.
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:ComLib.Subs.Substitutor.Substitute(System.String)">
            <summary>
            Get the interpreted value of the function call.
            e.g. 
            1. "${today}" will return today's date in MM/dd/YYYY format.
            2. "${T-1}"   will returns yesterdays date in MM/dd/YYYY format.
            3. "${Env.Var('PYTHON_HOME')} will return the value of the environment variable "PYTHON_PATH"
            4. "${Enc.Decode('28asd42=')} will decrypt the encrypted value supplied, 
                                          using the provider setup in the cryptography service.
            </summary>
            <param name="funcCall"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Subs.Substitutor.Register(System.String,System.Collections.Generic.IDictionary{System.String,System.Func{System.String,System.String}})">
            <summary>
            Register custom substitutions.
            </summary>
            <param name="group"></param>
            <param name="interpretedVals"></param>
        </member>
        <member name="M:ComLib.Subs.Substitutor.Register(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Add a single custom substitution interpretor for the respective group, key.
            </summary>
            <param name="group"></param>
            <param name="replacement"></param>
            <param name="interpretor"></param>
        </member>
        <member name="T:ComLib.Queue.QueueProcessState">
            <summary>
            State of the Queue Processor
            </summary>
        </member>
        <member name="T:ComLib.Data.SelectField">
            <summary>
            Represents a field in a select clause.
            </summary>
        </member>
        <member name="T:ComLib.Data.OrderByClause">
            <summary>
            Represents one entry to order by
            </summary>
        </member>
        <member name="F:ComLib.Data.Condition.ConditionType">
            <summary>
            And | Or
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogFile">
            <summary>
            File based logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.#ctor(System.String,System.String)">
            <summary>
            Initialize with path of the log file.
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:ComLib.Logging.LogFile.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initialize log file.
            </summary>
            <param name="name">Name of application.</param>
            <param name="filepath">File path, can contain substitutions. e.g. "%yyyy%.</param>
            <param name="date">Date to use in the name of the log file.</param>
            <param name="env">Environment name to put into the name of the log file.</param>
        </member>
        <member name="M:ComLib.Logging.LogFile.#ctor(System.String,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
            <summary>
            Initialize log file.
            </summary>
            <param name="name">Name of application.</param>
            <param name="filepath">File path, can contain substitutions. e.g. "%yyyy%.</param>
            <param name="date">Date to use in the name of the log file.</param>
            <param name="env">Environment name to put into the name of the log file.</param>
        </member>
        <member name="M:ComLib.Logging.LogFile.Log(ComLib.Logging.LogEvent)">
            <summary>
            Log the event to file.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:ComLib.Logging.LogFile.Flush">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.ShutDown">
            <summary>
            Shutsdown the logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.Dispose">
            <summary>
            Flushes the data to the file.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.Finalize">
            <summary>
            Destructor to close the writer
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogFile.FlushCheck">
            <summary>
            Flush the data and check file size for rolling.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogFile.FilePath">
            <summary>
            The full path to the log file.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationValidator">
            <summary>
            Validates the state/zip code combinations.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.#ctor(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Location rule inputs.
            </summary>
            <param name="zipcodeDao"></param>
            <param name="stateId"></param>
            <param name="city"></param>
            <param name="zip"></param>
            <param name="isOnline"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.#ctor(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,ComLib.LocationSupport.Address,System.Boolean)">
            <summary>
            Initalize using the Address object.
            </summary>
            <param name="statesLookup"></param>
            <param name="countryLookup"></param>
            <param name="address"></param>
            <param name="isOnline"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.Init(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,ComLib.LocationSupport.Address,System.Boolean)">
            <summary>
            Initialize
            </summary>
            <param name="statesLookup"></param>
            <param name="countryLookup"></param>
            <param name="address"></param>
            <param name="isOnline"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validate the rule against the data.
            </summary>
        </member>
        <member name="T:ComLib.IO.FileCleanArgs">
            <summary>
            Arguments for cleaning directories/files.
            </summary>
        </member>
        <member name="T:ComLib.Application.App">
            <summary>
            <para>
            A template driven base class for any application. This provides out-of the box functionality containing:
            1. Environment selection.
            2. Argument parsing
            3. Configuration file loading ( with inheritance )
            4. Logging
            5. Email notification on completion
            6. Error handling
            7. 0/1 Exit codes on completion
            </para>
            </summary>
        </member>
        <member name="T:ComLib.Application.IApp">
            <summary>
            Interface for any console/batch application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.ShowOptions">
            <summary>
            The the command line options.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Accept(System.String[])">
            <summary>
            Determine if the string[] arguments (command line arguments) can be accepted.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.IApp.AcceptArgs(System.String[])">
            <summary>
            Determine if the string[] arguments (command line arguments) can be accepted.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.IApp.AcceptArgs(System.String[],System.String,System.String)">
            <summary>
            Determine if the string[] arguments (command line arguments) can be accepted.
            </summary>
            <param name="args">e.g. -env:Prod -batchsize:100</param>
            <param name="prefix">-</param>
            <param name="separator">:</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.IApp.Init">
            <summary>
            Initialize the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Init(System.Object)">
            <summary>
            Initialize with some contextual data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.IApp.InitComplete">
            <summary>
            Perform some post initialization processing.
            and before execution begins.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Execute">
            <summary>
            Execute the application without any arguments.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Execute(System.Object)">
            <summary>
            Execute the application with context data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.IApp.ExecuteComplete">
            <summary>
            Used for performing some post execution processing before
            shutting down the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.ShutDown">
            <summary>
            Shutdown the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Notify">
            <summary>
            Send an email after the application execution completed.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.Notify(System.Collections.IDictionary)">
            <summary>
            Send a notification message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ComLib.Application.IApp.DisplayStart">
            <summary>
            Display the start of the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.IApp.DisplayEnd">
            <summary>
            Display the end of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Conf">
            <summary>
            The configuration for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Log">
            <summary>
            The logger for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Emailer">
            <summary>
            The emailer for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Result">
            <summary>
            The result of the execution.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Settings">
            <summary>
            Application configurable settings.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.StartTime">
            <summary>
            Get the starttime of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Name">
            <summary>
            Application name from either the settings or this.GetType().
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Description">
            <summary>
            Get the application description.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Version">
            <summary>
            Get the version of this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.Options">
            <summary>
            Get the definition of command line options that
            are acceptable for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.IApp.OptionsExamples">
            <summary>
            Get a list of examples that show how to launch this application.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Run(ComLib.Application.IApp,System.String[])">
            <summary>
            Runs the application provided.
            </summary>
            <param name="app">The application to run.</param>
            <param name="args">Command line arguments.</param>
        </member>
        <member name="M:ComLib.Application.App.Run(ComLib.Application.IApp,System.String[],System.String)">
            <summary>
            Runs the application provided.
            </summary>
            <param name="app">The application to run.</param>
            <param name="args">Command line arguments.</param>
            <param name="decorations">Decorations around the application. e.g. "diagnostics,statusupdates"</param>
        </member>
        <member name="M:ComLib.Application.App.Run(ComLib.Application.IApp,System.String[],System.Boolean,System.String)">
            <summary>
            Runs the application provided.
            </summary>
            <param name="app">The application to run.</param>
            <param name="args">Command line arguments.</param>
            <param name="requireConfigFiles">Whether or not to throw error if the config files are not available.</param>
            <param name="decorations">Decorations around the application. e.g. "diagnostics,statusupdates"</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComLib.Application.App.#ctor" -->
        <member name="M:ComLib.Application.App.ShowOptions">
            <summary>
            Show the command line options.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.AcceptArgs(System.String[])">
            <summary>
            Determine if the arguments can be accepted.
            </summary>
            <param name="args"></param>
            <returns>True if success. False otherwise.</returns>        
        </member>
        <member name="M:ComLib.Application.App.AcceptArgs(System.String[],System.String,System.String)">
            <summary>
            Determine if the arguments can be accepted.
            </summary>
            <param name="rawArgs">Arguments from commandline.</param>
            <param name="prefix">-</param>
            <param name="separator">:</param>
            <returns>True if success. False otherwise.</returns>        
        </member>
        <member name="M:ComLib.Application.App.Accept(System.String[])">
            <summary>
            Determine if the arguments can be accepted.
            </summary>
            <param name="args"></param>
            <returns>True if success. False otherwise.</returns>        
        </member>
        <member name="M:ComLib.Application.App.Init">
            <summary>
            Initialize the application.
            </summary>        
        </member>
        <member name="M:ComLib.Application.App.Init(System.Object)">
            <summary>
            Initialize with contextual data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.App.InitComplete">
            <summary>
            On initialization complete and before execution begins.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Execute">
            <summary>
            Execute the application without any arguments.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Execute(System.Object)">
            <summary>
            Execute the application with context data.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.App.ExecuteComplete">
            <summary>
            Used to perform some post execution processing before
            shutting down.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.ShutDown">
            <summary>
            Shutdown the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.DisplayStart">
            <summary>
            Display information at the start of the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.DisplayEnd">
            <summary>
            Display information at the end of the application.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Notify">
            <summary>
            Send an email notification.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Notify(System.Collections.IDictionary)">
            <summary>
            Send an email at the end of the completion of the application.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ComLib.Application.App.Display(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Display information about the application.
            </summary>
            <param name="isStart"></param>
            <param name="summaryInfo">The key/value pairs can be supplied
            if this is derived and the derived class wants to add additional
            summary information.</param>
        </member>
        <member name="M:ComLib.Application.App.BuildSummary(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Builds up a string representing the summary of the application.
            </summary>
            <param name="isStart"></param>
            <param name="summaryInfo"></param>
        </member>
        <member name="M:ComLib.Application.App.Dispose">
            <summary>
            Currently disposing.
            </summary>
        </member>
        <member name="M:ComLib.Application.App.Dispose(System.Boolean)">
            <summary>
            Overloaded dispose method indicating if dispose was 
            called explicitly.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ComLib.Application.App.Finalize">
            <summary>
            Finalization.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Conf">
            <summary>
            The configuration for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Log">
            <summary>
            The instance of the logger to use for the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Emailer">
            <summary>
            The instance of the email service.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Result">
            <summary>
            The result of the execution.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.StartTime">
            <summary>
            Get the start time of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Name">
            <summary>
            Application name from either the settings or this.GetType().
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Description">
            <summary>
            Get the application description.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Version">
            <summary>
            Get the version of this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Options">
            <summary>
            Get list of command line options that are supported.
            By default only supports the --pause option.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.OptionsExamples">
            <summary>
            Get example of how to run this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.Settings">
            <summary>
            Settings.
            </summary>
        </member>
        <member name="P:ComLib.Application.App.IsArgumentRecieverApplicable">
            <summary>
            Determines whether or not the argument reciever is capable of recieving the arguments.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileAppBase.InitializeDir(System.String)">
            <summary>
            Initialize the starting/root directory for this command.
            </summary>
            <param name="rootDir"></param>
        </member>
        <member name="T:ComLib.IO.FileCleaner">
            <summary>
            Cleans directories / files.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileCleaner.#ctor">
            <summary>
            File Cleaner.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileCleaner.Execute(System.Object)">
            <summary>
            Execute cleaning of files/directories.
            Doesn't actually delete anything but generates a file
            containing the commands.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.FileCleaner.HandleDirectory(System.IO.DirectoryInfo)">
            <summary>
            Handle the directory.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:ComLib.IO.FileCleaner.HandleFile(System.IO.FileInfo)">
            <summary>
            Handle the file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:ComLib.Calendars.CalendarService">
            <summary>
            Holiday calendar service.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.#ctor">
            <summary>
            Initialize using defaults.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComLib.Calendars.CalendarService.#ctor(System.String,ComLib.Calendars.ICalendarDataProvider,System.Int32)" -->
        <member name="M:ComLib.Calendars.CalendarService.Init(System.String,ComLib.Calendars.ICalendarDataProvider,System.Int32,System.Int32)">
            <summary>
            Initialize the Holiday calendar data provider and calendar code.
            </summary>
            <param name="calendarCode">"U.S.-NewYork"</param>
            <param name="provider">The underlying holiday dates provider.</param>
            <param name="startYear">Used for initialization. Loads holidays from the starting year.</param>
            <param name="endYear">Used for initialization. Loads holidays up to the ending year.</param>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.IsHolidayDataAvailable(System.Int32)">
            <summary>
            Indicates if there is holiday data available for the
            specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.IsBusinessDay(System.DateTime)">
            <summary>
            Determine if the date is a business date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.Holidays(System.Int32)">
            <summary>
            Get the holidays for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.Weekends(System.Int32)">
            <summary>
            Get the weekends in the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.BusinessDays(System.Int32)">
            <summary>
            Get the business dates for the specified year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.NextBusinessDate(System.DateTime)">
            <summary>
            Get the next business date after the date supplied.
            </summary>
            <param name="afterDate"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.PreviousBusinessDate(System.DateTime)">
            <summary>
            Get the previous business date from the date supplied.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.FirstBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the first business date of the month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.FirstBusinessDateOfYear(System.Int32)">
            <summary>
            Get the first business date of the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.LastBusinessDateOfMonth(System.Int32,System.Int32)">
            <summary>
            Get the last business date fo the month.
            </summary>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarService.LastBusinessDateOfYear(System.Int32)">
            <summary>
            Get the last business date of the year.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.CalendarService.CalendarCode">
            <summary>
            Calendar code used to indentify which holiday calendar data source to use.
            e.g. "country='US', province='NewYork', ref='some value to indicate source'";
            </summary>
        </member>
        <member name="P:ComLib.Calendars.CalendarService.HolidayProvider">
            <summary>
            Holiday data provider.
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.ErrorManager">
            <summary>
            Exception manager.
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.#cctor">
            <summary>
            Initialize the defaults.
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Init(ComLib.Exceptions.IErrorManager)">
            <summary>
            Initialize the provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.InitLocalizedManager(System.String,System.Boolean,ComLib.Exceptions.ILocalizedExceptionManager)">
            <summary>
            Initialize the provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Register(System.String,System.Boolean,ComLib.Exceptions.IErrorManager)">
            <summary>
            Register an named exception handler.
            </summary>
            <param name="name"></param>
            <param name="isDefault"></param>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.String)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,ComLib.IErrors)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.String,ComLib.IErrors)">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.Object,System.Exception,System.String,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.InternalHandle(System.Object,System.Exception,System.String,ComLib.IErrors,System.Object[])">
            <summary>
            Handles the specified error.
            </summary>
            <param name="error">The error.</param>
            <param name="exception">The exception.</param>
            <param name="errors">The error results.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception)">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Adds the error to <paramref name="errors"/>.
            </summary>
            <param name="errorDescriptor">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="errors">The list of errors to add to the error string to.</param>
            <param name="ex">The exception to handle.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception,System.String[])">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Adds the error to <paramref name="errors"/>.
            </summary>
            <param name="errorDescriptor">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="errors">The list of errors to add to the error string to.</param>
            <param name="ex">The exception to handle.</param>
            <param name="args">Array of strings to report in the error.</param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,System.Exception,System.String[])">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Converts all the <paramref name="args"/>
            to a string to put into the error.
            </summary>
            <param name="errorDescriptorKey">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="ex">The exception to handle.</param>
            <param name="args">Array of strings to report in the error.</param>
        </member>
        <member name="T:ComLib.Categories.Category">
            <summary>
            Summary description for Category
            </summary>
        </member>
        <member name="T:ComLib.Patterns.CompositeWithIdAndName`1">
            <summary>
            Compositie object with id and name.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Patterns.Composite`1">
            <summary>
            Composite object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.Add(`0)">
            <summary>
            Add a child node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.Remove">
            <summary>
            Remove the last node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.RemoveAt(System.Int32)">
            <summary>
            Remove at the specific index.
            </summary>
            <param name="ndx"></param>
        </member>
        <member name="M:ComLib.Patterns.Composite`1.Clear">
            <summary>
            Remove all the elements.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Composite`1.Count">
            <summary>
            Number of children.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Composite`1.HasChildren">
            <summary>
            Determine if this has children.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Composite`1.Children">
            <summary>
            Children.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.Composite`1.Parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.#ctor">
            <summary>
            Default name to empty.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.Add(`0)">
            <summary>
            Add node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.Remove">
            <summary>
            Remove the last node.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.RemoveAt(System.Int32)">
            <summary>
            Remove at the specific index.
            </summary>
            <param name="ndx"></param>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.Clear">
            <summary>
            Remove all the elements.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeWithIdAndName`1.InternalRemove(System.Int32)">
            <summary>
            Remove from lookups.
            </summary>
            <param name="ndx"></param>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.Id">
            <summary>
            Id of the node.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.ParentId">
            <summary>
            Parent id.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.Name">
            <summary>
            Name of the node.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.IsRoot">
            <summary>
            Return whether or not this is a root category.
            Which does not have a parent.
            </summary>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.Item(System.String)">
            <summary>
            Return node by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Patterns.CompositeWithIdAndName`1.Item(System.Int32)">
            <summary>
            Return by id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.Category.#ctor(System.Int32,System.DateTime,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="categoryId"></param>
            <param name="addedDate"></param>
            <param name="addedBy"></param>
            <param name="parentCategoryId"></param>
            <param name="categoryTitle"></param>
            <param name="categoryDescription"></param>
            <param name="categoryImageUrl"></param>
            <param name="parentTitle"></param>
        </member>
        <member name="P:ComLib.Categories.Category.Description">
            <summary>
            Description of category
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.ParentName">
            <summary>
            Name of parent category
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.OrderNum">
            <summary>
            Used for ordering.
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.ImageUrl">
            <summary>
            Image Url of the image associated with this category.
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.Url">
            <summary>
            Applicable url.
            </summary>
        </member>
        <member name="P:ComLib.Categories.Category.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="T:ComLib.Arguments.Args">
            <summary>
            Class to parse arguments and store both named and positional arguments for easy lookup.
            </summary>
            <example>
            <para>
                
            </para>
            </example>
            <summary>
            Class providing utility methods for parsing a string or collection of arguments.
            </summary>
        </member>
        <member name="F:ComLib.Arguments.Args._metaIndex">
            <summary>
            Index position of meta request.
            e.g. -help, -pause, -version
            </summary>
        </member>
        <member name="F:ComLib.Arguments.Args.Named">
            <summary>
            <para>
            Collection of named arguments.
            e.g. If "-config:prod.xml -date:T-1 MyApplicationId" is supplied to command line.
            
            Named["config"] = "prod.xml"
            Named["date"] = "T-1"
            </para>
            </summary>
        </member>
        <member name="F:ComLib.Arguments.Args.Positional">
            <summary>
            <para>
            Collection of un-named arguments supplied to command line.
            e.g. If "-config:prod.xml -date:T-1 MyApplicationId" is supplied to command line.
            
            Positional[0] = "MyApplicationId"
            </para>
            </summary>
        </member>
        <member name="F:ComLib.Arguments.Args.Raw">
            <summary>
            The original/raw arguments that were supplied.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[])">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String,System.String)">
            <summary>
            Initialize only the prefix / separator.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.String,System.String)">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.String,System.String,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initialize arguments.
            </summary>
            <param name="args">Raw arguments from command line.</param>
            <param name="supported">Supported named/positional argument definitions.</param>
            <param name="named">Named arguments</param>
            <param name="positional">Positional arguments.</param>
        </member>
        <member name="M:ComLib.Arguments.Args.#ctor(System.String[],System.String,System.String,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initialize arguments.
            </summary>
            <param name="args">Raw arguments from command line.</param>
            <param name="prefix">Prefix used for named arguments. "-".</param>
            <param name="keyValueSeparator">Separator used for named arguments key/values. ":".</param>
            <param name="supported">Supported named/positional argument definitions.</param>
            <param name="named">Named arguments</param>
            <param name="positional">Positional arguments.</param>
        </member>
        <member name="M:ComLib.Arguments.Args.DoParse(System.String[])">
            <summary>
            Parse the raw arguments using the internal schema.
            </summary>
            <param name="rawArgs"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Contains(System.String)">
            <summary>
            Whether or not the named argument exists.
            </summary>
            <param name="namedArg"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Get``1(System.String)">
            <summary>
            Get the named argument specified by <paramref name="argName"/>
            throws an exception if the named argument is not present.
            </summary>
            <param name="indexPosition">Index position of the argument.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Get``1(System.String,``0)">
            <summary>
            Get the named argument specified by <paramref name="argName"/>
            if it exists, returns <paramref name="defaultValue"/> otherwise.
            </summary>
            <param name="argName">Name of the named argument.</param>
            <param name="defaultValue">Default value to return if named arg does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Get``1(System.Int32)">
            <summary>
            Get the positional argument specified by <paramref name="indexPosition"/>
            throws an exception if the positional argument is not present.
            </summary>
            <param name="indexPosition">Index position of the argument.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Get``1(System.Int32,``0)">
            <summary>
            Get the positional argument specified by <paramref name="indexPosition"/>
            if it exists, returns <paramref name="defaultValue"/> otherwise.
            </summary>
            <param name="argName">Name of the named argument.</param>
            <param name="defaultValue">Default value to return if named arg does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.ShowUsage(System.String)">
            <summary>
            Show the usage of the arguments on the console.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.Args.GetUsage(System.String)">
            <summary>
            Get a string representing the usage of the arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.SetMetaIndex(System.Int32)">
            <summary>
            Set the index position of the argument indicating a specific meta query.
            Such as "-help", "-version", "-about".
            e.g. if 0, this indicates that the argument "-help" should be expected at position 0
            in the raw arguments.
            </summary>
            <param name="ndx"></param>
        </member>
        <member name="M:ComLib.Arguments.Args.IsPositionalArg(System.Int32,System.String,System.String[])">
            <summary>
            Checks if the first positional arg in the raw arguments is equal to 
            what's provided.
            </summary>
            <param name="valToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String)">
            <summary>
            Parse the line into <see cref="T:ComLib.Arguments.Args"/> object.
            </summary>
            <param name="text">The line of text containing arguments to parse.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String,System.String,System.String)">
            <summary>
            Parses the line into <see cref="T:ComLib.Arguments.Args"/> object using the supplied prefix and separator.
            </summary>
            <param name="text">The line of text containing arguments to parse.</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String,System.String,System.String,System.Object)">
            <summary>
            Parses the arguments and checks for named arguments and non-named arguments.
            </summary>
            <param name="text">The line of text containing arguments to parse.</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>
            <param name="argReciever">The object to apply the argument values to. This must have ArgAttributes on it's properties.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComLib.Arguments.Args.Parse(System.String[])" -->
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.String,System.String)">
            <summary>
            Parses the arguments
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.String,System.String,System.Object)">
            <summary>
            Parses the arguments and checks for named arguments and non-named arguments.
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>                
            <param name="argReciever">The object to apply the argument values to. This must have ArgAttributes on it's properties.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Parses the arguments into a <see cref="T:ComLib.Arguments.Args"/> object.
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="argsSpec">List of expected argument items(both named and positional).</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.String,System.String,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute})">
            <summary>
            Parses the arguments into a <see cref="T:ComLib.Arguments.Args"/>
            </summary>
            <param name="args">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>                
            <param name="argsSpec">List of expected argument items(both named and positional).</param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Accept(System.String[],System.String,System.String,System.Object)">
            <summary>
            Parses the arguments into a <see cref="T:ComLib.Arguments.Args"/> and prints any errors to the console.
            </summary>
            <param name="rawArgs">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>                
            <param name="argReciever">The object to apply the argument values to. This must have ArgAttributes on it's properties.</param>
            <returns>True if arguments are valid, false otherwise. argsReciever contains the arguments.</returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Accept(System.String[],System.String,System.String,System.Int32,System.Collections.Generic.List{ComLib.Arguments.ArgAttribute},System.Collections.Generic.List{System.String})">
            <summary>
            Parses the arguments into a <see cref="T:ComLib.Arguments.Args"/> and prints any errors to the console.
            </summary>
            <param name="rawArgs">e.g. "-env:prod", "-config:prod.xml", "-date:T-1", "20"</param>
            <param name="prefix">Prefix used for named arguments. E.g. "-" as in "-env:prod"</param>
            <param name="separator">Separator used between name and value of named arguments. E.g. ":" as in "-env:prod"</param>                
            <param name="minArgs">The minimum number of arguments expected.</param>
            <param name="supported">List of expected argument items(both named and positional).</param>                        
            <param name="examples">List of examples of how to use the examples.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.Args.Parse(System.String[],System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Checks for named args and gets the name and corresponding value.
            </summary>
            <param name="args">The arguments to parse</param>
            <param name="namedArgs">Dictionary to populate w/ named arguments.</param>
            <param name="unnamedArgs">List to populate with unamed arguments.</param>
            <param name="regexPatternWithValue">Regex pattern for key/value pair args.
            e.g. -env:prod where key=env value=prod</param>
            <param name="regexPatternBool">Regex pattern for boolean based key args.
            -sendemail key=sendemail the value is automatically set to true.
            This is useful for enabled options e.g. -sendemail -recurse </param>
        </member>
        <member name="M:ComLib.Arguments.Args.TryCatch(System.Func{ComLib.BoolMessageItem{ComLib.Arguments.Args}})">
            <summary>
            Wrap the parsing of the arguments into a trycatch.
            </summary>
            <param name="executor"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.Args.Schema">
            <summary>
            The argument schema containing what options are available.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.Args.Prefix">
            <summary>
            Named args prefix used. "-"
            e.g. -env:Production
            </summary>
        </member>
        <member name="P:ComLib.Arguments.Args.Separator">
            <summary>
            Named args key / value separator used. ":"
            e.g. -env:Production
            </summary>
        </member>
        <member name="P:ComLib.Arguments.Args.IsEmpty">
            <summary>
            True if there are 0 arguments.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.Args.IsVersion">
            <summary>
            Returns true if there is only 1 argument with value:  --Version -Version /Version
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.Args.IsPause">
            <summary>
            Returns true if there is only 1 argument with value: --pause -pause /pause
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.Args.IsHelp">
            <summary>
            Returns true if there is only 1 argument with value: --help -help --help -help /? -? ?
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Arguments.Args.IsInfo">
            <summary>
            Returns true if there is only 1 argument with value: --About -About /About
            </summary>
        </member>
        <member name="T:ComLib.Application.AppDecorator">
            <summary>
            Base class for the Batch application.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.#ctor(System.String,ComLib.Application.IApp)">
            <summary>
            Initialize the underlying instance.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ComLib.Application.AppDecorator.InitDecorations">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ShowOptions">
            <summary>
            The command line options.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Accept(System.String[])">
            <summary>
            Accept args.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecorator.AcceptArgs(System.String[])">
            <summary>
            Accept arguments.
            </summary>
            <param name="args">Command line args.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecorator.AcceptArgs(System.String[],System.String,System.String)">
            <summary>
            Accept arguments.
            </summary>
            <param name="args">e.g. -env:Prod -batchsize:100</param>
            <param name="prefix">-</param>
            <param name="separator">:</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Init">
            <summary>
            Initialize application.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Init(System.Object)">
            <summary>
            Initialize 
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.AppDecorator.InitComplete">
            <summary>
            Initialization complete.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Execute">
            <summary>
            Execute the core logic.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Execute(System.Object)">
            <summary>
            Execute the core logic.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ExecuteComplete">
            <summary>
            Execute Complete.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ShutDown">
            <summary>
            Shutdown.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Notify">
            <summary>
            Send emails only if the decoration is enabled.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.Notify(System.Collections.IDictionary)">
            <summary>
            Notify using the message supplied.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ComLib.Application.AppDecorator.DisplayStart">
            <summary>
            Display start.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.DisplayEnd">
            <summary>
            Display end.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ExecuteInternal(System.Func{ComLib.BoolMessageItem})">
            <summary>
            Executes the application.execute method via a lamda and logs the success/failure.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecorator.RunDiagnostics">
            <summary>
            Run Diagnostics.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecorator.ShutdownServices">
            <summary>
            Shutdown various Services.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Options">
            <summary>
            Get all the options that are supported.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.OptionsExamples">
            <summary>
            Get examples of the command line options.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Conf">
            <summary>
            The config source for the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Log">
            <summary>
            The logger for the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Result">
            <summary>
            Result of the execution.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Emailer">
            <summary>
            The Emailer for this application.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Settings">
            <summary>
            Application Settings
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.StartTime">
            <summary>
            Start time of the application.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Name">
            <summary>
            Application name from either the settings or this.GetType().
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Description">
            <summary>
            Get the application description.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppDecorator.Version">
            <summary>
            Get the version of this application.
            </summary>
        </member>
        <member name="T:ComLib.Web.UrlHelper">
            <summary>
            Url helper to provide various utitlity methods.
            
            1. Provide valid url's for either local development maching running
               a website from visual studio OR IIS.
            
            2. Get url's that have been rewritten.
            </summary>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetRelativeSiteUrl(System.String)">
            <summary>
            Gets the relative site url.
            </summary>
            <remarks>
            Use this method for getting relative site urls for resource files such as
            1. Javascript
            2. Images
            3. Xml files
            </remarks>
            <param name="url">"~/Scripts/Javascript/UI.js"</param>
            <returns>
            For IIS PRODUCTION: /Scripts/Javascript/UI.js
            For VS  LOCAL DEV : /MyApp.WebSite/Scripts/Javascript/UI.js
            </returns>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetMappedRelativeSiteUrl(System.String)">
            <summary>
            Gets the relative site url for possibly mapped/rewritten urls.
            </summary>
            <remarks>
            Use this method for getting relative site urls for rewritten urls such as
            1. Web pages ( .aspx .html .htm etc. )
            </remarks>
            <param name="url">"~/Modules/Home.aspx"</param>
            <returns>
            If there are mappings:
            For IIS PRODUCTION: /Home.aspx
            For VS  LOCAL DEV : /Workshops.WebSite/Home.aspx
            </returns>        
        </member>
        <member name="M:ComLib.Web.UrlHelper.ConfigureUrlRewriting(System.Boolean,ComLib.Web.UrlMapper)">
            <summary>
            Configure the url-rewriting flag and set the url mapper.
            </summary>
            <param name="isUrlRewritingEnabled"></param>
            <param name="urlMapper"></param>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetSiteRoot">
            <summary>
            Gets the root of the website. http: or https: plus the appropriate port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetRequestedFileName(System.String,System.Boolean)">
            <summary>
            Returns the name of the requested file.
            </summary>
            <param name="includeExtension">Flag indicating if extension of the file should also be 
            included.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetRelativeSiteUrl(System.String,System.String)">
            <summary>
            These are exposed to the unit tests in CommonLibrary.Tests.
            </summary>
            <param name="applicationPath"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.UrlHelper.GetMappedRelativeSiteUrl(System.String,System.String)">
            <summary>
            These are exposed to the unit tests in ServiceGoFor.CommonLibrary.Tests.
            </summary>
            <param name="applicationPath"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Web.UrlHelper.IsRewritingEnabled">
            <summary>
            Get or set flag indicating if url-rewriting is enabled.
            </summary>        
        </member>
        <member name="P:ComLib.Web.UrlHelper.UrlMapperProvider">
            <summary>
            Instance of the url mapper.
            </summary>
        </member>
        <member name="T:ComLib.Web.UrlMapper">
            <summary>
            Url mapper to assist in mapping physical urls to possible rewritten urls.
            </summary>
        </member>
        <member name="M:ComLib.Web.UrlMapper.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Url mapper with mappings provided as IDictionary.
            </summary>
            <example>
                      Physical Url        Rewritten url
                key = "~/Classes.aspx"    value = "~/SearchClasses.aspx"
            </example>
            <param name="urlMappings">Mappings from physical url to logical urls.</param>
        </member>
        <member name="M:ComLib.Web.UrlMapper.GetUrl(System.String)">
            <summary>
            Get the real url.
            </summary>
            <param name="url"></param>
            <returns>Mapped url if mapping present, original url otherwise</returns>
        </member>
        <member name="M:ComLib.Web.UrlMapper.Init(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialize.
            </summary>
            <param name="urlMappings">mappings to rewritten urls.</param>
        </member>
        <member name="T:ComLib.BoolMessage">
            <summary>
            Combines a boolean succes/fail flag with a error/status message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessage.True">
            <summary>
            True message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessage.False">
            <summary>
            False message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessage.Success">
            <summary>
            Success / failure ?
            </summary>
        </member>
        <member name="F:ComLib.BoolMessage.Message">
            <summary>
            Error message for failure, status message for success.
            </summary>
        </member>
        <member name="M:ComLib.BoolMessage.#ctor(System.Boolean,System.String)">
            <summary>
            Set the readonly fields.
            </summary>
            <param name="success"></param>
            <param name="message"></param>
        </member>
        <member name="T:ComLib.BoolMessageItem">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ComLib.BoolMessageItem._item">
            <summary>
            Item associated with boolean message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessageItem.True">
            <summary>
            True message.
            </summary>
        </member>
        <member name="F:ComLib.BoolMessageItem.False">
            <summary>
            False message.
            </summary>
        </member>
        <member name="M:ComLib.BoolMessageItem.#ctor(System.Object,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:ComLib.BoolMessageItem.Item">
            <summary>
            Return readonly item.
            </summary>
        </member>
        <member name="T:ComLib.BoolMessageItem`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.BoolMessageItem`1.#ctor(`0,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:ComLib.BoolMessageItem`1.Item">
            <summary>
            Return item as correct type.
            </summary>
        </member>
        <member name="F:ComLib.BoolResult`1.False">
            <summary>
            Empty false result.
            </summary>
        </member>
        <member name="F:ComLib.BoolResult`1.True">
            <summary>
            Empty True result.
            </summary>
        </member>
        <member name="M:ComLib.BoolResult`1.#ctor(`0,System.Boolean,System.String,ComLib.IValidationResults)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:ComLib.BoolResult`1.Errors">
            <summary>
            List of errors from performing some action.
            </summary>
        </member>
        <member name="T:ComLib.BoolMessageItemExtensions">
            <summary>
            Extensions to the boolmessage item.
            </summary>
        </member>
        <member name="M:ComLib.BoolMessageItemExtensions.AsExitCode(ComLib.BoolMessageItem)">
            <summary>
            Convert the result to an exit code.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.LocationSupport.State">
            <summary>
            State 
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.State"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.State.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.State"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="countryId">The country id.</param>
            <param name="countryName">Name of the country.</param>
            <param name="stateAbbr">The state abbr.</param>
        </member>
        <member name="P:ComLib.LocationSupport.State.CountryName">
            <summary>
            Gets or sets the name of the country.
            </summary>
            <value>The name of the country.</value>
        </member>
        <member name="M:ComLib.EmailSupport.EmailServiceSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.EmailSupport.EmailServiceSettings"/> class.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.EmailServiceSettings.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.EmailSupport.EmailServiceSettings"/> class.
            </summary>
            <param name="smtpService">The SMTP service.</param>
            <param name="port">The port.</param>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.SmptServer">
            <summary>
            Gets or sets the SMPT server.
            </summary>
            <value>The SMPT server.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.UsePort">
            <summary>
            Gets or sets a value indicating whether [use port].
            </summary>
            <value><c>true</c> if [use port]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.AuthenticationUserName">
            <summary>
            Gets or sets the name of the authentication user.
            </summary>
            <value>The name of the authentication user.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.AuthenticationPassword">
            <summary>
            Gets or sets the authentication password.
            </summary>
            <value>The authentication password.</value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.IsAuthenticationRequired">
            <summary>
            Gets or sets a value indicating whether this instance is authentication required.
            </summary>
            <value>
            	<c>true</c> if this instance is authentication required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.EmailSupport.EmailServiceSettings.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:ComLib.Data.ConnectionInfo">
            <summary>
            Class to encapsulate a connection string.
            </summary>
        </member>
        <member name="F:ComLib.Data.ConnectionInfo.Empty">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="F:ComLib.Data.ConnectionInfo.Default">
            <summary>
            Default instance 2.
            </summary>
        </member>
        <member name="M:ComLib.Data.ConnectionInfo.#ctor(System.String)">
            <summary>
            Initialize using the connection string.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:ComLib.Data.ConnectionInfo.#ctor(System.String,System.String)">
            <summary>
            Initialize using connection string and provider name.
            </summary>
            <param name="connectionString"></param>
            <param name="providerName"></param>
        </member>
        <member name="P:ComLib.Data.ConnectionInfo.ConnectionString">
            <summary>
            Get the connection string.
            </summary>
        </member>
        <member name="P:ComLib.Data.ConnectionInfo.ProviderName">
            <summary>
            THe name of the database provider. e.g. "System.Data.SqlClient"
            </summary>
        </member>
        <member name="T:ComLib.Subs.SubstitutionService">
            <summary>
            Class to replace symbol names with actual values.
            Such as ${today}
            </summary>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.#ctor">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.Substitute(System.Collections.Generic.List{System.String})">
            <summary>
            Performs substitutions on all the string items in the list supplied.
            converts: List[0] = ${today} = 03/28/2009.
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.Register(System.String,System.Collections.Generic.IDictionary{System.String,System.Func{System.String,System.String}})">
            <summary>
            Registers custom substitutions for the respective group.
            </summary>
            <param name="interpretedVals"></param>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.Register(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Registers custom substitutions.
            </summary>
            <param name="interpretedVals"></param>
        </member>
        <member name="M:ComLib.Subs.SubstitutionService.Init">
            <summary>
            Sets up the default substitution name/values.
            </summary>
        </member>
        <member name="P:ComLib.Subs.SubstitutionService.Item(System.String)">
            <summary>
            Get the interpreted value of the function call.
            e.g. 
            1. "${today}" will return today's date in MM/dd/YYYY format.
            2. "${T-1}"   will returns yesterdays date in MM/dd/YYYY format.
            3. "${Env.Var('PYTHON_HOME')} will return the value of the environment variable "PYTHON_PATH"
            4. "${Enc.Decode('28asd42=')} will decrypt the encrypted value supplied, 
                                          using the provider setup in the cryptography service.
            </summary>
            <param name="funcCall"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Subs.Substitution">
            <summary>
            Substitution.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.Empty">
            <summary>
            empty / null object.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.Groupname">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.FuncName">
            <summary>
            Func name to call.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.Args">
            <summary>
            Arguments passed to func.
            </summary>
        </member>
        <member name="F:ComLib.Subs.Substitution.IsValid">
            <summary>
            Is valid.
            </summary>
        </member>
        <member name="M:ComLib.Subs.Substitution.#ctor">
            <summary>
            Default.
            </summary>
        </member>
        <member name="M:ComLib.Subs.Substitution.#ctor(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Initialize.
            </summary>
            <param name="group"></param>
            <param name="func"></param>
            <param name="args"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryExpressionHelper.BuildSinglePropertyCondition``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryExpressionTypeHelper.GetText(System.Linq.Expressions.ExpressionType)">
            <summary>
            Get the sql text equivalent of the expression type.
            </summary>
            <param name="expType"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Queue.QueueProcessorSettings">
            <summary>
            Settings for the processing queue.
            </summary>
        </member>
        <member name="P:ComLib.Queue.QueueProcessorSettings.NumberToProcessPerDequeue">
            <summary>
            Gets or sets the number to process per dequeue.
            </summary>
            <value>The number to process per dequeue.</value>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.#ctor(System.String,System.String,System.String,ComLib.Logging.LogLevel)">
            <summary>
            Constructor
            </summary>
            <param name="connection">Connection to a database that contains the log events table</param>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.#ctor(System.String,System.String,ComLib.Entities.IRepository{ComLib.Logging.LogEventEntity},ComLib.Logging.LogLevel)">
            <summary>
            Constructor taking the IRepository that will handle CRUD operations
            of log messages to the Database.
            Also, the repo provided can be a FAKE( In-Memory ) implementation which
            is useful in testing.
            </summary>
            <param name="connection">Repository to use for the logs.</param>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.Log(ComLib.Logging.LogEvent)">
            <summary>
            Adds a log event to a internal list then runs a flush check
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.Flush">
            <summary>
            Persists a batch of log events to a database table
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogDatabase.FlushCheck">
            <summary>
            Checks if the internal list has reached the flush interval
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.LocationDataMassager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationDataMassager.Massage(ComLib.LocationSupport.Address,ComLib.Entities.EntityAction)">
            <summary>
            Massage the address by setting it's cityid, stateid, countryid 
            from the city, state, country name.
            </summary>
            <param name="address"></param>
            <param name="entityAction"></param>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.Times(System.String,System.Int32)">
            <summary>
            Multiply a string N number of times.
            </summary>
            <param name="str"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.IncreaseTo(System.String,System.Int32,System.Boolean)">
            <summary>
            Increases the string to the maximum length specified.
            If the string is already greater than maxlength, it is truncated if the flag truncate is true.
            </summary>
            <param name="str">The STR.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="truncate">if set to <c>true</c> [truncate].</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.IncreaseRandomly(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Increases the string to the maximum length specified.
            If the string is already greater than maxlength, it is truncated if the flag truncate is true.
            </summary>
            <param name="str">The STR.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="truncate">if set to <c>true</c> [truncate].</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string.
            </summary>
            <param name="txt"></param>
            <param name="maxChars"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.TruncateWithText(System.String,System.Int32,System.String)">
            <summary>
            Truncate the text supplied by number of characters specified by <paramref name="maxChars"/>
            and then appends the suffix.
            </summary>
            <param name="txt"></param>
            <param name="maxChars"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToBoolObject(System.String)">
            <summary>
            Converts "yes/no/true/false/0/1"
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToBool(System.String)">
            <summary>
            Converts "yes/no/true/false/0/1"
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToIntObject(System.String)">
            <summary>
            Converts "$100 or 100"
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToInt(System.String)">
            <summary>
            Converts "$100 or 100"
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToLongObject(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToLong(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToDoubleObject(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToDouble(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToFloatObject(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToFloat(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToNumber``1(System.String,System.Func{System.String,``0},``0)">
            <summary>
            Converts to a number using the callback.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="txt"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToTimeObject(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100. Does not round up.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToTime(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100. Does not round up.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToDateTimeObject(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100. Does not round up.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
            Converts "$100 or $100.50 or 100 or 100.5" to 100. Does not round up.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderUtils.GetFiles(ComLib.Models.ModelContext,System.String,System.String)">
            <summary>
            Get the list of files to process.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderUtils.WriteFiles(System.Collections.Generic.Dictionary{System.String,ComLib.CodeGeneration.CodeFile},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            
            </summary>
            <param name="files"></param>
            <param name="subs"></param>
            <param name="p"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.TypeMap">
            <summary>
            Class to expose mapping between types of different data sources.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.TypeMap.SqlServer">
            <summary>
            Key to use for getting sqlserver type map for .net types.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.TypeMap.NetFormatToCSharp">
            <summary>
            .NET format types to csharp short names.
            e.g. Int32 to int.
            </summary>
        </member>
        <member name="F:ComLib.CodeGeneration.TypeMap.NetFormatToCSharpType">
            <summary>
            .NET format types to csharp short names.
            e.g. System.Int32 to Type.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.#cctor">
            <summary>
            Initialize basic datatypes.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.RegisterTypeMap(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Register a specific type map.
            </summary>
            <param name="mapName"></param>
            <param name="typeMap"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.RegisterDefaultTypeMaps">
            <summary>
            Registers the default type mappings for :
            1. .NET Types to Sql Server types.
            2. .NET typeof(Type).FullName to short names.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.Get``1(System.String,System.String)">
            <summary>
            Get a mapping and cast to specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.ContainsKey(System.String,System.String)">
            <summary>
            Return true of false if the specified key is the typemap associated with source.
            </summary>
            <param name="source">"sqlserver"</param>
            <param name="key">"Int32"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.TypeMap.IsBasicNetType(System.Type)">
            <summary>
            Is the type a basic datatype( int, bool, long, double, datetime, string )?
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Application.AppConfig">
            <summary>
            Settings for the application template.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppConfig.#ctor">
            <summary>
            Initialize defaults.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsPrefix">
            <summary>
            Prefix for named args. "-"
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsSeparator">
            <summary>
            Key / value separator for Named args. ":".
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsReciever">
            <summary>
            Object to apply the arguments to.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsAppliedToReciever">
            <summary>
            Whether or not to apply the arguments to the reciever.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.ArgsRequired">
            <summary>
            Whether or not any arguments are required at all.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.SendEmailOnCompletion">
            <summary>
            Whether or not to send email on completion.
            </summary>
        </member>
        <member name="P:ComLib.Application.AppConfig.RequireConfigs">
            <summary>
            Whether or not config files are required.
            </summary>
        </member>
        <member name="T:ComLib.Types.StartTimeOfDay">
            <summary>
            Enum to represent the time as a part of the day.
            </summary>
        </member>
        <member name="T:ComLib.Types.TimeParseResult">
            <summary>
            Time parse result.
            </summary>
        </member>
        <member name="M:ComLib.Types.TimeParseResult.#ctor(System.Boolean,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor to initialize the results
            </summary>
            <param name="valid"></param>
            <param name="error"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:ComLib.Types.TimeParseResult.StartTimeAsDate">
            <summary>
            Get the start time as a datetime
            </summary>
        </member>
        <member name="P:ComLib.Types.TimeParseResult.EndTimeAsDate">
            <summary>
            Get the end time as a datetime
            </summary>
        </member>
        <member name="T:ComLib.Types.TimeParserConstants">
            <summary>
            constants used by the time parser.
            </summary>
        </member>
        <member name="F:ComLib.Types.TimeParserConstants.Am">
            <summary>
            Am string.
            </summary>
        </member>
        <member name="F:ComLib.Types.TimeParserConstants.AmWithPeriods">
            <summary>
            Am string with periods a.m.
            </summary>
        </member>
        <member name="F:ComLib.Types.TimeParserConstants.Pm">
            <summary>
            Pm string.
            </summary>
        </member>
        <member name="F:ComLib.Types.TimeParserConstants.PmWithPeriods">
            <summary>
            Pm string with periods p.m.
            </summary>
        </member>
        <member name="F:ComLib.Types.TimeParserConstants.MinDate">
            <summary>
            Min Time to represent All times for a post.
            </summary>
        </member>
        <member name="F:ComLib.Types.TimeParserConstants.MaxDate">
            <summary>
            Max Time to represent all times for a post.
            </summary>
        </member>
        <member name="T:ComLib.Types.TimeHelper">
            <summary>
            Class to parse time in following formats.
            
            1. 1
            2. 1am
            3. 1pm
            4. 1:30
            5. 1:30am
            6. 12pm
            </summary>
        </member>
        <member name="M:ComLib.Types.TimeHelper.ParseStartEndTimes(System.String)">
            <summary>
            Parses the start and (optional) end time supplied as a single string.
            
            e.g.
                11:30am
                11am    -  1pm
                11am    to 1pm
            </summary>
            <remarks>If only 1 time is provided, it's assumed to be the starttime,
            and the end time is set to TimeSpan.MaxValue</remarks>
            <param name="startAndEndTimeRange"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TimeHelper.ParseStartEndTimes(System.String,System.String,System.Boolean)">
            <summary>
            Parses the start and end time and confirms if the end time is greater than
            the start time.
            e.g. 11am, 1:30pm
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TimeHelper.Parse(System.String)">
            <summary>
            Parse the time using Regular expression.
            </summary>
            <param name="strTime"></param>
            <param name="errors">Collects errors from parsing. Can be null.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TimeHelper.ConvertFromMilitaryTime(System.Int32)">
            <summary>
            Convert military time ( 1530 = 3:30 pm ) to a TimeSpan.
            </summary>
            <param name="military"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TimeHelper.ConvertToMilitary(System.TimeSpan)">
            <summary>
            Converts to military time.
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TimeHelper.Format(System.TimeSpan)">
            <summary>
            Get the time formatted correctly to exclude the minutes if
            there aren't any. Also includes am - pm.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TimeHelper.GetTimeOfDay(System.TimeSpan)">
            <summary>
            Gets the time as a part of the day.( morning, afternoon, evening ).
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TimeHelper.GetTimeOfDay(System.Int32)">
            <summary>
            Get the time of day ( morning, afternoon, etc. ) from military time.
            </summary>
            <param name="militaryTime"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.EmailSupport.EmailService">
            <summary>
            Simple Email service.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.EmailSupport.EmailService"/> class.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.#ctor(ComLib.Configuration.IConfigSource,System.String)">
            <summary>
            Initialize configuration using the configuration source supplied.
            The email service settings must be in a section named "EmailService".
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.#ctor(ComLib.EmailSupport.EmailServiceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.EmailSupport.EmailService"/> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Init(ComLib.EmailSupport.EmailServiceSettings)">
            <summary>
            Initialize the configuration.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(ComLib.EmailSupport.NotificationMessage,System.String,System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(ComLib.EmailSupport.NotificationMessage)">
            <summary>
            Sends the mail message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="message">The mail message</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="from">Who the email is from.</param>
            <param name="to">Who the email is being sent to.</param>
            <param name="subject">Subject of email.</param>
            <param name="body">Email body.</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.Send(System.Net.Mail.MailMessage)">
            <summary>
            Mail the message using the native MailMessage class and the credentials from the current configuration.
            </summary>
            <param name="message">The mail message</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailService.InternalSend(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Internals the send.
            </summary>
            <param name="message">The message.</param>
            <param name="useCredentials">if set to <c>true</c> [use credentials].</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.EmailSupport.EmailService.Settings">
            <summary>
            The email service configuration object.
            </summary>
        </member>
        <member name="T:ComLib.Subs.SubstitutionUtils">
            <summary>
            Utility methods for the subs.
            </summary>
        </member>
        <member name="M:ComLib.Subs.SubstitutionUtils.Parse(System.String,ComLib.Subs.SubstitutionService)">
            <summary>
            parse the substitution.
            </summary>
            <param name="funcCall"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Subs.SubstitutionUtils.Eval(ComLib.Subs.Substitution,ComLib.Subs.SubstitutionService)">
            <summary>
            Evaluate the funcall.
            </summary>
            <param name="sub"></param>
            <param name="subContainer"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Schedule(System.String,ComLib.Scheduling.Trigger,System.Boolean,System.Action,System.Action{ComLib.Scheduling.Task})">
            <summary>
            Schedules the specified task via a delegate.
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="trigger"></param>
            <param name="start"></param>
            <param name="method"></param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Pause(System.String)">
            <summary>
            Pauses the task
            </summary>
            <param name="name"></param>
            <param name="group"></param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Resume(System.String)">
            <summary>
            Resumes the task
            </summary>
            <param name="name"></param>
            <param name="group"></param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.Delete(System.String)">
            <summary>
            Delete task
            </summary>
            <param name="name"></param>
            <param name="group"></param>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.GetNames">
            <summary>
            Gets all the active tasks in the schedule.
            BUG: Currently does not return the task name that are associated 
            with the group name.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.PauseAll">
            <summary>
            Pause all tasks
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.ResumeAll">
            <summary>
            Resume all tasks
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.ShutDown">
            <summary>
            Shuts down the scheduler.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.SchedulerService.GetStatus">
            <summary>
            Get the statues of all tasks
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Scheduling.SchedulerService.IsStarted">
            <summary>
            Is started.
            </summary>
        </member>
        <member name="P:ComLib.Scheduling.SchedulerService.IsShutDown">
            <summary>
            Is shut down.
            </summary>
        </member>
        <member name="T:ComLib.Logging.LogMulti">
            <summary>
            Logging class that will log to multiple loggers.
            </summary>
        </member>
        <member name="T:ComLib.Logging.ILogMulti">
            <summary>
            Interface for a logger that represents a chain(multiple) loggers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.ILogMulti.Append(ComLib.Logging.ILog)">
            <summary>
            Append another logger to the chain of loggers.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ComLib.Logging.ILogMulti.Replace(ComLib.Logging.ILog)">
            <summary>
            Replaces all the existing loggers w/ the supplied logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ComLib.Logging.ILogMulti.Clear">
            <summary>
            Clear all the chained loggers.
            </summary>
        </member>
        <member name="P:ComLib.Logging.ILogMulti.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:ComLib.Logging.ILogMulti.Item(System.Int32)">
            <summary>
            Get a logger by it's index position.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:ComLib.Logging.ILogMulti.Count">
            <summary>
            Get the number of loggers that are in here.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogMulti.#ctor(System.String,ComLib.Logging.ILog)">
            <summary>
            Initalize multiple loggers.
            </summary>
            <param name="loggers"></param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.#ctor(System.String,System.Collections.Generic.IList{ComLib.Logging.ILog})">
            <summary>
            Initalize multiple loggers.
            </summary>
            <param name="loggers"></param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Init(System.String,System.Collections.Generic.IList{ComLib.Logging.ILog})">
            <summary>
            Initialize with loggers.
            </summary>
            <param name="loggers"></param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Log(ComLib.Logging.LogEvent)">
            <summary>
            Log the event to each of the loggers.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Append(ComLib.Logging.ILog)">
            <summary>
            Append to the chain of loggers.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Replace(ComLib.Logging.ILog)">
            <summary>
            Replaces all the existing loggers w/ the supplied logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Clear">
            <summary>
            Clear all the exiting loggers and only add the console logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogMulti.IsEnabled(ComLib.Logging.LogLevel)">
            <summary>
            Whether or not the level specified is enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.LogMulti.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogMulti.ShutDown">
            <summary>
            Shutdown all loggers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogMulti.ActivateOptions">
            <summary>
            Determine the lowest level by getting the lowest level
            of all the loggers.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogMulti.Count">
            <summary>
            Get the number of loggers that are part of this loggerMulti.
            </summary>
        </member>
        <member name="P:ComLib.Logging.LogMulti.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:ComLib.Logging.LogMulti.Item(System.Int32)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:ComLib.Logging.LogMulti.Level">
            <summary>
            Get the level. ( This is the lowest level of all the loggers. ).
            </summary>
        </member>
        <member name="T:ComLib.Entities.ActionContext`1">
            <summary>
            The action context to pass to ModelService to perform any action on the model.
            This is used to for encapsulation to avoid changing the method signature
            of a ModelService if additional arguments need to be passed.
            </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(`0)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="!:ActionContext&lt;TId, T&gt;"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="combineErrors">if set to <c>true</c> [combine errors].</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="!:ActionContext&lt;TId, T&gt;"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="combineErrors">if set to <c>true</c> [combine errors].</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(ComLib.IValidationResults)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(`0,ComLib.IValidationResults)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="M:ComLib.Entities.ActionContext`1.#ctor(ComLib.IValidationResults,System.Int32)">
            <summary>
            Create the model action context using existing errors or message collection.
            If empty, a default instance will be created.
            </summary>
            <param name="errors">Error collection</param>
            <param name="messages">Message collection</param>
        </member>
        <member name="P:ComLib.Entities.ActionContext`1.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:ComLib.Entities.ActionContext`1.Items">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:ComLib.Diagnostics.DiagnosticsHelper">
            <summary>
            Utility class for diagnostics.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetDrivesInfo">
            <summary>
            Returns a key value pair list of drives and available space.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetMachineInfo">
            <summary>
            Get the machine level information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetServices">
            <summary>
            Get all the list of services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetAppDomainInfo">
            <summary>
            Get information about the currently executing process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetModules">
            <summary>
            Get all the loaded modules in the current process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetProcesses">
            <summary>
            Get information about the currently executing process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetSystemEnvVariables">
            <summary>
            System level environment levels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetUserEnvVariables">
            <summary>
            User level environment variables
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsHelper.GetEnvVariables(System.Func{System.Collections.IDictionary})">
            <summary>
            Get the environment variables.
            </summary>
            <param name="envGetter"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Diagnostics.LoadedModule">
            <summary>
            Stores the information about a loaded assembly/module.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.LoadedModule.ToString">
            <summary>
            Get formatted text.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.DBSchema">
            <summary>
            TO_DO:
            Class containing various methods for discovering various objects in a database.
            eg.
            1. Find tables
            2. Find schemas
            3. Find stored procedures
            4. Find Views
            </summary>
        </member>
        <member name="M:ComLib.Data.DBSchema.#ctor">
            <summary>
            Default construction
            </summary>
        </member>
        <member name="M:ComLib.Data.DBSchema.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize using connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Data.DBSchema.DropTable(System.String)">
            <summary>
            Drop the table from the database.
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:ComLib.Data.DBSchema.GetDropProc(System.String,System.String)">
            <summary>
            Get the drop command for the procedure giving the table name and procedure name.
            </summary>
            <param name="tableName"></param>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Authentication.Auth">
            <summary>
            Provides static access to the all the <see cref="T:ComLib.Authentication.IAuth"/> methods in the current <see cref="T:ComLib.Authentication.IAuth"/> provider being used.
            <para>
            Auth.IsAdmin();
            Auth.IsGuest();
            Auth.UserName;
            etc.
            </para>
            </summary>
        </member>
        <member name="M:ComLib.Authentication.Auth.#cctor">
            <summary>
            Default to windows.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.Auth.Init(ComLib.Authentication.IAuth)">
            <summary>
            Initialize the current <see cref="T:ComLib.Authentication.IAuth"/> provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsAuthenticated">
            <summary>
            Return whether or not the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsGuest">
            <summary>
            Return whether or not the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.GetUser``1(System.String)">
            <summary>
            Get the user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.GetUser``1">
            <summary>
            Get the user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUserInRoles(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Is user in the list of roles specified.
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsAdmin">
            <summary>
            Determine whether or not the currently logged in user is an admin.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUser(System.String)">
            <summary>
            Determine if the logged in user is the same as the username supplied.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.IsUserOrAdmin(System.String)">
            <summary>
            Returns true if the logged in user is the same as the username supplied,
            or if the logged in user is an admin.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.Auth.SignIn(System.Security.Principal.IPrincipal)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.Auth.SignIn(System.String)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.Auth.SignIn(System.String,System.Boolean)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.Auth.SignOut">
            <summary>
            Signout the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.Auth.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.Auth.UserId">
            <summary>
            Get the user id.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.Auth.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="P:ComLib.Authentication.Auth.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="T:ComLib.Queue.QueueProcessor`1">
            <summary>
            Controlls the processing of the notification tasks.
            </summary>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Queue.QueueProcessor`1"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.#ctor(System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Intialize w/ a specific handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.#ctor(System.Int32,System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Intialize w/ a specific handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Enqueue(`0)">
            <summary>
            Add a message to the queue.
            </summary>
            <param name="messageDef"></param>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Dequeue">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.GetStatus">
            <summary>
            Get the state of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.Process(System.Collections.Generic.IList{`0})">
            <summary>
            Processes the specified items to process.
            </summary>
            <param name="itemsToProcess">The items to process.</param>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.DequeueInternal(System.Int32)">
            <summary>
            Dequeues the internal.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.QueueProcessor`1.UpdateState(ComLib.Queue.QueueProcessState,System.Boolean)">
            <summary>
            Updates the state.
            </summary>
            <param name="newState">The new state.</param>
            <param name="performLock">if set to <c>true</c> [perform lock].</param>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.NumberToProcessPerDequeue">
            <summary>
            Gets or sets the number to process per dequeue.
            </summary>
            <value>The number to process per dequeue.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.IsStopped">
            <summary>
            Gets a value indicating whether this instance is stopped.
            </summary>
            <value>
            	<c>true</c> if this instance is stopped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Queue.QueueProcessor`1.IsBusy">
            <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ComLib.Queue.IQueueRepository`1">
            <summary>
            Interface for a persistance queue repository.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Queue.IQueueRepository`1.Save(System.Collections.Generic.IList{`0})">
            <summary>
            Saves the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:ComLib.Queue.IQueueRepository`1.LoadAll">
            <summary>
            Loads all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.IQueueRepository`1.LoadBatch">
            <summary>
            Loads the batch.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ComLib.Patterns.Factory`2._creators">
            <summary>
            Dictionary of creators for a specific key.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.Register(`0,`1)">
            <summary>
            Register a key to implementation.
            </summary>
            <param name="key"></param>
            <param name="result"></param>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.Register(`0,System.Func{`1})">
            <summary>
            Registers the default implementation.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.RegisterDefault(`1)">
            <summary>
            Registers the default implementation.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.RegisterDefault(System.Func{`1})">
            <summary>
            Register default implementation using creator func provided.
            </summary>
            <param name="creator"></param>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.Create(`0)">
            <summary>
            Create an instance of type T using the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Patterns.Factory`2.Create">
            <summary>
            Create default instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Patterns.CompositeLookup`1">
            <summary>
            Category look up class.
            This contains all the categories / subcategories available.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initialzie the lookup
            </summary>
            <param name="allCategories"></param>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.GetByName(System.String,System.String)">
            <summary>
            Get category by parent,child name.
            </summary>
            <param name="categoryName"></param>
            <param name="subCategoryName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.Children(System.Int32)">
            <summary>
            Get children given the parent id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.Initilaize(System.Collections.Generic.IList{`0})">
            <summary>
            Store the categories appropriately.
            </summary>
            <param name="allCategories"></param>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.StoreById(`0)">
            <summary>
            Store by the id.
            [2] = Painting
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.StoreByName(`0)">
            <summary>
            Builds a fully qualified name.
            Parent.Child.GrandChild etc.
            Art.Painting.Watercolor
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:ComLib.Patterns.CompositeLookup`1.BuildKey(System.String,System.String)">
            <summary>
            Build category key.
            </summary>
            <param name="categoryName"></param>
            <param name="subCategoryName"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Patterns.CompositeLookup`1.Item(System.Int32)">
            <summary>
            Returns the category associated with the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Patterns.CompositeLookup`1.Item(System.String)">
            <summary>
            Get by fully qualified name.
            e.g. "Art.Painting.WaterColor"
            </summary>
            <param name="fullyQualifiedName"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Patterns.CompositeLookup`1.RootNodes">
            <summary>
            Returns a readonly collection of the root categories.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.NotificationQueueInMemory">
            <summary>
            Queue to store the notification messages.
            This is the default implementation to store them in memory
            rather than in some persistant storage (e.g. database ).
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationQueueInMemory.#ctor(ComLib.Notifications.NotificationSettings,ComLib.EmailSupport.IEmailService,ComLib.Notifications.NotificationDefinitions)">
            <summary>
            Initialize
            </summary>
            <param name="config"></param>
            <param name="emailService"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationQueueInMemory.Process(System.Collections.Generic.IList{ComLib.EmailSupport.NotificationMessage})">
            <summary>
            Override the process method to handle notification messages.
            </summary>
            <param name="itemsToProcess"></param>
        </member>
        <member name="T:ComLib.Notifications.NotificationItemProcessor">
            <summary>
            Class that actually generates the messages and
            sends them out.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationItemProcessor.#ctor(ComLib.Notifications.NotificationSettings,ComLib.EmailSupport.IEmailService,ComLib.Notifications.NotificationDefinitions)">
            <summary>
            Notification processor.
            </summary>
            <param name="config"></param>
            <param name="emailService"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationItemProcessor.Process(ComLib.EmailSupport.NotificationMessage)">
            <summary>
            Processes the notification message. Either just sends the data or transforms the
            data and then sends it.
            </summary>
            <param name="currentMessage"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationItemProcessor.GetNextId">
            <summary>
            Simply used for generating unique filenames for testing purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Notifications.NotificationItemProcessor.OutputContent(ComLib.EmailSupport.NotificationMessage,System.String)">
            <summary>
            Write the message to file for debugging purposes.
            </summary>
            <param name="message"></param>
            <param name="htmlBody"></param>
        </member>
        <member name="T:ComLib.Parsing.LexSettings">
            <summary>
            Settings for Lex parser.
            </summary>
        </member>
        <member name="F:ComLib.Parsing.LexSettings.QuotesChars">
            <summary>
            Tokens used to enclose other tokens.
            </summary>
        </member>
        <member name="F:ComLib.Parsing.LexSettings.EscapeChar">
            <summary>
            Escape char
            </summary>
        </member>
        <member name="F:ComLib.Parsing.LexSettings.WhiteSpaceChars">
            <summary>
            Chars used as white space.
            </summary>
        </member>
        <member name="F:ComLib.Parsing.LexSettings.EolChars">
            <summary>
            New line tokens.
            </summary>
        </member>
        <member name="T:ComLib.Parsing.LexBase">
            <summary>
            Base class for lexical parsing.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.LexBase.Init(ComLib.Parsing.LexSettings)">
            <summary>
            Initalize using default settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.Parsing.LexBase.ParseText(System.String)">
            <summary>
            Parse text
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexBase.ReadNonQuotedToken(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Read a continuous set of characters until 
            end of text or separater is reached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexBase.ReadQuotedToken">
            <summary>
            Read a quoted set of characters.
            e.g. 'firstname' or "lastname"
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexBase.Expect(System.String)">
            <summary>
            Expect the current char to be the char specified.
            </summary>
            <param name="expectChar"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexBase.AddError(System.String)">
            <summary>
            Add error to list of errors.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:ComLib.Parsing.LexBase.CheckAndThrowErrors">
            <summary>
            Check for errors and throw.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.LexBase.ExcludeNewLinesStored">
            <summary>
            Exclude new lines stored at the end as a result of the parser
            reading the \r\n at the end of line.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.LexBase.Reset(System.String)">
            <summary>
            Reset the state.
            </summary>
            <param name="line"></param>
        </member>
        <member name="T:ComLib.Environments.EnvType">
            <summary>
            Different types of environment.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Dev">
            <summary>
            Development.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Qa">
            <summary>
            Quality assurance.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Uat">
            <summary>
            User acceptance testing.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Prod">
            <summary>
            Production.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.MixedNonProd">
            <summary>
            Mixed environments with no envrionment being production.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.MixedProd">
            <summary>
            Mixed environments with at least one
            environment being production.
            </summary>
        </member>
        <member name="F:ComLib.Environments.EnvType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:ComLib.Environments.Env">
            <summary>
            Class to represent the currently selected environment.
            This is just a provider pattern.
            </summary>
        </member>
        <member name="M:ComLib.Environments.Env.Init(ComLib.Environments.IEnv)">
            <summary>
            Initialize with current environment.
            </summary>
            <param name="environment"></param>
        </member>
        <member name="M:ComLib.Environments.Env.Get(System.String)">
            <summary>
            Get the env entry associated with the name.
            </summary>
            <param name="envName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.Env.Change(System.String)">
            <summary>
            Change the environment set environment name e.g. ("ny.prod,uat,qa,dev").
            </summary>
            <param name="environmentName"></param>
        </member>
        <member name="M:ComLib.Environments.Env.Current_OnEnvironmentChange(System.Object,System.EventArgs)">
            <summary>
            Notifiy environment changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ComLib.Environments.Env.OnChange">
            <summary>
            Event handler for an environment change.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Name">
            <summary>
            Name of current envionment selected during initialization. e.g. "london.prod" or "prod | uat | qa | dev".
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.EnvType">
            <summary>
            The environment type (prod, qa, etc ) of current selected environment
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Inherits">
            <summary>
            Inheritance path of the currently selected environment.
            e.g. prod could inherit from qa->dev.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Inheritance">
            <summary>
            Inheritance list of environments.
            Prod->Qa->Dev
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Selected">
            <summary>
            The current environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.RefPath">
            <summary>
            Get the current reference path. Which could be the 
            paths to the config files.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Available">
            <summary>
            Provides list of names( "prod,uat,qa,dev") of available environments than can be selected by user.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.IsProd">
            <summary>
            Is current env type production.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.IsQa">
            <summary>
            Is current env type Qa
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.IsDev">
            <summary>
            Is current env type development.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.IsUat">
            <summary>
            Is current env type uat.
            </summary>
        </member>
        <member name="P:ComLib.Environments.Env.Count">
            <summary>
            Get the number of available envs.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigItem">
            <summary>
            An entity to represent the config item in a persistant store.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItem.Create``1(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create the config entry.
            </summary>
            <param name="app">Application name.</param>
            <param name="name">Config name</param>
            <param name="section">Section name.</param>
            <param name="key">Key name</param>
            <param name="val">Value</param>
            <param name="valType">ValueType</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigItem.Update(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create the config entry.
            </summary>
            <param name="app">Application name.</param>
            <param name="name">Config name</param>
            <param name="section">Section name.</param>
            <param name="key">Key name</param>
            <param name="val">Value</param>
            <param name="valType">ValueType</param>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.App">
            <summary>
            Application name. 
            To associate config settings from a different application.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.Name">
            <summary>
            Dev.config
            </summary> 
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.Section">
            <summary>
            AppSettings
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.Key">
            <summary>
            PageSize
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.Val">
            <summary>
            15
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigItem.ValType">
            <summary>
             Int | bool | double etc.
            </summary>
        </member>
        <member name="T:ComLib.Configuration.ConfigItemRepository">
            <summary>
            Generic repository for persisting ConfigItem.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection string.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize the rowmapper
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.Create(ComLib.Configuration.ConfigItem)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemRepository.Update(ComLib.Configuration.ConfigItem)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Configuration.ConfigItemRepository.ConfigItemRowMapper">
            <summary>
            RowMapper for ConfigItem.
            </summary>
            <typeparam name="?"></typeparam>
        </member>
        <member name="T:ComLib.Configuration.ConfigItemValidator">
            <summary>
            Validator for ConfigItem
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigItemValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validation method for the entity.
            </summary>
            <param name="target">The target.</param>
            <param name="useTarget">if set to <c>true</c> [use target].</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.Add(`0,`1)">
            <summary>
            Add to key/value for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.ContainsKey(`0)">
            <summary>
            Determine if the key is contain in the forward lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.Remove(`0)">
            <summary>
            Remove the key from the ordered dictionary.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value from the forward lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add to ordered lookup.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.Clear">
            <summary>
            Clears keys/value for bi-directional lookup.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine if the item is in the forward lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the array of key/value pairs for both ordered dictionary.
            TO_DO: This needs to implemented.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.Insert(System.Int32,`0,`1)">
            <summary>
            Insert key/value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.IndexOfKey(`0)">
            <summary>
            Get the index of the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryOrdered`2.RemoveAt(System.Int32)">
            <summary>
            Remove the key/value item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:ComLib.Collections.DictionaryOrdered`2.Keys">
            <summary>
            Get a list of all the keys in the forward lookup.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryOrdered`2.Values">
            <summary>
            Get the collection of values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryOrdered`2.Item(`0)">
            <summary>
            Set the key / value for bi-directional lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryOrdered`2.Count">
            <summary>
            Get number of entries.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryOrdered`2.IsReadOnly">
            <summary>
            Get whether or not this is read-only.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryOrdered`2.Item(System.Int32)">
            <summary>
            Get/set the value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Categories.CategorySettings">
            <summary>
            Settings for the comments module.
            </summary>
        </member>
        <member name="M:ComLib.Categories.CategorySettings.#ctor">
            <summary>
            Initialize the settings.
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.AddCollapseExpand">
            <summary>
            Whether or not the show the add/collapse image for the parent categories.
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.ShowExpandCollapseAll">
            <summary>
            Whether or not the show the expand / collapse all links
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.SuggestCategoryShowLink">
            <summary>
            Whether or not the show the suggest category link
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.SuggestCategoryText">
            <summary>
            The text to display when showing suggest category.
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.SuggestCategoryUrl">
            <summary>
            Url for the suggest category link
            </summary>
        </member>
        <member name="P:ComLib.Categories.CategorySettings.LinkAction">
            <summary>
            Link action: Url , PostBack ,Javascript
            </summary>
        </member>
        <member name="T:ComLib.Authentication.AuthWeb">
            <summary>
            <see cref="T:ComLib.Authentication.IAuth"/> implementation to provide Authentication service using the web based User(principal) object exposed in the context.Current.User object.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.#ctor(System.String)">
            <summary>
            Initialize with the admin role name.
            </summary>
            <param name="adminRoleName"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.#ctor(System.String,System.Func{System.String,System.Security.Principal.IPrincipal})">
            <summary>
            Initialize with the admin role name.
            </summary>
            <param name="adminRoleName"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.GetUser``1(System.String)">
            <summary>
            Get the user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.IsAuthenticated">
            <summary>
            Determine if the current user is authenticated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.IsAdmin">
            <summary>
            Determine if currently logged in user is an administrator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.IsUserInRoles(System.String)">
            <summary>
            Is User in the selected roles.
            </summary>
            <param name="rolesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.SignIn(System.Security.Principal.IPrincipal)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.SignIn(System.String)">
            <summary>
            Sign the user in.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.SignIn(System.String,System.Boolean)">
            <summary>
            Sign the user in via username.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ComLib.Authentication.AuthWeb.SignOut">
            <summary>
            Signout the user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWeb.User">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWeb.UserName">
            <summary>
            The name of the current user.
            </summary>
        </member>
        <member name="P:ComLib.Authentication.AuthWeb.UserShortName">
            <summary>
            Provides just the username if the username contains
            the domain.
            e.g. returns "john" if username is "mydomain\john"
            </summary>
        </member>
        <member name="T:ComLib.Web.WebUtils">
            <summary>
            Summary description for WebUtils
            </summary>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetFileContentsRemote(System.String)">
            <summary>
            Get a remote web file.
            </summary>
            <param name="file">The remote URL</param>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetFileContentsLocal(System.String)">
            <summary>
            Retrieve local file contents.
            </summary>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetContentOfFile(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the content of an upload file as a string.
            </summary>
            <param name="inputFile"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetContentOfFileAsBytes(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the content of an upload file as a string.
            </summary>
            <param name="inputFile"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetFileExtension(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Gets the file extension of the file.
            </summary>
            <param name="inputFile"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.WebUtils.GetFileExtensionAsFormat(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the file extension as a image format.
            </summary>
            <param name="inputFile"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.WebSecurityUtils">
            <summary>
            Security util.
            </summary>
        </member>
        <member name="M:ComLib.Web.WebSecurityUtils.IsSelfRequest(System.Web.HttpContext,System.String@,System.String)">
            <summary>
            Determines if the request being made is from the same host.
            Otherwise, most likely someone is leeching the image.
            </summary>
            <param name="requestDeniedImagePath">"~/images/backoff.gif"</param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.UrlSeoUtils">
            <summary>
            Url optimizer utility class.
            </summary>
        </member>
        <member name="F:ComLib.Web.UrlSeoUtils.InvalidSeoUrlChars">
            <summary>
            String containing each invalid character.
            </summary>
        </member>
        <member name="F:ComLib.Web.UrlSeoUtils._invalidChars">
            <summary>
            Map of invalid characters that should not appear in 
            an SEO optimized url.
            </summary>
        </member>
        <member name="M:ComLib.Web.UrlSeoUtils.#cctor">
            <summary>
            Initialize the list of mappings.
            </summary>
        </member>
        <member name="M:ComLib.Web.UrlSeoUtils.BuildValidUrlUsingRegex(System.String)">
            <summary>
            Same as BuildValidUrl but uses RegEx and is much, much slower.
            </summary>
            <param name="title"></param>
            <param name="convertToLowercase"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.UrlSeoUtils.BuildValidUrl(System.String)">
            <summary>
            Generates an SEO optimized url.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.ValidationEvent">
            <summary>
            Encapsulate all the various inputs for performing validation on an object.
            </summary>
        </member>
        <member name="F:ComLib.ValidationEvent.Target">
            <summary>
            The object to validate.
            </summary>
        </member>
        <member name="F:ComLib.ValidationEvent.Results">
            <summary>
            The results to store validation errors.
            </summary>
        </member>
        <member name="F:ComLib.ValidationEvent.Context">
            <summary>
            Other contextual data that could be supplied.
            </summary>
        </member>
        <member name="M:ComLib.ValidationEvent.#ctor(System.Object,ComLib.IValidationResults,System.Object)">
            <summary>
            Initialize data.
            </summary>
            <param name="target"></param>
            <param name="useTarget"></param>
            <param name="results"></param>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.ValidationEvent.#ctor(System.Object,ComLib.IValidationResults)">
            <summary>
            Initialize data.
            </summary>
            <param name="target"></param>
            <param name="useTarget"></param>
            <param name="results"></param>
            <param name="context"></param>
        </member>
        <member name="T:ComLib.IValidationResults">
            <summary>
            Interface for validation results.
            </summary>
        </member>
        <member name="T:ComLib.ValidationResults">
            <summary> 
            Stores validation results. 
            </summary> 
            <remarks>NOTE : Errors could be a read-only collection. 
            </remarks> 
        </member>
        <member name="F:ComLib.ValidationResults.Empty">
            <summary>
            Null object.
            </summary>
        </member>
        <member name="P:ComLib.ValidationResults.IsValid">
            <summary> 
            Passed validation ? 
            </summary> 
        </member>
        <member name="M:ComLib.EnumerableHelper.ForEachByCols(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Calls the action by supplying the start and end index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemCount"></param>
            <param name="cols"></param>
            <param name="action"></param>
        </member>
        <member name="T:ComLib.Types.DateParseResult">
            <summary>
            Time parse result.
            </summary>
        </member>
        <member name="M:ComLib.Types.DateParseResult.#ctor(System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Constructor to initialize the results
            </summary>
            <param name="valid"></param>
            <param name="error"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="T:ComLib.Types.DateParser">
            <summary>
            Parses the dates.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ComLib.Types.DateParser.ErrorStartDateGreaterThanEnd" -->
        <member name="M:ComLib.Types.DateParser.ParseDateRange(System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Parses a string representing 2 dates.
            The dates must be separated by the word "to".
            </summary>
            <param name="val"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.DateParser.ParseTPlusMinusX(System.String)">
            <summary>
            Handle parsing of dates with T-1, T+2 etc.
            </summary>
            <param name="dateStr"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.DateParser.ParseTPlusMinusX(System.String,System.DateTime)">
            <summary>
            Handle parsing of dates with T-1, T+2 etc.
            </summary>
            <param name="dateStr"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="F:ComLib.Scaffolding.ScaffoldContext.ParentControlId">
            <summary>
            The id of the parent control that will contain the autogenerated
            UI controls representing the data for any Business Entity.
            </summary>
        </member>
        <member name="F:ComLib.Scaffolding.ScaffoldContext.EntityName">
            <summary>
            The fully-qualified name of the business entity for which to build
            a UI for.
            </summary>
        </member>
        <member name="F:ComLib.Scaffolding.ScaffoldContext.EntityId">
            <summary>
            The id of the entity to update/delete.
            </summary>
        </member>
        <member name="F:ComLib.Scaffolding.ScaffoldContext.PropValues">
            <summary>
            List of key/value pairs corresponding the properties on the Entity.
            </summary>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldContext.#ctor(ComLib.IValidationResults,ComLib.IErrors,System.String,System.String,System.String)">
            <summary>
            Initialize the scaffold context.
            </summary>
            <param name="errors"></param>
            <param name="messages"></param>
            <param name="entityName"></param>
            <param name="parentControlId"></param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldUtils.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize with the User-Interface parameters.
            </summary>
            <param name="uiParams"></param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldUtils.BuildEntityUITable(System.String,System.String,System.Boolean,System.Object,System.Collections.Specialized.StringDictionary)">
            <summary> 
            Create a table containing : 
            1. Name of the property 
            2. Input control to have user put in value for the property 
            3. Type of the property. 
            </summary> 
            <param name="entityType"></param> 
            <param name="clientId"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldUtils.GetValuesFromUI(System.String,System.String,System.Collections.Specialized.StringDictionary)">
            <summary>
            Get the business entityies properties values from the dynamic UI.
            </summary>
            <param name="entityName"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldUtils.GetExistingValue(System.String,System.String)">
            <summary> 
            Gets the value of the property that was inputted by the user on 
            the client side. 
            </summary> 
            <param name="clientId"></param> 
            <param name="propertyName"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldUtils.GetControlId(System.String,System.String)">
            <summary> 
            Get the fully-qualified id of the textbox control used to store the value 
            of the property. 
            </summary> 
            <param name="clientId"></param> 
            <param name="propertyName"></param> 
            <returns></returns> 
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldUtils.BuildControlId(System.Reflection.PropertyInfo)">
            <summary>
            The id of the HTML control that will contain the value of the property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldUtils.CreatePropertyRow(System.Reflection.PropertyInfo,System.String,System.Boolean,System.Object)">
            <summary>
            Creates an HTML table row that contains controls to describe and add/edit the value of the property.
            e.g.
            FirstName:  TextBox(FirstName Value)    String
            </summary>
            <param name="property"></param>
            <param name="cliendId"></param>
            <param name="usePropertyValue"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.LocationSupport.LocationParser">
            <summary>
            Parser for location data.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.ParseCity(ComLib.LocationSupport.CityLookUp,ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.String)">
            <summary>
            Parses the city
            </summary>
            <param name="cityLookUp">The city look up component</param>
            <param name="stateLookUp">The state look up component</param>
            <param name="countryLookUp">The country look up component</param>        
            <param name="cityname">The city name.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.ParseState(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.String)">
            <summary>
            Parses the state.
            </summary>
            <param name="stateLookUp">The state look up component</param>
            <param name="countryLookUp">The country look up component</param>        
            <param name="stateFullNameOrAbbr"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.ParseCountry(ComLib.LocationSupport.CountryLookUp,System.String)">
            <summary>
            Parse the country.
            </summary>
            <param name="countryLookUp">The country lookup component</param>
            <param name="countryText">The text representing a country</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.ParseCityWithStateOrCountry(ComLib.LocationSupport.CityLookUp,ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.String)">
            <summary>
            Parse 'city','state' | 'country'.
            e.g. Georgetown, Texas or GeorgeTown, Guyana
            </summary>
            <remarks>The area after the comma can be either the state or country.
            We store a list of valid states/regions, and countries</remarks>
            <param name="cityLookUp">The city look up component</param>
            <param name="stateLookUp">The state look up component</param>
            <param name="countryLookUp">The country look up component</param>
            <param name="cityAndState">The city/state/country names.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.IsCityMatchedWithStateCountry(System.String,ComLib.LocationSupport.City,ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,ComLib.LocationSupport.LocationLookUpResult@)">
            <summary>
            Given a user entered text contain a city and (state or country) combination,
            this method checks that the state or country entered by the user matches 
            the state or country of the city that was matched.
            </summary>
            <param name="stateOrCountryTrimmed">The state or country entered by the user.</param>
            <param name="city">The city that was found in our system, entered by the user.</param>
            <param name="stateLookUp">The state lookup component.</param>
            <param name="countryLookUp">The country lookup component.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationParser.Build(ComLib.LocationSupport.LocationLookUpType,System.Boolean,System.String,ComLib.LocationSupport.Country,ComLib.LocationSupport.State,ComLib.LocationSupport.City)">
            <summary>
            Builds up the LocationLookupResult based on the location components passed in.
            City, state, country can be null.
            </summary>
            <param name="lookupType">The location lookup type</param>
            <param name="isValid">Whether or not the location was valid.</param>
            <param name="message">Error message if not valid.</param>
            <param name="country">Optional - The country to be used for setting the id and name of the country.</param>
            <param name="state">Optional - The state to be used for setting the id and name of the state.</param>
            <param name="city">Optional - The city to be used for setting the id and name of the city</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdate">
            <summary>
            StatusUpdate entity.
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Computer">
            <summary>
            Get/Set Computer
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.ExecutionUser">
            <summary>
            Get/Set ExecutionUser
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.BusinessDate">
            <summary>
            Get/Set BusinessDate
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.BatchName">
            <summary>
            Get/Set BatchName
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.BatchId">
            <summary>
            Get/Set BatchId
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.BatchTime">
            <summary>
            Get/Set BatchTime
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Task">
            <summary>
            Get/Set Task
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Status">
            <summary>
            Get/Set Status
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.StartTime">
            <summary>
            Get/Set StartTime
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.EndTime">
            <summary>
            Get/Set EndTime
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Ref">
            <summary>
            Get/Set Ref
            </summary>
        </member>
        <member name="P:ComLib.StatusUpdater.StatusUpdate.Comment">
            <summary>
            Get/Set Comment
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositoryLinq2Sql`1">
            <summary>
            Repository pattern providing CRUD( Create / Retrieve / Update / Delete ) and other methods
            using Linq 2 Sql.
            
            NOTES:
            1. This is slightly Hybrid version of plain dynamic sql, Linq2Sql, and stored procs
            2. This requires a RowMapper and stored procedures if using the GetByFilter and GetRecent methods
            3. This uses dynamic sql for the Find methods
            4. Linq 2 Sql is used for Create, Update, Get, Delete methods.
            5. Linq 2 Sql itself is a limited solution with the following restrictions:
            
                -a. Can only be used for SQL Server
                -b. Only supports a 1-1 object to table mapping.
                -c. The Update( T entity ) method is a workaround to the inability to attach POCO's( detached entities ) to a different DataContext.
               
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize
            </summary>
            <param name="connectionInfo"></param>
            <param name="helper"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize
            </summary>
            <param name="connectionInfo"></param>
            <param name="helper"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Init(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initialize
            </summary>
            <param name="connectionInfo"></param>
            <param name="helper"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Create(`0)">
            <summary>
            Create the entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create the entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Update(`0)">
            <summary>
            Update the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Get(System.Int32)">
            <summary>
            Get the entity by the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.GetAll">
            <summary>
            Get all the entities in the database as a List.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Delete(System.Int32)">
            <summary>
            Delete the entity from the repository
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get page of records using filter.
            </summary>
            <param name="filter"></param>
            <param name="table"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get recents posts by page
            </summary>
            <param name="table"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Execute(System.Action{System.Data.Linq.DataContext,System.Data.Linq.Table{`0}})">
            <summary>
            Execute the executor providing it the datacontext and table.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.Execute(System.Action{System.Data.Linq.DataContext})">
            <summary>
            Execute the executor providing it the datacontext only.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryLinq2Sql`1.CopyValues(`0,`0)">
            <summary>
            Copies all the mapped column property values from the updatedEntity to the original
            </summary>
            <param name="updatedEntity"></param>
            <param name="original"></param>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.#ctor(ComLib.Data.IQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Data.QueryBuilderSql"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.Build">
            <summary>
            Builds the full markup for the criteria provided.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.Build(System.String)">
            <summary>
            Builds the full markup fro the criteria provided using the from source supplied.
            </summary>
            <param name="from">From.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildSelect">
            <summary>
            Builds only the "select fields" markup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildSelect(System.Boolean)">
            <summary>
            Builds only the select fields marketup with conditional flag indicating whether or not
            to include the markup's select statement.
            </summary>
            <param name="includeSelectStatement">if set to <c>true</c> [include select statement].</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildLimit">
            <summary>
            Builds the limit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildConditions">
            <summary>
            Buildses the conditions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.EncloseField(System.String)">
            <summary>
            Whether or not to enclose fields.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.HandleEncloseField(System.String)">
            <summary>
            Whether or not to enclose fields.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildConditions(System.Boolean)">
            <summary>
            Builds the conditions.
            </summary>
            <param name="includeWhere">if set to <c>true</c> [include where].</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildOrderBy">
            <summary>
            Builds the order by.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.QueryBuilderSql.BuildOrderBy(System.Boolean)">
            <summary>
            Builds the order by.
            </summary>
            <param name="includeOrderBy">if set to <c>true</c> [include order by].</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Data.QueryBuilderSql.Criteria">
            <summary>
            The criteria API.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComLib.Parsing.LexList" -->
        <member name="M:ComLib.Parsing.LexList.Parse(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexList.ParseList(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexList.ParseTable(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexList.Parse(System.String,ComLib.Parsing.LexListSettings)">
            <summary>
            Parse supplied text using supplied settings.
            </summary>
            <param name="line"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexList.#ctor">
            <summary>
            Create using default settings.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.LexList.#ctor(ComLib.Parsing.LexListSettings)">
            <summary>
            Create with supplied settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.Parsing.LexList.ParseLines(System.String)">
            <summary>
            Parse 
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexList.ParseQuotedItem(ComLib.Parsing.LexListSettings)">
            <summary>
            Parse a quoted item. e.g. "batman"
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.Parsing.LexList.CheckAndConsumeWhiteSpace">
            <summary>
            Check and consume whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexList.CheckAndHandleNewLine(ComLib.Parsing.LexListSettings)">
            <summary>
            Check for and handle new line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexList.HasMore">
            <summary>
            Has more text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexList.ParseNonQuotedItem(ComLib.Parsing.LexListSettings)">
            <summary>
            Parse a non-quoted item e.g. 123 as opposed to "123"
            </summary>
        </member>
        <member name="T:ComLib.Parsing.LexListSettings">
            <summary>
            Parse settings for the Lexical List parser.
            </summary>
        </member>
        <member name="F:ComLib.Parsing.LexListSettings.TrimWhiteSpace">
            <summary>
            Indicates whether or not to trim the white space if the
            separator is not a whitespace char. e.g. if "," trim white space.
            </summary>
        </member>
        <member name="F:ComLib.Parsing.LexListSettings.MultipleRecordsUsingNewLine">
            <summary>
            Flag indicating whether or not to handle multiple lines as a single record.
            Otherwise, new lines indicate end of record.
            </summary>
        </member>
        <member name="T:ComLib.Models.ModelIterator">
            <summary>
            Class to iterate over models to create and provide callbacks at key points to 
            handle certain events related to model code generation.
            </summary>
        </member>
        <member name="F:ComLib.Models.ModelIterator.FilterOnModel">
            <summary>
            Predicate to apply to model before processing it.
            </summary>
        </member>
        <member name="F:ComLib.Models.ModelIterator.FilterOnProperty">
            <summary>
            Property filter.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelIterator.Process(ComLib.Models.ModelContext,ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model},System.Action{ComLib.Models.Model},System.Action{ComLib.Models.Model,ComLib.Models.Include},System.Action{ComLib.Models.Model,ComLib.Models.Composition})">
            <summary>
            Process the model using the callback lamdas.
            </summary>
            <param name="ctx">The full model context.</param>
            <param name="model">The model to process.</param>
            <param name="inheritanceChain"></param>
            <param name="inheritanceAction"></param>
            <param name="includeAction"></param>
            <param name="compositionAction"></param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.Process(ComLib.Models.ModelContext)">
            <summary>
            Process all the models, which pass the filter, one at a time.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.Process(ComLib.Models.ModelContext,System.String)">
            <summary>
            Process the model with the specified name.
            </summary>
            <param name="ctx"></param>
            <param name="modelName"></param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessModel(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Proces given model
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessModelParts(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Build the properties.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessProperties(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Process all the properties of the model.
            </summary>
            <param name="ctx"></param>
            <param name="model"></param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessCompositions(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Process all the compositions of the model.
            </summary>
            <param name="ctx"></param>
            <param name="model"></param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.ProcessIncludes(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Process all the includes of the model.
            </summary>
            <param name="ctx"></param>
            <param name="model"></param>
        </member>
        <member name="M:ComLib.Models.ModelIterator.GetProperties(ComLib.Models.Model)">
            <summary>
            Get all the applicable properties after running the filter.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnModelProcess">
            <summary>
            Event to fire on model processing.
            </summary>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnModelProcessCompleted">
            <summary>
            Event to fire when a model has been processed.
            </summary>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnPropertyProcess">
            <summary>
            Event to fire when property should be processed for a specific model.
            </summary>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnCompositeProcess">
            <summary>
            Event to fire when a composite model should be processed.
            </summary>
        </member>
        <member name="E:ComLib.Models.ModelIterator.OnIncludeProcess">
            <summary>
            Event to fire when a included model should be processed.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.IsValidStateCountryRelation(ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp,System.Int32,System.Int32)">
            <summary>
            Checks that the state belongs to the country.
            </summary>
            <param name="stateLookUp"></param>
            <param name="countryLookUp"></param>
            <param name="stateId"></param>
            <param name="countryId"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyCity(ComLib.LocationSupport.Address,ComLib.LocationSupport.CityLookUp,ComLib.LocationSupport.StateLookUp,ComLib.LocationSupport.CountryLookUp)">
            <summary>
            Applies the city id to the address if the city is listed in the system
            and has a matching state and country id compared to what was supplied.
            </summary>
            <param name="address"></param>
            <param name="cityLookup"></param>
            <param name="stateLookup"></param>
            <param name="countryLookup"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyState(ComLib.LocationSupport.Address,ComLib.LocationSupport.StateLookUp,System.Collections.Generic.IList{System.String})">
            <summary>
            Applies the city id to the address if the city is listed in the system
            and has a matching state and country id compared to what was supplied.
            </summary>
            <param name="address"></param>
            <param name="stateLookup"></param>
            <param name="countryLookup"></param>
            <param name="errors">list of errors to populate if any validation fails.</param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationHelper.ApplyCountry(ComLib.LocationSupport.Address,ComLib.LocationSupport.CountryLookUp,System.Collections.Generic.IList{System.String})">
            <summary>
            Applies the city id to the address if the city is listed in the system
            and has a matching state and country id compared to what was supplied.
            </summary>
            <param name="address"></param>
            <param name="stateLookup"></param>
            <param name="countryLookup"></param>
            <param name="errors">list of errors to populate if any validation fails.</param>
        </member>
        <member name="T:ComLib.LocationSupport.CityLookUp">
            <summary>
            Class to provide fast lookup for cities.
            The base class provides lookup by 
            1. City id.
            2. City name.
            
            This class extends the lookup by also being able to lookup
            a city by country id.
            </summary>
            <remarks>
            Instead of storing another set of indexes for cityname, countryId
            This only stores the cityname, countryId
            for duplicate city names.
            </remarks>
        </member>
        <member name="T:ComLib.LocationSupport.LocationLookUpWithCountry`1">
            <summary>
            Class to provide fast lookup for location components (cities and states)
            that have a country id.
            The base class provides lookup by 
            1. id.
            2. name.
            3. name and countryid.
            
            This class extends the lookup by also being able to lookup
            a city by country id.
            </summary>
            <remarks>
            Instead of storing another set of indexes for cityname, countryId
            This only stores the cityname, countryId
            for duplicate city names.
            </remarks>
        </member>
        <member name="T:ComLib.Entities.LookupMulti`1">
            <summary>
            Used to lookup items by both an int and string.
            This is useful when looking up item by Id and Name for example.
            This is the case for some entities such as City/Country.
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.ContainsKey(System.Int32)">
            <summary>
            Contains the key.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.ContainsKey(System.String)">
            <summary>
            Flag to indicate if the key is there.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.LookupMulti`1.Init(System.Collections.Generic.IList{`0},System.Func{`0,System.Boolean},System.Func{`0,System.Int32},System.Func{`0,System.String},System.Action{`0,System.Int32,System.String})">
            <summary>
            Initialize the lookups by using the 2 id values associated w/ the property names supplied.
            </summary>
            <param name="items">The items to store.</param>
            <param name="predicate">The condition to check to see if it's ok to add a specific item.</param>
            <param name="id1Getter">The lamda to get the int id.</param>
            <param name="strId2Getter">The lamda to get the strin id.</param>
            <param name="callback">Callback to notify calle that item has been added.</param>
        </member>
        <member name="P:ComLib.Entities.LookupMulti`1.Lookup1">
            <summary>
            Get the first lookup.
            </summary>
        </member>
        <member name="P:ComLib.Entities.LookupMulti`1.Lookup2">
            <summary>
            Get the second lookup
            </summary>
        </member>
        <member name="P:ComLib.Entities.LookupMulti`1.Item(System.Int32)">
            <summary>
            Returns the location item given the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Entities.LookupMulti`1.Item(System.String)">
            <summary>
            Returns the location item given the full name ("New York") or abbr ( "NY" )
            </summary>
            <param name="abbreviationOrName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpWithCountry`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructor
            </summary>
            <param name="allStates"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpWithCountry`1.Init(System.Collections.Generic.IList{`0},System.Func{`0,System.Boolean},System.Func{`0,System.Int32},System.Func{`0,System.String},System.Action{`0,System.Int32,System.String})">
            <summary>
            Initialize the lookup by :
            1. searching by id
            2. searching by name
            3. searching by name and countryid.
            </summary>
            <param name="allItems"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationLookUpWithCountry`1.FindByCountry(System.String,System.Int32)">
            <summary>
            Finds the city based on the country id.
            This is because there can be two countries with the same city name.
            e.g. City, Country
                 1. GeorgeTown, USA
                 2. GeorgeTown, Guyana
            </summary>
            <param name="name"></param>
            <param name="countryId"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.LocationSupport.LocationLookUpWithCountry`1.Item(System.String)">
            <summary>
            Allow lookup by both the full state name and it's abbreviation.
            eg. New York or "NY"
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.CityLookUp.#ctor(System.Collections.Generic.IList{ComLib.LocationSupport.City})">
            <summary>
            Constructor
            </summary>
            <param name="allStates"></param>
        </member>
        <member name="T:ComLib.LocationSupport.StateLookUp">
            <summary>
            Class to lookup the states
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.StateLookUp.#ctor(System.Collections.Generic.IList{ComLib.LocationSupport.State})">
            <summary>
            Constructor
            </summary>
            <param name="allStates"></param>
        </member>
        <member name="T:ComLib.LocationSupport.CountryLookUp">
            <summary>
            Lookup countries by name or id.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.CountryLookUp.#ctor(System.Collections.Generic.IList{ComLib.LocationSupport.Country})">
            <summary>
            Initialize the lookup
            </summary>
            <param name="countries"></param>
        </member>
        <member name="T:ComLib.IO.FileSearcher">
            <summary>
            Search for directories and files using a pattern.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileSearcher.#ctor(System.Action{System.IO.FileInfo},System.Action{System.IO.DirectoryInfo},System.String,System.Boolean)">
            <summary>
            Initialize with file handler
            </summary>
            <param name="directoryHandler">Handler for each directory.</param>
            <param name="fileHandler">Handler for each file.</param>
            <param name="handleFiles">Flag indicating to handle files.</param>
            <param name="pattern">Search pattern for directories files.
            e.g. **/**.</param>
        </member>
        <member name="M:ComLib.IO.FileSearcher.Init">
            <summary>
            Initialize directory and file pattern.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileSearcher.Search(System.IO.DirectoryInfo)">
            <summary>
            Search directory for directories/files using pattern.
            </summary>
            <param name="startDir"></param>
        </member>
        <member name="M:ComLib.IO.FileSearcher.SearchFiles(System.IO.DirectoryInfo)">
            <summary>
            Search all the files.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="T:ComLib.Extensions.ListExtensions">
            <summary>
            Extension methods for dictionaries.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.ListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            AddRange of items of same type to IList 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="itemsToAdd"></param>
        </member>
        <member name="M:ComLib.Extensions.ListExtensions.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Is empty collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Environments.EnvDef">
            <summary>
            Environment service.
            </summary>
        </member>
        <member name="M:ComLib.Environments.IEnv.GetAll">
            <summary>
            Get a readonly collection of all the environments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.IEnv.Get(System.String)">
            <summary>
            Get the environment item associated with the name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.IEnv.Get(System.Int32)">
            <summary>
            Get the environment item at the specified index.
            </summary>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.IEnv.Change(System.String)">
            <summary>
            Change to the new environment.
            </summary>
            <param name="envName"></param>
        </member>
        <member name="P:ComLib.Environments.IEnv.Name">
            <summary>
            Name of the currently selected environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.EnvType">
            <summary>
            Environment type of the current selected env.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Selected">
            <summary>
            Currently selected environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.IsDev">
            <summary>
            Is dev
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.IsProd">
            <summary>
            Is prod.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.IsQa">
            <summary>
            Is Qa
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.IsUat">
            <summary>
            Is uat environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Available">
            <summary>
            All available environments names.
            e.g. "ny.prod,london.prod,uat,qa,dev"
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Inheritance">
            <summary>
            List of environments that this inherits from.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Inherits">
            <summary>
            Get the inheritance path, e.g. prod;qa;dev.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.RefPath">
            <summary>
            Reference paths. e.g. config files.
            </summary>
        </member>
        <member name="P:ComLib.Environments.IEnv.Count">
            <summary>
            Get the number of various available environments. 
            </summary>
        </member>
        <member name="E:ComLib.Environments.IEnv.OnEnvironmentChange">
            <summary>
            Handler for environment change notifications.
            </summary>
        </member>
        <member name="M:ComLib.Environments.EnvDef.#ctor(System.String,System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Initializes this environment definition with the 
            collection of the environments(Prod, Qa, Dev, etc )
            and the selected environment ( Qa )
            </summary>
            <param name="ctx"></param>
            <param name="selectedEnvironment"></param>
        </member>
        <member name="M:ComLib.Environments.EnvDef.Get(System.String)">
            <summary>
            Get the env entry associated with the name.
            </summary>
            <param name="envName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvDef.Get(System.Int32)">
            <summary>
            Get the env entry associated with the name.
            </summary>
            <param name="envName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvDef.GetAll">
            <summary>
            Get all the environments that are part of the EnvironmentContext
            for this definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvDef.Init(System.String,System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Initialize with list of available environments and the currently selected one.
            </summary>
            <param name="available"></param>
            <param name="selected"></param>
        </member>
        <member name="M:ComLib.Environments.EnvDef.Change(System.String)">
            <summary>
            Set the current environment.
            </summary>
            <param name="envName"></param>
        </member>
        <member name="E:ComLib.Environments.EnvDef.OnEnvironmentChange">
            <summary>
            Event handler when the active environment changes ( e.g. from Prod to Qa.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.EnvType">
            <summary>
            Return the current environment type.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Selected">
            <summary>
            The Top most environment in the inheritance chain ).
            E.g. If Prod inherits from Qa, Qa inherits from Dev
            This is the selected environment among Prod, Qa, Dev.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.IsProd">
            <summary>
            Is production.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.IsQa">
            <summary>
            Is Qa
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.IsDev">
            <summary>
            Is development.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.IsUat">
            <summary>
            Is uat.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Count">
            <summary>
            Get the number of available envs.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Inheritance">
            <summary>
            List of the inherited environments that make up this environment.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Inherits">
            <summary>
            Get the inheritance path, e.g. prod;qa;dev.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.RefPath">
            <summary>
            Get the reference path.
            </summary>
        </member>
        <member name="P:ComLib.Environments.EnvDef.Available">
            <summary>
            Provides list of names of available environments than can be selected by user.
            </summary>
        </member>
        <member name="T:ComLib.Entities.EntityRegistration">
            <summary>
            class used to register the creation of the components of 
            the domain model.
            </summary>
            <remarks>
            NOTE: Currently, the entity registration and creation works using
            an IocContainer.
            </remarks>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.#cctor">
            <summary>
            Default provider to Ioc
            </summary>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register(ComLib.Entities.EntityRegistrationContext)">
            <summary>
            Registers the specified CTX for creating the components
            necessary for the DomainModel ActiveRecord.
            </summary>
            <param name="ctx">The CTX.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(ComLib.Entities.IEntityService{``0},System.Boolean)">
            <summary>
            Register a singleton service/repository for the entity specified by T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="configureRepository"></param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(ComLib.Entities.IRepository{``0},System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(ComLib.Entities.IRepository{``0},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(System.Func{ComLib.Entities.IRepository{``0}},System.Boolean)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(System.Func{ComLib.Entities.IRepository{``0}},System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(System.Func{ComLib.Entities.IRepository{``0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,ComLib.Entities.IEntityResources,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository for the model T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator">The validator creator.</param>
            <param name="settings">The settings.</param>
            <param name="resources">The resources.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connId">The conn id.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register``1(System.Func{ComLib.Entities.IEntityService{``0}},System.Func{ComLib.Entities.IRepository{``0}},System.Func{ComLib.Entities.IEntityValidator},ComLib.Entities.IEntitySettings,ComLib.Entities.IEntityResources,System.Boolean,System.String)">
            <summary>
            Initialize the service, repository creators.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceCreator">The service creator.</param>
            <param name="repoCreator">The repository creator.</param>
            <param name="validatorCreator">The validator creator.</param>
            <param name="settings">The settings.</param>
            <param name="resources">The resources.</param>
            <param name="configureRepository">Whether or not to configure the reposiory.</param>
            <param name="connectionId">The connection id.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register(System.Type,System.Func{System.Object},System.Func{System.Object})">
            <summary>
            Registers the specified entity type to wire up ActiveRecord functionality.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceCreator">The service creator.</param>
            <param name="repositoryCreator">The repository creator.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.Register(System.Type,System.Func{System.Object})">
            <summary>
            Registers the specified entity type to wire up ActiveRecord functionality.
            </summary>
            <param name="ctx">The CTX.</param>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.ContainsEntity(System.Type)">
            <summary>
            Determine if the entity specified by the type is registered
            for being managable.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.ContainsEntity(System.String)">
            <summary>
            Determine if the entity specified by the type is registered
            for being managable.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetManagableEntities">
            <summary>
            Returns a list of strings representing the names of the 
            managable entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetRegistrationContext(System.String)">
            <summary>
            Get the registration context for the entity full name.
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetService``1">
            <summary>
            Get the Domain service associated with the model.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetRepository``1">
            <summary>
            Get repository with the specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetValidator``1">
            <summary>
            Get repository with the specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetSettings``1">
            <summary>
            Get repository with the specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetContext``1">
            <summary>
            Get context object associated with the service of the specified type.
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetContext``1(System.Int32)">
            <summary>
            Get context with id set on the context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetContext``1(ComLib.Entities.IEntity)">
            <summary>
            Get context with the entity set on the context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetService(System.String)">
            <summary>
            Get the entity Service(supporting CRUD operations).
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetRepository(System.String)">
            <summary>
            Get instance of entity repository.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetValidator(System.String)">
            <summary>
            Get instance of entity validator.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetValidator(System.Type)">
            <summary>
            Get instance of entity validator.
            </summary>
            <param name="typeFullName">typeof(T)</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetSettings(System.String)">
            <summary>
            Get instance of entity settings.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetContext(System.String)">
            <summary>
            Get instance of entity context.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.EntityRegistration.GetEntity(System.String)">
            <summary>
            Get instance of entity.
            </summary>
            <param name="typeFullName">typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EmailSupport.EmailHelper.GetSettings(ComLib.Configuration.IConfigSource,System.String)">
            <summary>
            Create the email service settings from the configuration source provided.
            </summary>
            <param name="config">The Configuration source.</param>
            <param name="emailServiceSectionName">The name of the section in the config source
            containing the email service settings.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Load(System.String,System.Boolean)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="parseHeaders">Whether or not the csv text has headers.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Load(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <param name="delimeter">Dellimeter to use for separate values.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.CanLoad(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Whether or not the csv file can be loaded. 
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <param name="parseMap">Whether or not to parse the data as a list of dictionaries.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.LoadText(System.String,System.Boolean)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.LoadText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.LoadText(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Parse the csv text.
            </summary>
            <param name="text">The csv formatted text string.</param>
            <param name="hasHeaders">Whether or not the csv text has headers.</param>
            <param name="isReadOnly">Whether or not to make the parsed doc readonly.</param>
            <param name="delimeter">Dellimeter to use for separate values.</param>
            <param name="quote">Quote character for enclosed strings. single(') or double(")</param>
            <returns>A CsvDoc</returns>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Write(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.Boolean)">
            <summary>
            Writes csv data to the file using the settings provided.
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Write(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.Boolean,System.String)">
            <summary>
            Writes csv data to the file using the settings provided.
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Write(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes csv data to the file using the settings provided.
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
            <param name="columns">The header columns.</param>
        </member>
        <member name="M:ComLib.CsvParse.Csv.Write(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Writes csv data to the file using the settings provided.
            </summary>
            <param name="fileName">The file name to write the csv data to.</param>
            <param name="data">The csv data.</param>
            <param name="delimeter">The delimeter to use.</param>
            <param name="columns">The header columns.</param>
            <param name="firstRowInDataAreColumns">First Row in data are columns.</param>
            <param name="quoteAll">Whether or not to quote all the values.</param>
            <param name="quoteChar">The quote char to use to enclose values.</param>
            <param name="newLine">New Line to use</param>
            <param name="append">Whether or not to append to file.</param>
        </member>
        <member name="T:ComLib.Cryptography.CryptographyUtils">
            <summary>
            Simple Cryptographic Services
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.Encrypt(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Generates a cryptographic Hash Key for the provided text data.
            Basically a digital fingerprint
            </summary>
            <param name="dataToHash">text to hash</param>
            <param name="hashAlgorithm">e.g. new MD5CryptoServiceProvider();</param>
            <returns>Unique hash representing string</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.IsHashMatch(System.Security.Cryptography.HashAlgorithm,System.String,System.String)">
            <summary>
            Generates a cryptographic Hash Key for the provided text data.
            Basically a digital fingerprint
            </summary>
            <param name="hashAlgorithm">e.g. new MD5CryptoServiceProvider();</param>
            <param name="dataToHash">text to hash</param>
            <returns>Unique hash representing string</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>
            Encrypts text with Triple DES encryption using the supplied key
            </summary>
            <param name="plaintext">The text to encrypt</param>
            <param name="key">Key to use for encryption</param>
            <returns>The encrypted string represented as base 64 text</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>
            Decrypts supplied Triple DES encrypted text using the supplied key
            </summary>
            <param name="algorithm">The algorithm to use for decryption.</param>
            <param name="base64Text">Triple DES encrypted base64 text</param>
            <param name="key">Decryption Key</param>
            <returns>The decrypted string</returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.CreateAlgo``1(System.String)">
            <summary>
            Create new instance of symmetric algorithm using reflection by
            supplying the typename.
            </summary>
            <param name="fullyQualifiedTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.CreateSymmAlgoTripleDes">
            <summary>
            Create triple des symmetric algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.CryptographyUtils.CreateHashAlgoMd5">
            <summary>
            Create MD5 hash algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.CollectionUtils">
            <summary>
            Collection utility methods.
            </summary>
        </member>
        <member name="M:ComLib.Collections.CollectionUtils.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is empty collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeFileHelper">
            <summary>
            Helper class for code generation.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeFileHelper.Write(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes out the autogenerated file, after processing the substitutions.
            </summary>
            <param name="templateFile">The name of the initial template file.</param>
            <param name="generatedFile">The full location of the file to generate.</param>
            <param name="generatedFileDirectory">The location of the directory to put the autogenerated file.</param>
            <param name="substitutions">The substituions (key/value) pairs.</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeFileHelper.GetProcNames(System.String)">
            <summary>
            Get the names of all the procedures in the stored proc template folder
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeFileHelper.GetFilteredDomainModelFiles(ComLib.Models.Model,System.Collections.Generic.Dictionary{System.String,ComLib.CodeGeneration.CodeFile})">
            <summary>
            Get all the files that are applicable for code-generation for the specified model.
            </summary>
            <param name="currentModel"></param>
            <param name="allFiles"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderDomain">
            <summary>
            Code Builder Domain Model.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.Process(ComLib.Models.ModelContext)">
            <summary>
            Builds the Domain model code which includes :
            1. Entity.
            2. ActiveRecord
            3. Service 
            4. Repository
            5. Settings
            6. Validator
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildSubstitutions(ComLib.Models.ModelContext,ComLib.Models.Model,System.Collections.Generic.List{ComLib.Models.Model},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Build all the substutions.
            </summary>
            <param name="ctx">The entire context of all the models.</param>
            <param name="currentModel">The current model being code-generated.</param>
            <param name="modelChain">The inheritance chain of the model.</param>
            <param name="subs">The dictionary of substutions to populate.</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildNameSpaces(ComLib.Models.Model)">
            <summary>
            Build the necessary referenced namespaces.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildValidation(ComLib.Models.Model)">
            <summary>
            Build the validation code.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildRowMapping(ComLib.Models.Model)">
            <summary>
            Build the validation code.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildDbParams(ComLib.Models.Model,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Build the validation code.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildEditRoles(ComLib.Models.Model)">
            <summary>
            Builds a comma delimited string of roles that can moderate
            instances of the model specified.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildPropertiesForModel(ComLib.Models.Model)">
            <summary>
            Build the properties.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildProperties(ComLib.Models.Model,System.Text.StringBuilder)">
            <summary>
            Build properties
            </summary>
            <param name="ctx"></param>
            <param name="model"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Build properties.
            </summary>
            <param name="model"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderDomain.BuildProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Boolean,System.String,System.Text.StringBuilder)">
            <summary>
            Build properties.
            </summary>
            <param name="model"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CodeGeneration.ModelHandler">
            <summary>
            Handler for processing a specific model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.CodeGeneration.PropertyHandler">
            <summary>
            Handler for processing properties of the model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="prop"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.CompositionHandler">
            <summary>
            Handler for processing an composite model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="compositeModel"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.IncludeHandler">
            <summary>
            Handler for processing an included model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
            <param name="includedModel"></param>
        </member>
        <member name="T:ComLib.CodeGeneration.UIHandler">
            <summary>
            Handler for processing the UI for a model.
            </summary>
            <param name="ctx"></param>
            <param name="currentModel"></param>
        </member>
        <member name="T:ComLib.Account.UserValidator">
            <summary>
            Validator for User
            </summary>
        </member>
        <member name="M:ComLib.Account.UserValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validation method for the entity.
            </summary>
            <param name="target">The target.</param>
            <param name="useTarget">if set to <c>true</c> [use target].</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatch(System.Action)">
            <summary>
            Executes an action inside a try catch and does not do anything when
            an exception occurrs.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLog(System.Action)">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLog(System.String,System.Action)">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLog(System.String,ComLib.Logging.ILog,System.Action)">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchHandle(System.Action)">
            <summary>
            Executes an action inside a try catch and does not do anything when
            an exception occurrs.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchHandle(System.Action,System.Action)">
            <summary>
            Executes an action inside a try catch and does not do anything when
            an exception occurrs.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchFinallySafe(System.String,System.Action,System.Action{System.Exception},System.Action)">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatch(System.Action,System.Action{System.Exception})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLog``1(System.String,System.Func{``0})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLog``1(System.String,ComLib.Logging.ILog,System.Func{``0})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLogRethrow``1(System.String,ComLib.Logging.ILog,System.Boolean,System.Func{``0})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLogGet``1(System.String,System.Func{``0})">
            <summary>
            Executes an action inside a try catch and logs any exceptions
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLogGet``1(System.String,ComLib.Logging.ILog,System.Func{``0})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.TryCatchLogGetBoolMessageItem(System.String,ComLib.Logging.ILog,System.Func{ComLib.BoolMessageItem})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.HandleException(System.Exception)">
            <summary>
            Handle the highest level application exception.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:ComLib.ExecuteHelper.HandleExceptionLight(System.Exception)">
            <summary>
            Handle the highest level application exception.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:ComLib.Locale.LocalizationResourceProviderDefault">
            <summary>
            Default localization manager.
            This should only be used as the default provider.
            </summary>
        </member>
        <member name="F:ComLib.Locale.LocalizationResourceProviderDefault._instance">
            <summary>
            Used as singleton.
            </summary>
        </member>
        <member name="M:ComLib.Locale.LocalizationResourceProviderDefault.GetString(System.String)">
            <summary>
            Get the resource string associated with the key.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.LocalizationResourceProviderDefault.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get the resource string associated with the key and culture info.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.LocalizationResourceProviderDefault.GetString(System.String,System.String)">
            <summary>
            Check if resource string exists with the specified name.
            If exists, return resource string, otherwise return string value.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Locale.LocalizationResourceProviderDefault.GetString(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Check if resource string exists with the specified name.
            If exists, return resource string, otherwise return string value.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Locale.LocalizationResourceProviderDefault.Instance">
            <summary>
            Get the singleton instance.
            </summary>
        </member>
        <member name="P:ComLib.Locale.LocalizationResourceProviderDefault.Item(System.String)">
            <summary>
            Get / set the resource string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.RepositoryFactory">
            <summary>
            Repository factory for building/initializing a entity specific repository.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Init(System.Action{System.String,ComLib.Entities.IRepositoryConfigurable})">
            <summary>
            Initialize the repository configurator.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Add(System.String)">
            <summary>
            Initialize the repository configurator using only the connection string.
            This results in using the RepositoryConfiguratorDefault and the default database provider "System.Data.SqlClient".
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Add(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize the repository configurator using only the connection provided.
            This results in using the RepositoryConfiguratorDefault.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Add(System.String,ComLib.Data.ConnectionInfo)">
            <summary>
            Add connection associated w/ key.
            </summary>
            <param name="id"></param>
            <param name="connectionInfo"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Init">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Create``1(System.Func{ComLib.Entities.IRepository{``0}})">
            <summary>
            Initialize the repository.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryFactory.Configure(System.String,ComLib.Entities.IRepositoryConfigurable)">
            <summary>
            Initialize the repository.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Entities.RepositoryConfiguratorDefault">
            <summary>
            Default repository configurator to set the connection connection string and dbhelper.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.#ctor">
            <summary>
            Initialize the connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.#ctor(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize the connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.Add(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize the connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.Add(System.String,ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize the connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryConfiguratorDefault.Configure(System.String,ComLib.Entities.IRepositoryConfigurable)">
            <summary>
            Configure the repository with the connection and dbhelper.
            </summary>
            <param name="connectionId"></param>
            <param name="repository"></param>
        </member>
        <member name="P:ComLib.Entities.RepositoryConfiguratorDefault.DefaultConnection">
            <summary>
            The connection object.
            </summary>
        </member>
        <member name="T:ComLib.Models.ModelContainer">
            <summary>
            Collection of models.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContainer.#ctor">
            <summary>
            Initalize 
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Add(ComLib.Models.Model)">
            <summary>
            Add a single model to collection.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Add(System.Collections.Generic.IList{ComLib.Models.Model})">
            <summary>
            Add a collection of models.
            </summary>
            <param name="models"></param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Clear">
            <summary>
            Clear all the values.
            </summary>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Contains(System.String)">
            <summary>
            Determines if the model specified by modelname exists.
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Remove(System.String)">
            <summary>
            Remove the model from the container with the specified name.
            </summary>
            <param name="modelName"></param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Remove(ComLib.Models.Model)">
            <summary>
            Remove the model
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.RemoveAt(System.Int32)">
            <summary>
            Remove model at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Iterate(System.Predicate{ComLib.Models.Model},System.Action{ComLib.Models.Model})">
            <summary>
            Iterates over the models and calls the action lamda if the predicate is true.
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Iterate(System.String,System.Predicate{ComLib.Models.Model},System.Action{ComLib.Models.Model})">
            <summary>
            Iterates over the models and calls the action lamda if the predicate is true.
            </summary>
            <param name="condition"></param>
            <param name="action"></param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Iterate(System.Predicate{ComLib.Models.Model},System.Action{ComLib.Models.Model},System.Action{ComLib.Models.Model},System.Action{ComLib.Models.Model,ComLib.Models.Include},System.Action{ComLib.Models.Model,ComLib.Models.Composition},System.Action{ComLib.Models.Model,ComLib.Models.Relation},System.Action{ComLib.Models.Model,ComLib.Models.Relation})">
            <summary>
            Iterates over the models and calls the action lamda if the predicate is true.
            </summary>
            <param name="condition"></param>
            <param name="currentModel">The model to iterate over</param>
            <param name="inheritanceAction">The callback for the inheritance chain for this model.</param>
            <param name="includeAction">The call back for the included models</param>
            <param name="compositionAction">The call back for the composite models.</param>
            <param name="oneToOneRelationCallback">The call back for one to one relations on the model.</param>
            <param name="oneToManyRelationCallback">The call back for the one to many relations on the model.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.Iterate(System.String,System.Action{ComLib.Models.Model},System.Action{ComLib.Models.Model,ComLib.Models.Include},System.Action{ComLib.Models.Model,ComLib.Models.Composition},System.Action{ComLib.Models.Model,ComLib.Models.Relation},System.Action{ComLib.Models.Model,ComLib.Models.Relation})">
            <summary>
            Iterate over all the properties, includes, compositions of the model.
            </summary>
            <param name="modelName">The model to iterate over</param>
            <param name="inheritanceAction">The callback for the inheritance chain for this model.</param>
            <param name="includeAction">The call back for the included models</param>
            <param name="compositionAction">The call back for the composite models.</param>
            <param name="oneToOneRelationCallback">The call back for one to one relations on the model.</param>
            <param name="oneToManyRelationCallback">The call back for the one to many relations on the model.</param>
        </member>
        <member name="M:ComLib.Models.ModelContainer.InheritanceFor(System.String)">
            <summary>
            Gets the Inheritance chain for the specified model name.
            </summary>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Models.ModelContainer.InitInheritanceChain">
            <summary>
            Initialize by storing all the model chain inheritance paths for each model.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.ModelMap">
            <summary>
            Map of all the models.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.AllModels">
            <summary>
            Used to assign a collection of properties at once.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.Settings">
            <summary>
            Settings for the model builder
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.ExtendedSettings">
            <summary>
            Additional settings to make it easy to add new settings dynamically.
            Also allows for inheritance.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelContainer.Item(System.Int32)">
            <summary>
            Get / set by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Models.ModelContainer.Item(System.String)">
            <summary>
            Get / set by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Logging.LogConsole">
            <summary>
            This is the default extremely simple ( Console ) logger for the static class Logger.
            This means that the Logger does NOT have to be initialized with a provider.
            You can just use it immediately.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogConsole.#ctor">
            <summary>
            Default constructor. Not associated with any class/type.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogConsole.#ctor(System.String)">
            <summary>
            Constructor with name.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogConsole.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor with name.
            </summary>
        </member>
        <member name="M:ComLib.Logging.LogConsole.Log(ComLib.Logging.LogEvent)">
            <summary>
            This is the only method REQUIRED to be implemented.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="T:ComLib.LocationSupport.LocationService">
            <summary>
            LocationService parses location data that can be various formats.
            The formats can range from city, city/state, city/country, state, country.
            </summary>    
        </member>
        <member name="T:ComLib.LocationSupport.ILocationService">
            <summary>
            Location service to parse locatiion data.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.ILocationService.Parse(System.String)">
            <summary>
            Parses string for either the zip or city/state.
            e.g.
                City:  "Bronx", "Stamford"
                State: "NY", "NJ", "California"
                CityState: "Queens,New York"
                Country: "USA"
            </summary>
            <param name="locationData"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.#ctor(System.Func{ComLib.Entities.IRepository{ComLib.LocationSupport.Country}},System.Func{ComLib.Entities.IRepository{ComLib.LocationSupport.State}},System.Func{ComLib.Entities.IRepository{ComLib.LocationSupport.City}})">
            <summary>
            Constuctor that also takes in the short name dao.
            </summary>
            <param name="shortNameDao"></param>
            <param name="zipCodeDao"></param>
            <param name="stateDao"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.#ctor(ComLib.Entities.IRepository{ComLib.LocationSupport.Country},ComLib.Entities.IRepository{ComLib.LocationSupport.State},ComLib.Entities.IRepository{ComLib.LocationSupport.City})">
            <summary>
            Constuctor that also takes in the short name dao.
            </summary>
            <param name="shortNameDao"></param>
            <param name="zipCodeDao"></param>
            <param name="stateDao"></param>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.Parse(System.String)">
            <summary>
            Does a high-level check of the format supplied and determines what type
            of location input was supplied.
            
            Formats are:
            1. city                         - "Bronx"
            2. city,state                   - "Bronx , New York"
            3. city,state( abbreviation )   - "Bronx , NY"
            4. city,country                 - "HomeTown , USA"
            5. state                        - "New Jersey"
            6. state abbreviation           - "NJ"
            7. country                      - "Italy"
            the actuall parsing 
            </summary>
            <param name="locationData"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.InternalParse(System.String)">
            <summary>
            Does a high-level check of the format supplied and determines what type
            of location input was supplied.
            
            Formats are:
            1. city                         - "Bronx"
            2. city,state                   - "Bronx , New York"
            3. city,state( abbreviation )   - "Bronx , NY"
            4. city,country                 - "HomeTown , USA"
            5. state                        - "New Jersey"
            6. state abbreviation           - "NJ"
            7. country                      - "Italy"
            the actuall parsing 
            </summary>
            <param name="locationData">The location to parse. Can be any combination of
            inputs, check the summary above.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.IsEmptyLocation(System.String)">
            <summary>
            Checks whether the location text supplied is empty.
            This trims any white space from both sides of the text before checking
            for empty string.
            </summary>
            <param name="locationData"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.IsUnitedStatesZipCode(System.String)">
            <summary>
            Determines if the location text supplied is a U.S. zipcode.
            This is true if text is 5 characters that are all numbers.
            </summary>
            <param name="locationText">e.g. "10465"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.LocationService.ParseUnitedStatesZipCode(System.String)">
            <summary>
            Parse the zipcode representing a United States Zipcode.
            This must be a 5 digit zipcode.
            e.g. "10465"
            </summary>
            <param name="zip"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.IO.LicenseApplier">
            <summary>
            Applies a license by prepending it to each *.cs file.
            </summary>
        </member>
        <member name="M:ComLib.IO.LicenseApplier.#ctor">
            <summary>
            File Cleaner.
            </summary>
        </member>
        <member name="M:ComLib.IO.LicenseApplier.Execute(System.Object)">
            <summary>
            Execute cleaning of files/directories.
            Doesn't actually delete anything but generates a file
            containing the commands.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.LicenseApplier.HandleDirectory(System.IO.DirectoryInfo)">
            <summary>
            Handle the directory.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:ComLib.IO.LicenseApplier.HandleFile(System.IO.FileInfo)">
            <summary>
            Handle the file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:ComLib.IO.FileUtils">
            <summary>
            File utils.
            </summary>
        </member>
        <member name="M:ComLib.IO.FileUtils.PrependText(System.String,System.IO.FileInfo)">
            <summary>
            Prepend the text.
            </summary>
            <param name="text"></param>
            <param name="file"></param>
        </member>
        <member name="M:ComLib.IO.FileUtils.GetVersion(System.String)">
            <summary>
            Get the file version information.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:ComLib.IO.FileUtils.GetSizeInBytes(System.String)">
            <summary>
            Get file size in bytes.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.FileUtils.GetSizeInKilo(System.String)">
            <summary>
            Get file size in kilobytes.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.IO.FileUtils.GetSizeInMegs(System.String)">
            <summary>
            Get file size in megs.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Environments.Envs">
            <summary>
            Used to stored the environment for static access.
            </summary>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String)">
            <summary>
            Initialize w/ the selected environment and config paths.
            </summary>
            <param name="selected">Set either "prod | uat | qa | dev"</param>
            <param name="configPaths"></param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.String)">
            <summary>
            Set the current environment and also supply available environment names/types.
            </summary>
            <param name="selected">"prod" or "prod1". This should match the name
            from <paramref name="availableEnvsCommaDelimited"/></param>
            <param name="availableEnvsCommaDelimited">
            1. "prod,qa,dev". If the names are the same as the types.
            2. "prod1:prod,qa1:qa,mydev:dev" If the names are different that the env type names.
            </param>
            <param name="refPaths">The config reference paths. e.g. "prod.config,qa.config".</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.String,System.String)">
            <summary>
            Set the current environment and also supply available environment names/types.
            </summary>
            <param name="selected">"prod" or "prod1". This should match the name
            from <paramref name="availableEnvsCommaDelimited"/></param>
            <param name="availableEnvsCommaDelimited">
            1. "prod,qa,dev". If the names are the same as the types.
            2. "prod1:prod,qa1:qa,mydev:dev" If the names are different that the env type names.
            </param>
            <param name="refPaths">The config reference paths. e.g. "prod.config,qa.config".</param>
            <param name="enableInheritance">Whether or not environment inheritance is enabled.</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set the current environment and also supply available environment names/types.
            </summary>
            <param name="selected">"prod" or "prod1". This should match the name
            from <paramref name="availableEnvsCommaDelimited"/></param>
            <param name="availableEnvsCommaDelimited">
            1. "prod,qa,dev". If the names are the same as the types.
            2. "prod1:prod,qa1:qa,mydev:dev" If the names are different that the env type names.
            </param>
            <param name="refPaths">The config reference paths. e.g. "prod.config,qa.config".</param>
            <param name="enableInheritance">Whether or not environment inheritance is enabled.</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Set the current environment.
            </summary>
            <param name="selected">Name of the selected environment</param>
            <param name="availableEnvsCommaDelimited"></param>
            /// <param name="enableInheritance">Whether or not environment inheritance is enabled.</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,System.String,System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Set the current environment.
            </summary>
            <param name="envGroupName">Can have multiple environment definitions.
            If you just want to use the default one, supply emtpy string.</param>
            <param name="selected">"prod"</param>
            <param name="availableEnvs">All the available environments.</param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(ComLib.Environments.IEnv)">
            <summary>
            Register an environment for a specific group and also set the selected environment
            within the environment context for that group.
            </summary>
            <param name="envGroup">e.g. "database"</param>
            <param name="ctx">Collection of environments for the <paramref name="envGroup"/></param>
            <param name="selectedEnvironment">The selected environment within the Environment context <paramref name="ctx"/></param>
        </member>
        <member name="M:ComLib.Environments.Envs.Set(System.String,ComLib.Environments.IEnv)">
            <summary>
            Register an environment for a specific group and also set the selected environment
            within the environment context for that group.
            </summary>
            <param name="envGroup">e.g. "database"</param>
            <param name="ctx">Collection of environments for the <paramref name="envGroup"/></param>
            <param name="selectedEnvironment">The selected environment within the Environment context <paramref name="ctx"/></param>
        </member>
        <member name="M:ComLib.Environments.Envs.Get(System.String)">
            <summary>
            Return the environment service the respective environment group.
            </summary>
            <param name="group">"database"</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Environments.Envs.Current">
            <summary>
            Get the current environment.
            </summary>
        </member>
        <member name="T:ComLib.EmailSupport.NotificationMessage">
            <summary>
            Notification message.
            </summary>
        </member>
        <member name="M:ComLib.EmailSupport.NotificationMessage.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="values"></param>
            <param name="to"></param>
            <param name="from"></param>
            <param name="subject"></param>
            <param name="messageTemplateId"></param>
        </member>
        <member name="T:ComLib.EmailSupport.EmailMessage">
            <summary>
            Basic email message.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.From">
            <summary>
            From email address.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.To">
            <summary>
            To email address.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.Subject">
            <summary>
            Subject of email.
            </summary>
        </member>
        <member name="P:ComLib.EmailSupport.EmailMessage.Body">
            <summary>
            Body of email.
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionaryBidirectional`2">
            <summary>
            Dictionary for bidirectional lookup.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.#ctor">
            <summary>
            Create new instance with empty bi-directional lookups.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IDictionary{`1,`0})">
            <summary>
            Initialize using existing forward and reverse lookups.
            </summary>
            <param name="forward"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Add(`0,`1)">
            <summary>
            Add to key/value for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.ContainsKey(`0)">
            <summary>
            Determine if the key is contain in the forward lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Remove(`0)">
            <summary>
            Remove the key for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value from the forward lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add to bi-directional lookup.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Clear">
            <summary>
            Clears keys/value for bi-directional lookup.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine if the item is in the forward lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the array of key/value pairs for both bi-directionaly lookups.
            TO_DO: This needs to be unit-tested since, I don't think I'm handling
            the _reverseMap correctly.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the item from bi-directional lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.ContainsValue(`1)">
            <summary>
            Determine whether or not the reverse lookup contains the key
            represented by the value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryBidirectional`2.ContainsReverseLookup(`1)">
            <summary>
            Determine whether or the reverse lookup ( value ) exists.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.Keys">
            <summary>
            Get a list of all the keys in the forward lookup.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.Values">
            <summary>
            Get the collection of values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.Item(`0)">
            <summary>
            Set the key / value for bi-directional lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.Count">
            <summary>
            Get number of entries.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryBidirectional`2.IsReadOnly">
            <summary>
            Get whether or not this is read-only.
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.RandomTextGenerator">
            <summary>
            Generates random text.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.RandomTextGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.CaptchaSupport.RandomTextGenerator"/> class.
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.RandomTextGenerator.Generate">
            <summary>
            Generate the random text.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.CaptchaSupport.RandomTextGenerator.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:ComLib.CaptchaSupport.CaptchaSettings">
            <summary>
            Settings for the random text generator.
            </summary>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.Width">
            <summary>
            Gets or sets the allowed chars.
            </summary>
            <value>The allowed chars.</value>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.NumChars">
            <summary>
            How many characters should it produce
            </summary>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaSettings.IsCaseSensitive">
            <summary>
            Whether or not Upper/Lower case sensitive is
            enabled when validating userinput against the generated text.
            </summary>
        </member>
        <member name="T:ComLib.Application.AppDecoratorHelper">
            <summary>
            This is a static decorator( As opposed to using AOP ) to get cross-cutting behaviour.).
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.#ctor(System.Type,System.String)">
            <summary>
            Initialize the decorators.
            </summary>
            <param name="delimitedDecorators"></param>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.Init(System.Type,System.String)">
            <summary>
            Determine if there are any decorations specified.
            </summary>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.IsDecoratedWith(System.String)">
            <summary>
            Determine if the decorator specified is enabled for the application being run.
            </summary>
            <param name="decoratorName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.Execute(System.String,System.String,System.Boolean,System.Action)">
            <summary>
            Executes the method action by wrapping it with
            1. Logging of start / end time.
            2. Status updates.
            </summary>
            <param name="methodName">The name of the method being executed.</param>
            <param name="taskName">Option name to use for the TaskName for StatusUpdates.</param>
            <param name="wrapTryCatch">Whether or not to wrap the call inside a try catch.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.Execute``1(System.String,System.String,System.Boolean,System.Func{``0})">
            <summary>
            Executes the method action by wrapping it with
            1. Logging of start / end time.
            2. Status updates.
            </summary>
            <param name="methodName">The name of the method being executed.</param>
            <param name="taskName">Option name to use for the TaskName for StatusUpdates.</param>
            <param name="wrapTryCatch">Whether or not to wrap the call inside a try catch.</param>
            <param name="action">Action to execute.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComLib.Application.AppDecoratorHelper.Execute(System.String,System.String,System.Action)" -->
        <member name="M:ComLib.Application.AppDecoratorHelper.HandleStart(System.String,System.DateTime)">
            <summary>
            Handle the "Logging" the starting of the method call before execution.
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="M:ComLib.Application.AppDecoratorHelper.HandleEnd(System.String,System.DateTime)">
            <summary>
            Handle the "Logging" the starting of the method call before execution.
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="T:ComLib.EnumLookupExtensions">
            <summary>
            Enum lookup extensions.
            </summary>
        </member>
        <member name="M:ComLib.EnumLookupExtensions.GetValue(ComLib.EnumLookup,System.Type,System.String,ComLib.IValidationResults)">
            <summary>
            </summary>
            <param name="enumType"></param>
            <param name="val"></param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumLookupExtensions.GetValue(ComLib.EnumLookup,System.Type,System.String,ComLib.IValidationResults,System.String)">
            <summary>
            </summary>
            <param name="enumType"></param>
            <param name="val"></param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.EnumLookup">
            <summary>
            Class to parse/lookup the value of enums.
            </summary>
        </member>
        <member name="F:ComLib.EnumLookup._enumMap">
            <summary>
             Stores the possible values for various Enum types.
            </summary>
        </member>
        <member name="M:ComLib.EnumLookup.Register(System.Type,System.String)">
            <summary>
            Register enum mappings.
            </summary>
            <param name="enumtype"></param>
            <param name="aliasValuesDelimited"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumLookup.IsValid(System.Type,System.String)">
            <summary>
            Determines if the string based enum value is valid.
            </summary>
            <param name="enumType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumLookup.GetValue(System.Type,System.String)">
            <summary>
            Get the enum Value
            </summary>
            <param name="enumType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumLookup.GetValue(System.Type,System.String,System.String)">
            <summary>
            Get the enum Value
            </summary>
            <param name="enumType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.EnumLookup.SetupMappings(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Set the various mappings for an enum value.
            </summary>
            <param name="type"></param>
            <param name="enumValues"></param>
            <param name="aliasValuesDelimeted"></param>
        </member>
        <member name="T:ComLib.Scheduling.Task">
            <summary>
            Class representing the task to execute, it can either
            be a class that derives from ITask or a delegate.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Task.#ctor(System.String,System.Action,ComLib.Scheduling.Trigger)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Scheduling.Task"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="executor">The executor.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:ComLib.Scheduling.Task.OnTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Callback from timer.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComLib.Scheduling.Task.GetStatus">
            <summary>
            Gets the status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Scheduling.Task.Stop">
            <summary>
            Stop this timer and send notification that this task is complete.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Task.UpdateSummary">
            <summary>
            Updates the summary.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.Task.Copy(ComLib.Scheduling.Task)">
            <summary>
            Copies the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.Name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.LastProcessDate">
            <summary>
            The last time the queue was processed.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.NumberOfTimesProcessed">
            <summary>
            Number of times the queue has been processed.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.ElapsedTimeSinceLastProcessDate">
            <summary>
            Amount of time since the last process date.
            </summary>
        </member>
        <member name="F:ComLib.Scheduling.TaskSummary.IsActive">
            <summary>
            Whether or nor the task is still active to run.
            </summary>
        </member>
        <member name="M:ComLib.Scheduling.TaskSummary.#ctor(System.String,System.DateTime,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="!:QueueStatus"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="count">The count.</param>
            <param name="lastProcessDate">The last process date.</param>
            <param name="dequeueSize">Size of the dequeue.</param>
        </member>
        <member name="T:ComLib.Entities.ILookUpMulti`1">
            <summary>
            Interface for looking up data by id or name.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Data.IQuery`1">
            <summary>
            Interface for query
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ComLib.Notifications.NotificationDef">
            <summary>
            Define the location of notification content.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.Name">
            <summary>
            Identifies a message template.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.Location">
            <summary>
            Location of the template definition.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.FileName">
            <summary>
            Just the file name from the full location.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.IsAssemblyEmbedded">
            <summary>
            Flag indicates whether or not the template definition
            is embedded in an assembly.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.AssemblyName">
            <summary>
            Name of the assembly if embedded.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDef.IsXsl">
            <summary>
            Whether or not this is xsl based.
            TO_DO: NOT_USED currently.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationDef.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Notifcation content.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="isAssemblyEmbedded"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="T:ComLib.Notifications.NotificationDefinitions">
            <summary>
            Xsl file paths for various emails.
            </summary>
        </member>
        <member name="F:ComLib.Notifications.NotificationDefinitions._defs">
            <summary>
            Storage of the notification templates.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationDefinitions.#ctor">
            <summary>
            Default the message templates to the internal ones provided by commonlibrary.net.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationDefinitions.Remove(System.String)">
            <summary>
            Remove entry associated with the key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:ComLib.Notifications.NotificationDefinitions.Keys">
            <summary>
            Get all the keys.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationDefinitions.Item(System.String)">
            <summary>
            Get / set the value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Notifications.NotificationServiceBase">
            <summary>
            Base class for notifications.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationServiceBase.#ctor(ComLib.Queue.QueueProcessor{ComLib.EmailSupport.NotificationMessage},ComLib.Notifications.NotificationSettings)">
            <summary>
            Initialize.
            </summary>
            <param name="queue"></param>
            <param name="settings"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationServiceBase.Notify(ComLib.EmailSupport.NotificationMessage)">
            <summary>
            Queue the notification.
            Don't just send it directly.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ComLib.Notifications.NotificationServiceBase.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationServiceBase.Queue">
            <summary>
            The notification queue.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.NotificationAccountService">
            <summary>
            The notification service for sending feedback, sending to a friend.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationAccountService.WelcomeNewUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Queues the notification to email to a friend.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            </summary>
            <param name="sendToFriendData"></param>
            <summary>
            Welcome a new user.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationAccountService.WelcomeNewUser(ComLib.Notifications.NotificationContext)">
            <summary>
            Welcome new user using Notification context.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationAccountService.RemindUserPassword(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send remind account/password email to user.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="firstname"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComLib.Notifications.NotificationAccountService.RemindUserPassword(ComLib.Notifications.NotificationContext)" -->
        <member name="T:ComLib.Notifications.NotificationMessagingService">
            <summary>
            The notification service for sending feedback, sending to a friend.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SendToFriend(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send the website url to a friend.
            </summary>
            <param name="toEmail"></param>
            <param name="subject"></param>
            <param name="friendName"></param>
            <param name="fromName"></param>
            <param name="messageFromFriend"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SendToFriend(ComLib.Notifications.NotificationContext)">
            <summary>
            Queues the notification to email to a friend.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            ${from.name}
            ${post.url}
            ${post.title}
            ${friend.name}
            ${friend.email}
            </summary>
            <param name="sendToFriendData"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SubmitFeedBack(ComLib.Notifications.NotificationContext)">
            <summary>
            Submits the feedback notification.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            ${from.name}
            ${post.url}
            ${post.title}
            ${friend.name}
            ${friend.email}
            </summary>
            <param name="feedBack"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SendToFriendPost(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send an email to a friend with a link to a post on the page.
            </summary>
            <param name="toEmail"></param>
            <param name="subject"></param>
            <param name="toFirstname"></param>
            <param name="fromName"></param>
            <param name="messageToFriend"></param>
            <param name="postTitle"></param>
            <param name="postUrl"></param>
        </member>
        <member name="M:ComLib.Notifications.NotificationMessagingService.SendToFriendPost(ComLib.Notifications.NotificationContext)">
            <summary>
            Sends a link to a post to a friend.
            ${message.to}
            ${message.from}
            ${message.subject}
            ${message.briefmessage}
            ${from.name}
            ${post.url}
            ${post.title}
            ${friend.name}
            ${friend.email}
            </summary>
            <param name="placeHolderValues">Dictionary of keys representing the names of the 
            placeholders to replace in the content file.</param>
        </member>
        <member name="M:ComLib.OrmLite.OrmLiteBuilder.BuildInsert">
            <summary>
            Generate an very generic single table insert statement that includes all the properties
            of the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.OrmLite.OrmLiteBuilder.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the entity's property via reflection
            and converts the value to appropriatedly escaped string value.
            </summary>
            <param name="entity">The entity.</param>
            <param name="prop">The prop.</param>
            <returns></returns>
        </member>
        <member name="P:ComLib.OrmLite.OrmLiteBuilder.Entity">
            <summary>
            Entity to build sql insert/update for.
            </summary>
        </member>
        <member name="P:ComLib.OrmLite.OrmLiteBuilder.IdentityRetrievalStatement">
            <summary>
            Provide the statement for getting the inserted entity id(sql identity).
            </summary>
        </member>
        <member name="T:ComLib.OrmLite.OrmSqlStaticBuilder">
            <summary>
            Orm sql builder.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.#ctor">
            <summary>
            Unitialized instance.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.#ctor(ComLib.Models.ModelContext,System.String,System.String,System.Int32)">
            <summary>
            Initialize
            </summary>
            <param name="databaseType"></param>
            <param name="ctx"></param>
            <param name="modelName"></param>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.Init(ComLib.Models.ModelContext,System.String,System.String,System.Int32)">
            <summary>
            Initialize
            </summary>
            <param name="ctx"></param>
            <param name="modelName"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.Insert">
            <summary>
            Generate the sql for insert.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.Update">
            <summary>
            Generate the sql for insert.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.SetupColumns(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Setup the columns.
            </summary>
            <param name="columnNames"></param>
            <param name="columnValues"></param>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.Process(System.Action{System.String,ComLib.Models.Model,ComLib.Models.PropInfo})">
            <summary>
            Process the model, by handling all it's properties, compositions, and includes and calling
            the delegate given  to handle the properties.
            </summary>
            <param name="propHandler"></param>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilder.GetValue(System.String,ComLib.Models.PropInfo)">
            <summary>
            Get the value.
            </summary>
            <param name="objectPropName"></param>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.OrmLite.OrmSqlStaticBuilder.IdentityRetrievalStatement">
            <summary>
            Provide the statement for getting the inserted entity id(sql identity).
            </summary>
        </member>
        <member name="T:ComLib.OrmLite.OrmSqlStaticBuilderSqlServer">
            <summary>
            Sql builder for Sql Server.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilderSqlServer.#ctor">
            <summary>
            Unitialized instance.
            </summary>
        </member>
        <member name="M:ComLib.OrmLite.OrmSqlStaticBuilderSqlServer.#ctor(ComLib.Models.ModelContext,System.String,System.String,System.Int32)">
            <summary>
            Initialize
            </summary>
            <param name="databaseType"></param>
            <param name="ctx"></param>
            <param name="modelName"></param>
        </member>
        <member name="P:ComLib.OrmLite.OrmSqlStaticBuilderSqlServer.IdentityRetrievalStatement">
            <summary>
            Provide the statement for getting the inserted entity id(sql identity).
            </summary>
        </member>
        <member name="T:ComLib.Exceptions.ILocalizedExceptionManager">
            <summary>
            Localization based
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.ILocalizedExceptionManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,System.Exception,System.String[])">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Converts all the <paramref name="args"/>
            to a string to put into the error.
            </summary>
            <param name="errorDescriptorKey">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="ex">The exception to handle.</param>
            <param name="args">Array of strings to report in the error.</param>
        </member>
        <member name="M:ComLib.Exceptions.ILocalizedExceptionManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception)">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Adds the error to <paramref name="errors"/>.
            </summary>
            <param name="errorDescriptor">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="errors">The list of errors to add to the error string to.</param>
            <param name="ex">The exception to handle.</param>
        </member>
        <member name="M:ComLib.Exceptions.ILocalizedExceptionManager.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception,System.String[])">
            <summary>
            Handles the exception by getting the error description from the <paramref name="resources"/> using
            the key specified by <paramref name="errorDescriptorKey"/>. Adds the error to <paramref name="errors"/>.
            </summary>
            <param name="errorDescriptor">The name of key to use to get the localized errors from resources. </param>
            <param name="resources">The localized resources that contains the error string.</param>
            <param name="errors">The list of errors to add to the error string to.</param>
            <param name="ex">The exception to handle.</param>
            <param name="args">Array of strings to report in the error.</param>
        </member>
        <member name="T:ComLib.Cryptography.CryptoConfig">
            <summary>
            Settings for the encryption.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.CryptoConfig.#ctor">
            <summary>
            encryption option
            </summary>
            <param name="encrypt"></param>
        </member>
        <member name="M:ComLib.Cryptography.CryptoConfig.#ctor(System.Boolean,System.String)">
            <summary>
            encryption options
            </summary>
            <param name="encrypt"></param>
            <param name="key"></param>
        </member>
        <member name="P:ComLib.Cryptography.CryptoConfig.Encrypt">
            <summary>
            Whether or not to encrypt;
            Primarily used for unit testing.
            Default is to encrypt.
            </summary>
        </member>
        <member name="P:ComLib.Cryptography.CryptoConfig.InternalKey">
            <summary>
            Key used to encrypt a word.
            </summary>
        </member>
        <member name="T:ComLib.Categories.ICategoryDao">
            <summary>
            Interface for the Category data access object.
            </summary>
        </member>
        <member name="M:ComLib.Categories.ICategoryDao.GetRootCategories">
            <summary>
            Get the root categories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.ICategoryDao.GetRootCategoriesNonCache">
            <summary>
            Get the root categories directly from the datasource without using any cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.ICategoryDao.GetByParentId(System.Int32)">
            <summary>
            Get the categories by the parent id.
            </summary>
            <param name="categoryId"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.ICategoryDao.GetLookUp">
            <summary>
            Get the category lookup component.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Categories.CategoryValidator">
            <summary> 
            Category validator. 
            </summary> 
        </member>
        <member name="M:ComLib.Categories.CategoryValidator.#ctor(ComLib.Categories.Category)">
            <summary>
            Initializer.
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:ComLib.Categories.CategoryValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary> 
            Validate the category. 
            </summary> 
            <param name="entity"></param> 
            <returns></returns> 
        </member>
        <member name="T:ComLib.Categories.CategoryLookUp">
            <summary>
            Category look up class.
            This contains all the categories / subcategories available.
            </summary>
        </member>
        <member name="M:ComLib.Categories.CategoryLookUp.#ctor(System.Collections.Generic.IList{ComLib.Categories.Category})">
            <summary>
            Initialzie the lookup
            </summary>
            <param name="allCategories"></param>
        </member>
        <member name="M:ComLib.Categories.CategoryKey.BuildKey(ComLib.Categories.Category)">
            <summary>
            Build key for category.
            
            If root, just the the category name.
                e.g. "Art"
            
            If sub-category, parent/sub-cat name
                e.g. "Art,Sculpture"
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Categories.CategoryKey.BuildKey(System.String,System.String)">
            <summary>
            Build category key.
            </summary>
            <param name="categoryName"></param>
            <param name="subCategoryName"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Xml.XmlUtils">
            <summary>
            Static Xml related utility functions.
            </summary>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.LoadXMLFromFile(System.String)">
            <summary>
            This takes a file path and return an xmldocument
            </summary>
            <param name="file_"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.RemoveAllChildrenFrom(System.Xml.XmlNode)">
            <summary>
            Remove all children (but not attributes) from specified node
            </summary>
            <param name="n">Node to remove children from</param>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.GetAttributeValue(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Gets the attribute value for the Current node of xNav_. Throws an Exception if attrName_ does not exist.
            </summary>
            <param name="xNav_"></param>
            <param name="attrName_"></param>
            <returns>Attribute Value</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.GetAttributeValue(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Gets the attribute value for the Current node of xNav_. Returns defaultValue if attrName_ does not exist.
            </summary>
            <param name="xNav_"></param>
            <param name="attrName_"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.FragmentToNode(System.String)">
            <summary>
            Convert a fragment of xml to an xml node
            </summary>
            <param name="xmlFragment_">An xml fragment starting with an outer element</param>
            <returns>A node on a new xml document</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.EscapeXml(System.String)">
            <summary>
            Escapes xml
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.FormatNicely(System.String)">
            <summary>
            Pretty Print the input XML string, such as adding indentations to each level of elements
            and carriage return to each line
            </summary>
            <param name="xmlText"></param>
            <returns>New formatted XML string</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.TransformXml(System.IO.TextReader,System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Transforms the XML.
            </summary>
            <param name="inXml">The in XML.</param>
            <param name="styleSheet">The style sheet.</param>
            <param name="outXml">The out XML.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.TransformXml(System.String,System.String)">
            <summary>
            Generates html by transforming the xml to html
            using xsl file specified.
            </summary>
            <param name="xmlToTransform">The xml to transform to html.</param>
            <param name="pathToXsl">The path to the xsl file to use for
            the transformation.</param>
            <returns>An html string if correctly transformed, or an empty string
            if there was some error.</returns>
        </member>
        <member name="M:ComLib.Xml.XmlUtils.Serialize(System.Object)">
            <summary>
            Serializes an object to xml using the XmlSerialization.
            The obj must have the xml attributes used for serialization.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.HttpHandlers.JavascriptHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.JavascriptHandler.Init(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Set the configuration settings as an IDictionary.
            </summary>
            <param name="sectionname">Section name</param>
            <param name="useSection">Whether or not to use the section name.</param>
            <param name="config"></param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.JavascriptHandler.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Tuple2`2.#ctor(`0,`1)">
            <summary>
            Initialize the tuple items.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="P:ComLib.Tuple2`2.First">
            <summary>
            The first item of the tuple
            </summary>
        </member>
        <member name="P:ComLib.Tuple2`2.Second">
            <summary>
            The second item of the tuple
            </summary>
        </member>
        <member name="M:ComLib.Tuple3`3.#ctor(`0,`1,`2)">
            <summary>
            Initialize the tuple items.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="P:ComLib.Tuple3`3.First">
            <summary>
            The first item of the tuple
            </summary>
        </member>
        <member name="P:ComLib.Tuple3`3.Second">
            <summary>
            The second item of the tuple
            </summary>
        </member>
        <member name="P:ComLib.Tuple3`3.Third">
            <summary>
            The second item of the tuple
            </summary>
        </member>
        <member name="T:ComLib.Reflection.ReflectionUtils">
            <summary>
            Various reflection based utility methods.
            </summary>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperties``1(``0,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Set object properties on T using the properties collection supplied.
            The properties collection is the collection of "property" to value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns>true if all properties set, false otherwise</returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperty``1(System.Object,System.String,System.Object)">
            <summary>
            Set the object properties using the prop name and value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Set the object properties using the prop name and value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.Object,System.Boolean)">
            <summary>
            Set the object properties using the prop name and value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Set the property value using the string value.
            </summary>
            <param name="options"></param>
            <param name="prop"></param>
            <param name="configValue"></param>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the property value
            </summary>
            <param name="obj"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertyValues(System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Get all the property values.
            </summary>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Object,System.String)">
            <summary>
            Get all the properties.
            </summary>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Type,System.String[])">
            <summary>
            Get all the properties.
            </summary>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Type,System.String[],System.Reflection.BindingFlags)">
            <summary>
            Get all the properties.
            </summary>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertyValueSafely(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value safely, without throwing an exception.
            If an exception is caught, null is returned.
            </summary>
            <param name="obj"></param>
            <param name="propInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetAllProperties(System.Object,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets all the properties of the table.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Get the 
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetWritableProperties(System.Object,System.Collections.Specialized.StringDictionary)">
            <summary>
            Gets all the properties of the table.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperties(System.Collections.Specialized.StringDictionary,System.Type)">
            <summary>
            Gets all the properties of the table.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertiesAsMap(System.Object,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets all the properties of the object as dictionary of property names to propertyInfo.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertiesAsMap(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Get all the properties.
            </summary>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetPropertiesAsMap``1(System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Get all the properties.
            </summary>
            <param name="obj"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetProperty(System.Type,System.String)">
            <summary>
            Get the propertyInfo of the specified property name.
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.GetWritableProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets a list of all the writable properties of the class associated with the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <remarks>This method does not take into account, security, generics, etc.
            It only checks whether or not the property can be written to.</remarks>
            <returns></returns>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method on the object provided.
            </summary>
            <param name="obj">The object containing the method to invoke</param>
            <param name="methodName">arguments to the method.</param>
            <param name="args"></param>
        </member>
        <member name="M:ComLib.Reflection.ReflectionUtils.CopyPropertyValue(System.Object,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Copies the property value from the source to destination.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="prop"></param>
        </member>
        <member name="M:ComLib.EnvironmentVariables.GetAny(System.String)">
            <summary>
            Get environment variable from current process, user variable, machine variable.
            </summary>
            <param name="name">Environment variable name.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TypeParsers.ParseInt(System.String,System.Int32)">
            <summary>
            Parse the string as an int.
            </summary>
            <param name="val"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TypeParsers.Convert``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TypeParsers.ConvertTo``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Types.TypeParsers.ConvertTo(System.Type,System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Paging.PagerSettings">
            <summary>
            Pager settings.
            </summary>
        </member>
        <member name="F:ComLib.Paging.PagerSettings.Default">
            <summary>
            Default settings
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerSettings.#cctor">
            <summary>
            Initialize default settings
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComLib.Paging.PagerSettings.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initialize fields.
            </summary>
            <param name="numberPagesToDisplay"></param>
            <param name="cssForCurrentPage"></param>
            <param name="cssForPage"></param>
        </member>
        <member name="F:ComLib.Paging.PagerSettings.NumberPagesToDisplay">
            <summary>
            How many pages to display in a row at once.
            </summary>
        </member>
        <member name="F:ComLib.Paging.PagerSettings.CssCurrentPage">
            <summary>
            Name of css class used for currently displayed page.
            </summary>
        </member>
        <member name="F:ComLib.Paging.PagerSettings.CssClass">
            <summary>
            Name of css class used for showing normal non-current pages.
            </summary>
        </member>
        <member name="T:ComLib.LocationSupport.Country">
            <summary>
            Summary description for CountryDetails
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Country.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.Country"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Country.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.Country"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:ComLib.LocationSupport.Country.CountryCode">
            <summary>
            Same as abbreviation. This is more descriptive.
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositoryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryExtensions.Get``2(ComLib.Entities.IRepository{``0},System.Int32,System.String)">
            <summary>
            Gets the specified entity and loads the TRelation. Defaults the foreign key to typeof(TRelation).Name + Id.
            Defaults the Property name to typeof(TRelation).
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRelation">The type of the relation.</typeparam>
            <param name="repo">The repo.</param>
            <param name="id">The id.</param>
            <param name="foreignKey">The foreign key.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryExtensions.Get``2(ComLib.Entities.IRepository{``0},System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the specified entity and loads the 1-to-Many TRelation. Defaults the foreign key to typeof(TRelation).Name + Id.
            Defaults the Property name to typeof(TRelation)"s".
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRelation">The type of the relation.</typeparam>
            <param name="repo">The repo.</param>
            <param name="id">The id.</param>
            <param name="foreignKey">The foreign key.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.Query">
            <summary>
            Base class for Query.
            </summary>
        </member>
        <member name="M:ComLib.Data.Query.Complete">
            <summary>
            Completes this condition construction.
            </summary>
        </member>
        <member name="P:ComLib.Data.Query.Data">
            <summary>
            The data for the criteria, including select field, conditions, orderby etc.
            </summary>
        </member>
        <member name="P:ComLib.Data.Query.Builder">
            <summary>
            The data for the criteria, including select field, conditions, orderby etc.
            </summary>
        </member>
        <member name="M:ComLib.Data.Query`1.New">
            <summary>
            Creates a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Query`1.New(System.String)">
            <summary>
            Creates new Query object for the specified db provider name.
            </summary>
            <param name="dbProviderName">Name of the db provider.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.Query`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Data.Query`1"/> class.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.Connection">
            <summary>
            Database connectio used to create the tables associated with a model.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.AssemblyName">
            <summary>
            Assembly name.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelCodeLocation">
            <summary>
            Location of the generated code.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelCodeLocationTemplate">
            <summary>
            Location of the templates for code generation
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelInstallLocation">
            <summary>
            Location where the sql schema files are created.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelCodeLocationUI">
            <summary>
            Location where the sql schema files are created.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelCodeLocationUITemplate">
            <summary>
            Location where the UI templates are located.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelOrmLocation">
            <summary>
            Location where orm mapping file should be created.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.ModelDbStoredProcTemplates">
            <summary>
            Location of the stored procedure templates.
            </summary>
        </member>
        <member name="P:ComLib.Models.ModelBuilderSettings.DbAction_Create">
            <summary>
            Location where orm mapping file should be created.
            </summary>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.MapTo``1(``0,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Reflection.PropertyInfo},System.Collections.IDictionary)">
            <summary>
            Map the properties in the data to the properties of the item T using the propMap supplied.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The object to set the properties on.</param>
            <param name="counterOrRefId">An counter to help associate errors in mapping w/ a specific item index or reference id.</param>
            <param name="propMap">Property map containing the names of the properties that can be mapped.</param>
            <param name="data">The source of the data to map.</param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.MapTo``1(``0,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Reflection.PropertyInfo},System.Collections.IDictionary,ComLib.IErrors)">
            <summary>
            Map the properties in the data to the properties of the item T using the propMap supplied.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="counterOrRefId">An counter to help associate errors in mapping w/ a specific item index or reference id.</param>
            <param name="item">The object to set the properties on.</param>
            <param name="propMap">Property map containing the names of the properties that can be mapped.</param>
            <param name="data">The source of the data to map.</param>
            <param name="errors">Error collection.</param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.MapTo(System.Object,System.Collections.IDictionary,System.String,ComLib.IErrors)">
            <summary>
            Maps all the keys/values in the data dictionary to the 
            </summary>
            <param name="object">The object to map</param>
            <param name="data">The data to map to the object.</param>
            <param name="namefilter">Filter on the keys. e.g. "Location." will only map keys that contain "Location."</param>
            <param name="errors">Error list for collecting errors.</param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.MapFrom(System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Reflection.PropertyInfo}},System.Action{System.String,System.Object})">
            <summary>
            Maps prop/values from the object and passes the column/propertyname and it's value as an object back to the callback.
            The property name is delimited by "." for nested objects.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="startIndex">The starting index in the <paramref name="propMap"/>to start processing.</param>
            <param name="propNameFilter">Filter to use to only include property names beginning with this name.</param>
            <param name="propMap">KeyValue list of propnames and their propinfo. NOTE: nested objects should have their key as "obj.property.property"</param>
            <param name="callback"></param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.GetProperty(System.Object,System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="obj">The obj.</param>
            <param name="propName">Name of the prop. Can be nested like "Post.Address.City"</param>
            <returns>Returns the property and the object that the property belongs to.</returns>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.SetProperty(System.Reflection.PropertyInfo,System.Object,System.Int32,ComLib.IErrors,System.Object)">
            <summary>
            Set the property using the value provided.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <param name="item"></param>
            <param name="counterOrRefId"></param>
            <param name="errors"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.MapperSupport.MapperHelper.GetProps(System.Type,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Reflection.PropertyInfo}})">
            <summary>
            Recurse into the type to get all the instance, public, settable properties of the types it's 
            nested objects that are properties.
            </summary>
            <param name="type"></param>
            <param name="propNames"></param>
        </member>
        <member name="T:ComLib.MapperSupport.MapperWebForms">
            <summary>
            Mapper for web forms. This is used to automatically map values from a form into an objects Properties. This built in
            UpdateModel method on an MVC Controller doesn't support use of Interfaces for automapping.
            </summary>
        </member>
        <member name="M:ComLib.MapperSupport.MapperWebForms.UpdateModel(System.Object,System.Collections.Specialized.NameValueCollection,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Maps form values from a NameValueCollection to an object. This is used specifically for auto mapping Form input values to an Object's properties.
            </summary>
            <param name="obj">The object to set the values on from the form.</param>
            <param name="form">Data from webform.</param>
            <param name="prefix">The prefix to use for the property names in the form.</param>
            <param name="excludeProps">The props to exclude.</param>
        </member>
        <member name="T:ComLib.Ioc">
            <summary>
            Helper class to get a service object out of the 
            service locator.
            </summary>
        </member>
        <member name="M:ComLib.Ioc.Init(ComLib.IIoc)">
            <summary>
            Sets the object container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:ComLib.Ioc.AddObject(System.String,System.Object)">
            <summary>
            Adds the object to the container.
            </summary>
            <param name="objName">Name of the obj.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:ComLib.Ioc.GetObject``1(System.String)">
            <summary>
            Get the service and automatically converts to the appropriate type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Ioc.GetObject``1">
            <summary>
            Get the object using just the type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Ioc.Contains``1">
            <summary>
            Determine if the container contains the specified type.
            </summary>
            <param name="t"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.ImportExport.ImportExportService`1">
            <summary>
            Interface for an import/export service on objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.#ctor">
            <summary>
            Initialize with validator and the mapper( config, errors);
            </summary>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.#ctor(ComLib.IValidator)">
            <summary>
            Initialize with validator and the mapper( config, errors);
            </summary>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Load(System.Collections.IDictionary)">
            <summary>
            Determines whether this instance can import the specified items.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.LoadFile(System.String)">
            <summary>
            Determines whether this instance can import the specified items.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.LoadText(System.String,System.String)">
            <summary>
            Determines whether this instance can import the specified items.
            </summary>
            <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Import(System.Collections.IDictionary)">
            <summary>
            Imports the specified items.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ImportFile(System.String)">
            <summary>
            Imports the specified items.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ImportText(System.String,System.String)">
            <summary>
            Imports the specified items.
            </summary>/// <param name="text">The text to import( as csv, xml, ini)</param>
            <param name="format">csv, xml, ini, json</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ExportToFile(System.String)">
            <summary>
            Exports all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ExportToFile(System.String,System.Int32,System.Int32)">
            <summary>
            Exports the range of items to a file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.ExportToText(System.Int32,System.Int32)">
            <summary>
            Exports the batch as text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.TotalExportCount">
            <summary>
            Gets the total count of the items that can be exported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.ImportExport.ImportExportService`1.Export(System.Int32,System.Int32)">
            <summary>
            Exports a batch of items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportService`1.Validator">
            <summary>
            The validator to use when importing.
            </summary>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportService`1.HasValidator">
            <summary>
            Is there a validator.
            </summary>
        </member>
        <member name="T:ComLib.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for dictionaries.
            </summary>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.ConvertTo``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get``1(System.Collections.IDictionary,System.String)">
            <summary>
            Get typed value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.GetOrDefault``1(System.Collections.IDictionary,System.String,``0)">
            <summary>
            Get using default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Get section key value.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get``1(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Get typed section key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Get``1(System.Collections.IDictionary,System.String,System.String,``0)">
            <summary>
            Get section/key value if present, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d"></param>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Section(System.Collections.IDictionary,System.String)">
            <summary>
            Get a IDictionary.
            </summary>
            <param name="d"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Extensions.DictionaryExtensions.Contains(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Whether the section/key is there.
            </summary>
            <param name="d"></param>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Exceptions.ErrorManagerDefaultLocalized">
            <summary>
            Localized error manager.
            </summary>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerDefaultLocalized.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception)">
            <summary>
            Handles the error by added it it the validation errors, and logging it.
            </summary>
            <param name="errorDescriptor"></param>
            <param name="resources"></param>
            <param name="errors"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerDefaultLocalized.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,ComLib.IErrors,System.Exception,System.String[])">
            <summary>
            Handle the error by formatting the error message first and then adding it
            to the validation errors. Then add it to the log.
            </summary>
            <param name="errorDescriptor"></param>
            <param name="resources"></param>
            <param name="errors"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="M:ComLib.Exceptions.ErrorManagerDefaultLocalized.Handle(System.String,ComLib.Locale.ILocalizationResourceProvider,System.Exception,System.String[])">
            <summary>
            Handles the error by added it it the validation errors, and logging it.
            </summary>
            <param name="errorDescriptor"></param>
            <param name="resources"></param>
            <param name="errors"></param>
        </member>
        <member name="T:ComLib.Environments.EnvUtils">
            <summary>
            Utility class for loading inheritance based environments.
            </summary>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.GetEnvType(System.String)">
            <summary>
            Get environment type from name.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.ParseEnvsToItems(System.String)">
            <summary>
            Parse the selected environments and config paths.
            </summary>
            <param name="envNames">
            1. "prod,qa,dev". If the names are the same as the types.
            2. "prod1:prod,qa1:qa,mydev:dev" If the names are different that the env type names.
            </param>
            <returns>List of environment items.</returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.ParseEnvsToNames(System.String)">
            <summary>
            Parse the selected environments and config paths.
            </summary>
            <param name="envNames">"prod,qa,dev"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.GetSelectableEnvironments(System.Collections.Generic.List{ComLib.Environments.EnvItem})">
            <summary>
            Get list of names of environments that can be selected.
            </summary>
            <param name="_ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.Parse(System.String,System.String@)">
            <summary>
            Get list of inherited environments.
            </summary>
            <param name="selectedEnv">"prod,qa,dev"</param>
            <param name="firstEnv"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.ConvertNestedToFlatInheritance(ComLib.Environments.EnvItem,System.Collections.Generic.IDictionary{System.String,ComLib.Environments.EnvItem})">
            <summary>
            Traverses the nodes inheritance path to build a single flat delimeted line of 
            inheritance paths.
            e.g. returns "Prod,Uat,Qa,Dev".
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.LoadInheritance(ComLib.Environments.EnvItem,System.Collections.Generic.IDictionary{System.String,ComLib.Environments.EnvItem})">
            <summary>
            Loads an inheritance chain delimited by ,(comma)
            </summary>
            <param name="delimitedInheritancePath"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Environments.EnvUtils.CollectEnvironmentProps(System.Collections.Generic.List{ComLib.Environments.EnvItem},System.String,System.Func{ComLib.Environments.EnvItem,System.String})">
            <summary>
            Build a delimited inheritance path of environments names using each
            of the envitems supplied.
            e.g. prod,qa,dev.
            if "," is the delimeter and "prod", "qa" are the environment names.
            </summary>
            <param name="_inheritedChainedEnvs"></param>
            <returns></returns>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.CreateMethod">
            <summary>
            Method for Creating entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.UpdateMethod">
            <summary>
            Method for updating domain entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.DeleteMethod">
            <summary>
            Method for deleting domain entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.SaveMethod">
            <summary>
            Save method.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.RetrieveMethod">
            <summary>
            Method for retrieving domain entity.
            </summary>
        </member>
        <member name="F:ComLib.Entities.Management.EntityServiceSettings.RetrieveAllMethod">
            <summary>
            Method for retrieving all domain entities.
            </summary>
        </member>
        <member name="T:ComLib.CaptchaSupport.CaptchaImageHandler">
            <summary>
            Captcha Image Handler
            </summary>
        </member>
        <member name="M:ComLib.CaptchaSupport.CaptchaImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Generate a captcha image
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:ComLib.CaptchaSupport.CaptchaImageHandler.IsReusable">
            <summary>
            IsReusable handler.
            </summary>
        </member>
        <member name="P:ComLib.Arguments.ArgsSchema.Items">
            <summary>
            Should make this readonly or copy it
            </summary>
        </member>
        <member name="T:ComLib.Arguments.ArgsHelper">
            <summary>
            Helper class for argument parsing.
            </summary>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.GetArgsFromReciever(System.Object)">
            <summary>
            Gets a list of all the argument definitions that are applied
            (via attributes) on the argument reciever object supplied.
            </summary>
            <param name="argsReciever">Object containing args attributes.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.GetArgValues(System.Object)">
            <summary>
            Get the all argument names / values from the object that recievers the arguments.
            </summary>
            <param name="argsReciever"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.GetArgValues(System.Collections.IDictionary,System.Object)">
            <summary>
            Get the all argument names / values from the object that recievers the arguments.
            </summary>
            <param name="argsReciever"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.CheckAndApplyArgs(ComLib.Arguments.Args,System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Applies the argument values to the object argument reciever.
            </summary>
            <param name="parsedArgs"></param>
            <param name="argReciever"></param>
            <param name="errors"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.SetValue(System.Object,System.Collections.Generic.KeyValuePair{ComLib.Arguments.ArgAttribute,System.Reflection.PropertyInfo},System.String)">
            <summary>
            Set the argument value from command line on the property of the object
            recieving the value.
            </summary>
            <param name="argReciever"></param>
            <param name="val"></param>
            <param name="rawArgValue"></param>
        </member>
        <member name="M:ComLib.Arguments.ArgsHelper.InterpretValues(ComLib.Arguments.Args)">
            <summary>
            Set the argument value from command line on the property of the object
            recieving the value.
            </summary>
            <param name="argReciever"></param>
            <param name="val"></param>
            <param name="rawArgValue"></param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.HandlerHelper.SetHeaders(System.Web.HttpContext,System.String,System.Collections.IDictionary,System.String,System.Int32)">
            <summary>
            Set the headers using the configuration data.
            </summary>
            <param name="context"></param>
            <param name="extensionForContent"></param>
            <param name="config"></param>
            <param name="configSectionName"></param>
            <param name="hashcode"></param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(System.Boolean,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Check the parameter isValidCondition for validation condition.
            If it is not valid, adds the errmessage to the list of errors.
            </summary>
            <param name="isValidCondition"></param>
            <param name="errors"></param>
            <param name="errMessage"></param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(System.Boolean,ComLib.IErrors,System.String,System.String)">
            <summary>
            Validates the bool condition and adds the string error
            to the error list if the condition is invalid.
            </summary>
            <param name="isValid">Flag indicating if invalid.</param>
            <param name="error">Error message</param>
            <param name="errors"><see cref="T:ComLib.ValidationResults"/></param>
            <returns>True if isError is false, indicating no error.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(System.Boolean,ComLib.IErrors,System.String)">
            <summary>
            Validates the bool condition and adds the string error
            to the error list if the condition is invalid.
            </summary>
            <param name="isValid">Flag indicating if invalid.</param>
            <param name="error">Error message</param>
            <param name="results"><see cref="T:ComLib.ValidationResults"/></param>
            <returns>True if isError is false, indicating no error.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.TransferMessages(System.Collections.Generic.IList{System.String},ComLib.IErrors)">
            <summary>
            Transfers all the messages from the source to the validation results.
            </summary>
            <param name="messages"></param>
            <param name="results"></param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(System.Collections.Generic.IList{ComLib.IValidator},ComLib.IValidationResults)">
            <summary>
            Valdiates all the validation rules in the list.
            </summary>
            <param name="validationRules">List of validation rules to validate</param>
            <param name="validationErrors">List of validation results to populate.
            This list is populated with the errors from the validation rules.</param>
            <returns>True if all rules passed, false otherwise.</returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.Validate(ComLib.IValidator)">
            <summary>
            Validates the rule and returns a boolMessage.
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidationUtils.ValidateAndCollect(ComLib.IValidator,ComLib.IValidationResults)">
            <summary>
            Validates the rule and returns a boolMessage.
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.ValidationSupport.ValidatorWithRules">
            <summary>
            Base class for any validator.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.ValidationSupport.ValidatorWithRules"/> class.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.#ctor(System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.ValidationSupport.ValidatorWithRules"/> class
            with a lamda validator.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.Add(System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Add new validation rule.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.Add(System.String,System.Func{ComLib.ValidationEvent,System.Boolean})">
            <summary>
            Add new validation rule.
            </summary>
            <param name="ruleName"></param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.RemoveAt(System.Int32)">
            <summary>
            Remove at the specified index.
            </summary>
            <param name="ndx">The NDX.</param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.Remove(System.String)">
            <summary>
            Remove with the specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.Clear">
            <summary>
            Clear all the rules.
            </summary>
        </member>
        <member name="M:ComLib.ValidationSupport.ValidatorWithRules.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validates all the rules in the internal rule list.
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.ValidationSupport.ValidatorWithRules.Item(System.Int32)">
            <summary>
            Gets the validation rule at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:ComLib.ValidationSupport.ValidatorWithRules.Count">
            <summary>
            Number of rules.
            </summary>
            <value>The count.</value>
        </member>
        <member name="F:ComLib.Scaffolding.ScaffoldSettings.DisplayAllEntityProperies">
            <summary>
            TO_DO: This feature is not yet implemented.
            Flag indicating whether or not to display all the properties of 
            an entity in each entity "record" in the UI.
            </summary>
        </member>
        <member name="F:ComLib.Scaffolding.ScaffoldSettings.EnableEditDeleteLinksInRow">
            <summary>
            TO_DO: This feature is not yet implemented.
            Flag indicating whether or not to generate "delete, edit" links next 
            to each entity "record" in the UI.
            </summary>
        </member>
        <member name="T:ComLib.Scaffolding.IScaffoldingView">
            <summary>
            View for scaffolding.
            </summary>
        </member>
        <member name="T:ComLib.Scaffolding.ScaffoldController">
            <summary>
            Presenter class for reference data management.
            </summary>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldController.DisplayAddUI(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Display UI for adding new entity.
            </summary>
            <param name="entityName"></param>
            <param name="clientId"></param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldController.DisplayEditUI(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Display the UI for editing an entity.
            </summary>
            <param name="entityName"></param>
            <param name="entityId"></param>
            <param name="clientId"></param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldController.GetAll(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Get all the records for a specific type of business entity.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldController.Delete(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Delete the entity.
            </summary>
            <param name="entityName"></param>
            <param name="entityId"></param>
            <param name="clientId"></param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldController.Add(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Submit the data for adding a new entity
            </summary>
            <param name="entityName"></param>
            <param name="entityId"></param>
            <param name="clientId"></param>
        </member>
        <member name="M:ComLib.Scaffolding.ScaffoldController.Update(ComLib.Scaffolding.ScaffoldContext)">
            <summary>
            Submit the data for editing the entity.
            </summary>
            <param name="entityName"></param>
            <param name="entityId"></param>
            <param name="clientId"></param>
        </member>
        <member name="T:ComLib.LocationSupport.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Address.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.LocationSupport.Address"/> class.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initalize with data.
            </summary>
            <param name="street"></param>
            <param name="city"></param>
            <param name="state"></param>
            <param name="stateAbbr"></param>
            <param name="zip"></param>
        </member>
        <member name="M:ComLib.LocationSupport.Address.Set(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set the various fields of the address.
            </summary>
            <param name="street"></param>
            <param name="city"></param>
            <param name="state"></param>
            <param name="stateAbbr"></param>
            <param name="zip"></param>
        </member>
        <member name="M:ComLib.LocationSupport.Address.DefaultToNotApplicable">
            <summary>
            Default to not applicable for on-line classes.
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Address.DefaultToEmpty">
            <summary>
            Default to empty
            </summary>
        </member>
        <member name="M:ComLib.LocationSupport.Address.ToString">
            <summary>
            Single line format of address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.LocationSupport.Address.ToOneLine">
            <summary>
            Converts the address to a single line address separating the street,city,state,zip,country by ",".
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Empty">
            <summary>
            Empty address.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Address.CityId">
            <summary>
            Gets or sets the city id.
            </summary>
            <value>The city id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.StateId">
            <summary>
            Gets or sets the state id.
            </summary>
            <value>The state id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.CountryId">
            <summary>
            Gets or sets the country id.
            </summary>
            <value>The country id.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Zip">
            <summary>
            Gets or sets the zip.
            </summary>
            <value>The zip.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.StateAbbr">
            <summary>
            Gets or sets the state abbr.
            </summary>
            <value>The state abbr.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Street">
            <summary>
            Gets or sets the street.
            </summary>
            <value>The street.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.Venue">
            <summary>
            Gets or sets the street.
            </summary>
            <value>The street.</value>
        </member>
        <member name="P:ComLib.LocationSupport.Address.IsOnline">
            <summary>
            Is Online.
            </summary>
        </member>
        <member name="P:ComLib.LocationSupport.Address.FullAddress">
            <summary>
            Set the full address. (venue), (street), (city), (state), (zip), (country)
            </summary>
        </member>
        <member name="T:ComLib.Reflection.AssemblyUtils">
            <summary>
            Assembly related reflection utils.
            </summary>
        </member>
        <member name="M:ComLib.Reflection.AssemblyUtils.GetInternalFileContent(System.String,System.String)">
            <summary>
            Get the internal template content from the commonlibrary assembly.
            </summary>
            <param name="assemblyFolderPath">"CommonLibrary.Notifications.Templates."</param>
            <param name="fileName">"welcome.html"</param>
            <returns></returns>
        </member>
        <member name="F:ComLib.Queue.Queues._queues">
            <summary>
            Named queues.
            </summary>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessorFor``1(System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessorFor``1(System.Int32,System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessorFor``1(System.String,System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="namedHandler"></param>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessorFor``1(System.String,System.Action{System.Collections.Generic.IList{``0}},System.Int32)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="namedHandler"></param>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessor``1(ComLib.Queue.IQueueProcessor)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.AddProcessor(System.String,ComLib.Queue.IQueueProcessor)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.ContainsProcessorFor``1">
            <summary>
            Whether or not there is a named handler for the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.Queues.Enqueue``1(``0)">
            <summary>
            Enqueue the item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.Enqueue``1(System.String,``0)">
            <summary>
            Enqueue the item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="namedProcesser"></param>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.Enqueue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Enqueue the list of items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.Enqueue``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Enqueue the list of items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="namedProcesser"></param>
            <param name="items"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.Process``1">
            <summary>
            Process the queue handler for the specified type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Queue.Queues.Process(System.String)">
            <summary>
            Process the queue handler associated w/ the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="namedProcesser"></param>
        </member>
        <member name="M:ComLib.Queue.Queues.IsBusy``1">
            <summary>
            Whether or not the queue hanlder for the specified type is busy.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.Queues.IsBusy(System.String)">
            <summary>
            Whether or not the queue hanlder for the specified type is busy.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.Queues.IsIdle``1">
            <summary>
            Whether or not the queue hanlder for the specified type is IsIdle.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.Queues.IsIdle(System.String)">
            <summary>
            Whether or not the queue hanlder for the specified type is IsIdle.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.Queues.GetQueue``1">
            <summary>
            Get the queue processor for the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.Queues.GetMetaInfo">
            <summary>
            Get the metainfo for all the queues.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Queue.Queues.GetQueue(System.String)">
            <summary>
            Get queue processor w/ the specified name.
            </summary>
            <param name="namedProcesser"></param>
            <returns></returns>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.Name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.State">
            <summary>
            The current state of the queue.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.Count">
            <summary>
            Number of items still in the queue.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.LastProcessDate">
            <summary>
            The last time the queue was processed.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.DequeueSize">
            <summary>
            How many items are dequeued from this queue each time.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.NumberOfTimesProcessed">
            <summary>
            Number of times the queue has been processed.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.ElapsedTimeSinceLastProcessDate">
            <summary>
            Amount of time since the last process date.
            </summary>
        </member>
        <member name="F:ComLib.Queue.QueueStatus.TotalProcessed">
            <summary>
            Total number of times that have been processed.
            </summary>
        </member>
        <member name="M:ComLib.Queue.QueueStatus.#ctor(ComLib.Queue.QueueProcessState,System.Int32,System.DateTime,System.Int32,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Queue.QueueStatus"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="count">The count.</param>
            <param name="lastProcessDate">The last process date.</param>
            <param name="dequeueSize">Size of the dequeue.</param>
        </member>
        <member name="T:ComLib.Notifications.NotificationSettings">
            <summary>
            Notification configuration.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationSettings.#ctor">
            <summary>
            Default constructor to support dependency injection of properties by Spring.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.NotificationSettings.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            initialize using supplied settings.
            </summary>
            <param name="enableNotifications"></param>
            <param name="from"></param>
            <param name="intervalSchedule"></param>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.Item(System.String)">
            <summary>
            Get/set additional values.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.Settings">
            <summary>
            Provide read-only access to settings.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.From">
            <summary>
            From.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.WebSiteUrl">
            <summary>
            Url of the website.
            http://www.knowledgedrink.com
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.WebSiteUrlForPost">
            <summary>
            Url for looking at a specific post 
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.EnableNotifications">
            <summary>
            Flag to enable/disable notifications.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.NumberOfMessagesToProcessAtOnce">
            <summary>
            Number of messages to send per batch.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.IntervalSchedule">
            <summary>
            How often to check for and send messages.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.FeedBackEmail">
            <summary>
            The email to use to send user feedback to.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.DebugOutputMessageToFile">
            <summary>
            For debugging purposes, whether or not to debug messages to file.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.DebugOutputMessageFolderPath">
            <summary>
            Location of debug messages.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.DebugSleepIfNotEnabled">
            <summary>
            Flag to simulate sending emails by sleeping thread.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.DebugSleepTimeIfNotEnabled">
            <summary>
            Amount of time to simulate sending.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.NotificationSettings.LogMessage">
            <summary>
            Log message for errors.
            </summary>
        </member>
        <member name="T:ComLib.Notifications.Notifier">
            <summary>
            Notification services.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.Notifier.Init(ComLib.EmailSupport.IEmailService,ComLib.Notifications.NotificationSettings)">
            <summary>
            Initialize using default settings.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.Notifier.WelcomeNewUser(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send welcome email to new user.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="firstname"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:ComLib.Notifications.Notifier.SendToFriend(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send the website url to a friend.
            </summary>
        </member>
        <member name="M:ComLib.Notifications.Notifier.SendToFriendPost(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send an email to a friend with a link to a post on the page.
            </summary>
            <param name="toEmail"></param>
            <param name="subject"></param>
            <param name="toFirstname"></param>
            <param name="fromName"></param>
            <param name="messageToFriend"></param>
            <param name="postTitle"></param>
            <param name="postUrl"></param>
        </member>
        <member name="M:ComLib.Notifications.Notifier.RemindUserPassword(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send remind account/password email to user.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="firstname"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="P:ComLib.Notifications.Notifier.Settings">
            <summary>
            Get/Set the settings.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.Queue">
            <summary>
            The notification message queue.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.MessageDefs">
            <summary>
            Message definitions.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.AccountService">
            <summary>
            The account services.
            </summary>
        </member>
        <member name="P:ComLib.Notifications.Notifier.MessageService">
            <summary>
            Messaging service for send feedback, post, links to site.
            </summary>
        </member>
        <member name="T:ComLib.Models.Model">
            <summary>
            DomainModel representing class/table mappings.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.RepositoryType">
            <summary>
            Get /set the repository type.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Includes">
            <summary>
            List of names of model whose properties to include.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.ComposedOf">
            <summary>
            List of objects that compose this model.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.OneToMany">
            <summary>
            One-to-many relationships.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.OneToOne">
            <summary>
            One-to-many relationships.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Validations">
            <summary>
            Validations to perform on entity.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.ManagedBy">
            <summary>
            List of roles that can manage ( delete ) instances of this model.
            </summary>
            <example>ManagedBy = new List(string){ "Owner", "Moderator", "Admin" }; </example>
        </member>
        <member name="P:ComLib.Models.Model.LookupOn">
            <summary>
            List of properties that can be used to lookup up an entity.
            e.g. These should typically be the Id ( integer ) and "Name" ( string )
            </summary>
            <example>LookupOn = new List(string){ "Id", "Name" };</example>
        </member>
        <member name="P:ComLib.Models.Model.AssemblyName">
            <summary>
            Assembly name.
            </summary>
        </member>
        <member name="P:ComLib.Models.Model.Settings">
            <summary>
            Additional settings to make it easy to add new settings dynamically.
            Also allows for inheritance.
            </summary>
        </member>
        <member name="T:ComLib.Models.Include">
            <summary>
            Composition information.
            </summary>
        </member>
        <member name="P:ComLib.Models.Include.Name">
            <summary>
            Name of the model that in the <see cref="T:ComLib.Models.ModelContainer"/> that
            represents this composition.
            </summary>
        </member>
        <member name="T:ComLib.Models.Composition">
            <summary>
            Composition information.
            </summary>
        </member>
        <member name="T:ComLib.Models.ValidationItem">
            <summary>
            Validation definition for a specific property.
            </summary>
        </member>
        <member name="M:ComLib.Models.ValidationItem.#ctor(System.String,System.Type)">
            <summary>
            Initialize the validator the property.
            </summary>
            <param name="property"></param>
            <param name="validator"></param>
        </member>
        <member name="P:ComLib.Models.ValidationItem.PropertyToValidate">
            <summary>
            The name of the property on the entity to validate.
            </summary>
        </member>
        <member name="P:ComLib.Models.ValidationItem.PropertyValidator">
            <summary>
            The datatype of the validator to use for validating this property.
            </summary>
        </member>
        <member name="P:ComLib.Models.ValidationItem.IsStatic">
            <summary>
            Whether or not the validator is instance based or can be statically called.
            </summary>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportSettings.ExportBatchSize">
            <summary>
            Gets or sets the size of the export batch.
            </summary>
            <value>The size of the export batch.</value>
        </member>
        <member name="P:ComLib.ImportExport.ImportExportSettings.ImportBatchSize">
            <summary>
            Gets or sets the size of the export batch.
            </summary>
            <value>The size of the export batch.</value>
        </member>
        <member name="T:ComLib.Calendars.CalendarUtils">
            <summary>
            Helper class for holidays.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalendarUtils.InterpretHolidays(System.Collections.Generic.List{ComLib.Calendars.Holiday},System.Int32)">
            <summary>
            Converts the holiday items into DateTime objects for the specified year.
            </summary>
            <param name="holidays"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Calendars.CalendarUtils.GetUnitedStatesHolidays">
            <summary>
            Get United States holidays.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Data.DBQuery">
            <summary>
            Class containing various helper methods for accessing data.
            </summary>
        </member>
        <member name="M:ComLib.Data.DBQuery.Query``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.String,System.Data.DbType,System.Object,ComLib.Data.IRowMapper{System.Data.IDataReader,``0})">
            <summary>
            Executes the rowmapper with a single input parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <param name="paramName">E.g. "userName"</param>
            <param name="paramType">string</param>
            <param name="paramValue">user001</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBQuery.QueryNoParams``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,ComLib.Data.IRowMapper{System.Data.IDataReader,``0})">
            <summary>
            Executes the rowmapper with a single input parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbHelper">Database helper</param>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBQuery.Query``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],ComLib.Data.IRowMapper{System.Data.IDataReader,``0})">
            <summary>
            Executes the rowmappers
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbHelper">Database helper</param>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>       
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <param name="dbParameters">Array of parameters for the query.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBQuery.Query``2(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],ComLib.Data.IRowMapper{System.Data.IDataReader,``0},System.String)">
            <summary>
            Executes the rowmapper and get a single output parameter result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbHelper">Database helper</param>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <param name="dbParameters">Array of parameters for the query</param>
            <param name="outputParamName">The name of the output parameter</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Data.DBQuery.Query``1(ComLib.Data.IDBHelper,System.String,System.Data.CommandType,System.Data.Common.DbParameter[],ComLib.Data.IRowMapper{System.Data.IDataReader,``0},System.String[])">
            <summary>
            Executes the rowmapper and get multiple output parameter results.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">Store procedure name. E.g. "Posts_GetPostsByUser</param>
            <param name="commandType">StoredProcedure</param>
            <param name="rowMapper">The mapper that maps a record to an object.</param>
            <param name="dbParameters">Array of parameters for the query</param>
            <param name="outputParamNames">Array of output parameter names.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Configuration.ConfigSourceDecorator">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.#ctor(ComLib.Configuration.IConfigSource)">
            <summary>
            Initialize w/ the actual provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Init">
            <summary>
            Initialization after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Load">
            <summary>
            Load the configuration.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Save">
            <summary>
            Save the configuration
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Get``1(System.String)">
            <summary>
            Get value of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetDefault``1(System.String,``0)">
            <summary>
            Get value or default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Get(System.String,System.String)">
            <summary>
            Get the section/key value.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Get``1(System.String,System.String)">
            <summary>
            Get typed section/key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Get typed section/key value or default  value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetSection(System.String)">
            <summary>
            Get section with name.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetSection(System.String,System.Int32)">
            <summary>
            Get section with specified name at index.
            </summary>
            <param name="sectionName"></param>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Contains(System.String,System.String)">
            <summary>
            Check if the section/key exists.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Add(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add the sectionname, key, value.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Add(System.String,System.String,System.Object)">
            <summary>
            Add the sectionname, key/value.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.AddMulti(System.String,System.Object,System.Boolean)">
            <summary>
            Add multiple value to the same section/key
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Add(System.Object,System.Object)">
            <summary>
            Add the key/value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Clear">
            <summary>
            Clearn all the entries.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Contains(System.Object)">
            <summary>
            Indicates whether the key exists.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.Remove(System.Object)">
            <summary>
            Remove the key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceDecorator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.SourcePath">
            <summary>
            The configuration source path.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Name">
            <summary>
            Name of the configuration source.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Item(System.String,System.String)">
            <summary>
            Get / set section/key value.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Sections">
            <summary>
            Get the list of sections.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.IsFixedSize">
            <summary>
            Indicate if fixed size.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.IsReadOnly">
            <summary>
            Is readonly
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Keys">
            <summary>
            Get the keys.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Item(System.Object)">
            <summary>
            Get / set the value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.IsSynchronized">
            <summary>
            Whether or not this is synchronized.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceDecorator.SyncRoot">
            <summary>
            Get the synroot
            </summary>
        </member>
        <member name="M:ComLib.Configuration.Configs.Init(ComLib.Data.ConnectionInfo)">
            <summary>
            Initialize db connection for LoadFromDb methods.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadFiles(System.String)">
            <summary>
            Load config from single file or multiple files.
            </summary>
            <param name="envName">"prod"</param>
            <param name="path">"prod.config" or multiple paths delimited by command.
            e.g. "prod.config, qa.config, dev.config"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadFiles(System.String,System.String)">
            <summary>
            Load config from single file or multiple files.
            </summary>
            <param name="envName">"prod"</param>
            <param name="path">"prod.config" or multiple paths delimited by command.
            e.g. "prod.config, qa.config, dev.config"</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadDb(System.String)">
            <summary>
            Load from the database
            </summary>
            <param name="configNames">Comma delimited names of the configs to load
            from the database.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadObject(System.Object)">
            <summary>
            Load config settings into a configSource from an object using
            it's public properties.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Configuration.Configs.LoadString(System.String)">
            <summary>
            Load from string.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Configuration.ConfigSourceMulti">
            <summary>
            Config source multi - list of multiple config sources.
            Need to hit make this thread safe.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.#ctor(System.Collections.Generic.IList{ComLib.Configuration.IConfigSource})">
            <summary>
            Config source list.
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.configSource_OnConfigSourceChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for on config source changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Init">
            <summary>
            Initialization after construction.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Load">
            <summary>
            Load settings.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Save">
            <summary>
            Save the sources.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Merge">
            <summary>
            Merge all the config sources.
            </summary>
        </member>
        <member name="M:ComLib.Configuration.ConfigSourceMulti.Merge(ComLib.Configuration.IConfigSection,ComLib.Configuration.IConfigSection)">
            <summary>
            Merge with config source specified.
            </summary>
            <param name="configSource"></param>
        </member>
        <member name="E:ComLib.Configuration.ConfigSourceMulti.OnConfigSourceChanged">
            <summary>
            Notifies subscribers when any configsource was changed.
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceMulti.SourcePath">
            <summary>
            Get the source paths.
            e.g. c:\app\prod.config,c:\app\dev.config
            </summary>
        </member>
        <member name="P:ComLib.Configuration.ConfigSourceMulti.Name">
            <summary>
            Get the full name of this source.
            e.g. prod.config,qa.config,dev.config.
            </summary>
        </member>
        <member name="T:ComLib.Collections.IndexSpan">
            <summary>
            Represents a set of indexes which will be iterated on.
            </summary>
        </member>
        <member name="M:ComLib.Collections.IndexSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="F:ComLib.Collections.IndexSpan.StartIndex">
            <summary>
            The start index.
            </summary>
        </member>
        <member name="F:ComLib.Collections.IndexSpan.Count">
            <summary>
            Number of items represented in this iteration.
            </summary>
        </member>
        <member name="P:ComLib.Collections.IndexSpan.EndIndex">
            <summary>
            The ending index, as calculated using the startIndex and count.
            </summary>
        </member>
        <member name="T:ComLib.Collections.IterationSplitter">
            <summary>
            Class used to split indexes into iteration spans.
            </summary>
        </member>
        <member name="M:ComLib.Collections.IterationSplitter.CalculateItemsPerIteration(System.Double,System.Int32)">
            <summary>
            Calculate how many items there will be in an iteration.
            </summary>
            <param name="totalCount"></param>
            <param name="numberOfIterations"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.IterationSplitter.SplitIterations(System.Int32,System.Int32)">
            <summary>
            Splits the iteratons into parts(spans).
            </summary>
            <param name="totalCount"></param>
            <param name="itemsPerIteration"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.IterationSplitter.Split(System.Int32,System.Int32)">
            <summary>
            Splits the iteratons into parts(spans).
            </summary>
            <param name="totalCount"></param>
            <param name="itemsPerIteration"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Collections.ParsableCollection">
            <summary>
            Collection of parsed values from delimited string.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.ParsableCollection.#ctor(System.Char)">
            <summary>
            Collection.
            </summary>
        </member>
        <member name="M:ComLib.Collections.ParsableCollection.Contains(System.String)">
            <summary>
            Checks whether or not the value is contained in 
            delimited values.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.ParsableCollection.Parse">
            <summary>
            
            </summary>
        </member>
        <member name="P:ComLib.Collections.ParsableCollection.DelimitedValues">
            <summary>
            String representing delimited values.
            user1; user2;
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.Process(ComLib.Models.ModelContext)">
            <summary>
            Process.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.Process(ComLib.Models.ModelContext,System.Collections.Generic.IList{ComLib.CodeGeneration.ICodeBuilder})">
            <summary>
            Process.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="builders">The builders.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.Process(ComLib.Models.ModelContext,System.Action{System.Collections.Generic.IList{ComLib.CodeGeneration.ICodeBuilder}},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Process.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="populator">The populator.</param>
            <param name="modelsToInclude">The names of the models to process. This is used a include filter.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.CreateInstallFiles(ComLib.Models.ModelContext,System.String[])">
            <summary>
            Builds the install files.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="models">The name of the model to process. (optional)</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.CreateDatabase(ComLib.Models.ModelContext,System.String[])">
            <summary>
            Builds the database.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="models">The name of the model to process. (optional)</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.CreateCode(ComLib.Models.ModelContext,System.String[])">
            <summary>
            Builds the code.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="models">The name of the model to process. (optional)</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.CreateAll(ComLib.Models.ModelContext,System.String[])">
            <summary>
            Builds all.
            </summary>
            <param name="ctx">The model context containing all the models.</param>
            <param name="models">The name of the model to process. (optional)</param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilder.GetModelNamesToProcess(System.String[])">
            <summary>
            Get the models names as a dictionary.
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Web.HttpHandlers.CssHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
            header of the HTML document in site.master. 
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.Init(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Set the configuration settings as an IDictionary.
            </summary>
            <param name="sectionname">Section name</param>
            <param name="useSection">Whether or not to use the section name.</param>
            <param name="config"></param>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.GetFile(System.String)">
            <summary>
            Get the css file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Web.HttpHandlers.CssHandler.RemoveWhitespace(System.String)">
            <summary>
            Removes whitespace from .css file.
            </summary>
        </member>
        <member name="T:ComLib.Entities.RepositoryInMemory`1">
            <summary>
            UNIT - Test  Implementation.
            
            NOTE: This is only used for UNIT-TESTS:
            The real repository is RepositorySql which actually connects to a database.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:InMemoryRepository&lt;int, T&gt;"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:InMemoryRepository&lt;int, T&gt;"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:InMemoryRepository&lt;int, T&gt;"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Create(`0)">
            <summary>
            Create an entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Get(System.Int32)">
            <summary>
            Retrieve the entity by it's key/id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.GetAll">
            <summary>
            Retrieve all the entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.GetAllItems">
            <summary>
            Retrieve all the entities into a non-generic list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Update(`0)">
            <summary>
            UPdate the entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Delete(System.Int32)">
            <summary>
            Delete the entitiy by it's key/id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.DeleteAll">
            <summary>
            Delete all entities from the repository.
            </summary>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Delete(ComLib.Data.IQuery)">
            <summary>
            Delete using the Criteria object.
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.First(ComLib.Data.IQuery)">
            <summary>
            Get the first one that matches the filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Find(ComLib.Data.IQuery)">
            <summary>
            Find by query
            </summary>
            <param name="queryString"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Find(System.String,System.Boolean)">
            <summary>
            Find entities by the query. 
            </summary>
            <param name="queryString">"Id = 23"</param>
            <param name="isFullSql">Whether or not the query contains "select from {table} "
            This shuold be removed from this datatable implementation.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Find(ComLib.Data.IQuery,System.Int32,System.Int32)">
            <summary>
            Get items by page
            </summary>
            <param name="criteria">Criteria object representing filter</param>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Get items by page using filter.
            </summary>
            <param name="pageNumber">1 The page number to get.</param>
            <param name="pageSize">15 Number of records per page.</param>
            <param name="totalPages">Total number of pages found.</param>
            <param name="totalRecords">Total number of records found.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.FindRecent(System.Int32,System.Int32)">
            <summary>
            Get items by page based on latest / most recent create date.
            </summary>
            <param name="pageNumber">1</param>
            <param name="pageSize">15 ( records per page )</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.InternalGroup``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Group(date)(CreateDate)
            </summary>
            <typeparam name="TGroup"></typeparam>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Group(ComLib.Data.IQuery,System.String[])">
            <summary>
            Get datatable using mutliple columns in group by and criteria/filter.
            </summary>
            <param name="criteria"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.InternalDistinct``1(System.String,ComLib.Data.IQuery)">
            <summary>
            Get the distinct values in the specified column.
            </summary>
            <typeparam name="TVal"></typeparam>
            <param name="columnName"></param>
            <param name="criteria">Filter to apply before getting distinct columns.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Increment(System.String,System.Int32,System.Int32)">
            <summary>
            Increments the field specified by the expression.
            </summary>
            <param name="fieldName">The fieldname.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Decrement(System.String,System.Int32,System.Int32)">
            <summary>
            Decrements the field specified by the expression.
            </summary>
            <param name="fieldName">The fieldname.</param>
            <param name="by">The by.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.ToTable">
            <summary>
            Get Table containing all the records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.ToTable(ComLib.Data.IQuery)">
            <summary>
            Get datatable using the IQuery filter
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.ToTableBySql(System.String)">
            <summary>
            Get datatable using the IQuery filter
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.GetRow(System.Int32)">
            <summary>
            Retrieve the entity by it's key/id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.ExecuteAggregateWithFilter``1(System.String,System.String,System.String)">
            <summary>
            Just change how the query is used. The existing Count, Min, Max base methods can stay the same.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="funcName"></param>
            <param name="columnName"></param>
            <param name="filter">Filter to apply before running aggregate function.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.GetNextId">
            <summary>
            Gets the next id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.TransferData(System.Data.DataRow,`0)">
            <summary>
            Transfer the entity data into the DataRow and the entity itself.
            </summary>
            <param name="row"></param>
            <param name="entity"></param>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Map(System.Data.DataRow[])">
            <summary>
            Maps the DataRows into a list of the typed Entities.
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Entities.RepositoryInMemory`1.Map(System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            Maps the enumerable collection of datarows into a List of entities.
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComLib.Logging.LogInstance" -->
        <member name="M:ComLib.Logging.LogInstance.#ctor(System.String,System.Type)">
            <summary>
            Initialize with reference to the actually logger that does the logging
            and the calling type of the logger.
            </summary>
            <param name="loggerName"></param>
            <param name="callingType"></param>
        </member>
        <member name="M:ComLib.Logging.LogInstance.Log(ComLib.Logging.LogEvent)">
            <summary>
            Log the event to file.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="T:ComLib.Diagnostics.DiagnosticsService">
            <summary>
            Get diagnostic information about the machine and current process.
            This includes information for the following set of data:
            1. MachineInfo
            2. Env_System
            3. Env_User
            4. Drives
            5. AppDomain
            6. Services
            7. Processes
            8. Modules
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.#ctor">
            <summary>
            Initalizes a list representing a set of computer/application related data that can be diagnosed.
            This includes:
            1. Machine Information, 2. Environment variables. 3. Drives, 4. AppDomain ( dlls loaded )., etc.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.#ctor(System.Boolean,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Initalizes a list representing a set of computer/application related data that can be diagnosed.
            This includes:
            1. Machine Information, 2. Environment variables. 3. Drives, 4. AppDomain ( dlls loaded )., etc.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.#ctor(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Initalizes a list representing a set of computer/application related data that can be diagnosed.
            This includes:
            1. Machine Information, 2. Environment variables. 3. Drives, 4. AppDomain ( dlls loaded )., etc.
            </summary>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.FilterOn(System.Boolean,System.String)">
            <summary>
            Filter the diagnostics on the supplied comma delimited list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="groupNamesDelimited">"MachineInfo,AppDomain,Drives"</param>
            <param name="include">Whether or the the groups supplied should be
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.FilterOn(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Filter the diagnostics on the list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="groupNamesDelimited">"MachineInfo,AppDomain,Drives"</param>
            <param name="include">Whether or the the groups supplied should be
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.FilterOn(System.Boolean,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Filter the diagnostics on the supplied list of groups
            representing the areas that can be diagnosed.
            </summary>
            <param name="groupNamesDelimited">"MachineInfo,AppDomain,Drives"</param>
            <param name="include">Whether or the the groups supplied should be
            included, false value representing exclusion.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.GetDataTextual">
            <summary>
            Get all diagnostic information about currently running process
            and machine information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.WriteInfo(System.String)">
            <summary>
            Write all the diagnostic info to file.
            </summary>
            <param name="filePath"></param>
            <param name="append"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.WriteInfo(System.String,System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="commaDelimitedGroups">"Machine,AppDomain"</param>
            <param name="path">Path of file to write information to.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.WriteInfo(System.String,System.String,ComLib.Diagnostics.DiagnosticGroup[])">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="commaDelimitedGroups">"Machine,AppDomain"</param>
            <param name="path">Path of file to write information to.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.GetData">
            <summary>
            Get all diagnostic information about currently running process
            and machine information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.WriteInfoInternal(System.String,System.String)">
            <summary>
            Write diagnostic information associated with the delimited list
            of groups specified.
            </summary>
            <param name="commaDelimitedGroups">"Machine,AppDomain"</param>
            <param name="path">Path of file to write information to.</param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.BuildDiagnostics(System.Text.StringBuilder,System.Collections.IDictionary)">
            <summary>
            Build a textual representation of all the diagnostics information.
            </summary>
            <param name="buffer"></param>
            <param name="diagnostics"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.BuildSection(System.Text.StringBuilder,System.Collections.IDictionary,System.Object)">
            <summary>
            Builds a "INI" formatted represention of the diagnostic information
            for the group specified.
            </summary>
            <param name="buffer"></param>
            <param name="diagnostics"></param>
            <param name="sectionName"></param>
        </member>
        <member name="M:ComLib.Diagnostics.DiagnosticsService.BuildProperties(System.Text.StringBuilder,System.Collections.IDictionary)">
            <summary>
            Recursively builds an ini formatted representation of all the diagnostic 
            information.
            </summary>
            <param name="buffer"></param>
            <param name="diagnostics"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Diagnostics.DiagnosticsService.GroupNames">
            <summary>
            The names of the groups representing what can be diagnosed.
            </summary>
        </member>
        <member name="P:ComLib.Diagnostics.DiagnosticsService.GroupNamesAll">
            <summary>
            The names of the groups representing what can be diagnosed.
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionarySet`1">
            <summary>
            2 Level Tree like dictionary.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Add(`0,`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.TryGetValue(`0,`0@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Add(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Contains(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.CopyTo(System.Collections.Generic.KeyValuePair{`0,`0}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Remove(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Union(ComLib.Collections.ISet{`0})">
            <summary>
            Unions the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Intersect(ComLib.Collections.ISet{`0})">
            <summary>
            Intersects the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.ExclusiveOr(ComLib.Collections.ISet{`0})">
            <summary>
            Exclusives the or.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Minus(ComLib.Collections.ISet{`0})">
            <summary>
            Minuses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:ComLib.Collections.DictionarySet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionarySet`1.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:ComLib.Caching.CacheItemDescriptor">
            <summary>
            Descriptor class to describe/display the
            contents of an item in the cache.
            </summary>
        </member>
        <member name="M:ComLib.Caching.CacheItemDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initialize the read-only properties.
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="M:ComLib.Caching.CacheItemDescriptor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize the read-only properties.
            </summary>
            <param name="key"></param>
            <param name="type"></param>
        </member>
        <member name="P:ComLib.Caching.CacheItemDescriptor.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:ComLib.Caching.CacheItemDescriptor.ItemType">
            <summary>
            CacheItemType
            </summary>
        </member>
        <member name="P:ComLib.Caching.CacheItemDescriptor.Data">
            <summary>
            Get the serialzied data.
            </summary>
        </member>
        <member name="M:ComLib.Web.UI.Controls.CascadeDropDownListControl.CreateChildControls">
            <summary>
            Add server controls to the controls collection so that the framework
            can render them.
            </summary>
        </member>
        <member name="M:ComLib.Web.UI.Controls.CascadeDropDownListControl.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render the contents of the control.
            </summary>
            <param name="writer"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComLib.Web.UI.Controls.CascadeDropDownListControl.BuildClientSideJavascript" -->
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.NeedsInitialization">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.AddCustomInitialItem">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.InitialItemName">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.InitialItemValue">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.OnSelectionChangedClientSideHandler">
            <summary>
            Javascript event handler for the selection changed event
            on the drop-down listbox.
            </summary>
            <example>"kdStates.LoadDataUsingFilter" or "countryChangedHandler"
            </example>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.UseIdForFilterValue">
            <summary>
            Flag to indicate if this client side object's data
            will be initiated / loaded from url ajax page.
            </summary>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.UrlRetrieveAllService">
            <summary>
            Url of the page to get all the values.
            </summary>
            <example>AjaxLocation.aspx?action=GetAllCountries</example>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.SelectedValue">
            <summary>
            The value to use when restoring state.
            </summary>
            <example>"1" This is the value of the drop-down list option.</example>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.JsObjectName">
            <summary>
            Name of the javascript client side object.
            </summary>
            <example>"kdCountry"</example>
        </member>
        <member name="P:ComLib.Web.UI.Controls.CascadeDropDownListControl.ResultTagName">
            <summary>
            Name of the result tag name from the url to retrieve
            values.
            </summary>
            <example>"state" or "country"</example>
        </member>
        <member name="M:ComLib.ExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ExpressionHelper.GetPropertyName(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ExpressionHelper.GetPropertyNameAndValue(System.Linq.Expressions.Expression{System.Func{System.Object}},System.String@)">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.ExpressionHelper.Build``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ComLib.RepositoryExpressionTypeHelper.GetText(System.Linq.Expressions.ExpressionType)">
            <summary>
            Get the sql text equivalent of the expression type.
            </summary>
            <param name="expType"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.Logging.Logger">
            <summary>
            Light weight logging class.
            </summary>
            <remarks>
            The provider is initialize to an instance of <see cref="!:LoggerConsole"/>
            so it's ready be used immediately.
            </remarks>
        </member>
        <member name="F:ComLib.Logging.Logger._loggers">
            <summary>
            Default the logger provider to the consolelogger so the logger
            is ready to use immediately.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.#ctor">
            <summary>
            Prevent instantiation. This is a static class.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.Log(ComLib.Logging.LogLevel,System.Object)">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Log(ComLib.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Log(ComLib.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Warn(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Warn(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Error(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Error(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Debug(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Debug(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Fatal(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Info(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Info(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Message(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Message(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ComLib.Logging.Logger.IsEnabled(System.String,ComLib.Logging.LogLevel)">
            <summary>
            Determine if the loglevel is enabled for the following 
            </summary>
            <param name="loggerName">The name of the logger to check loglevel for.</param>
            <param name="logLevel">The log level.</param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.Logger.GetNew``1">
            <summary>
            Get a logger. 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.Logger.GetNew``1(System.String)">
            <summary>
            Get a new logger and associate with the type specified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.Logger.Add(ComLib.Logging.ILogMulti)">
            <summary>
            Add a named logger.
            </summary>
            <param name="loggerName"></param>
            <param name="logger"></param>
        </member>
        <member name="M:ComLib.Logging.Logger.Clear">
            <summary>
            Clear all the loggers and add only the Console logger to the 
            the default logger.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.Get(System.String)">
            <summary>
            Get the named logger using the string indexer.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.Logger.Get(System.Int32)">
            <summary>
            Get the named logger using the string indexer.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.Logger.Init(ComLib.Logging.ILogMulti)">
            <summary>
            Initialize the default logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ComLib.Logging.Logger.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.ShutDown">
            <summary>
            Shutdown all loggers.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.GetLogInfo">
            <summary>
            Get all the log files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Logging.Logger.ExecuteRead(System.Action)">
            <summary>
            Exectutes the action under a read operation after
            aquiring the reader lock.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ComLib.Logging.Logger.ExecuteWrite(System.Action)">
            <summary>
            Exectutes the action under a write operation after
            aquiring the writer lock.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ComLib.Logging.Logger.AcquireReaderLock">
            <summary>
            Gets the reader lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.ReleaseReaderLock">
            <summary>
            Release the reader lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.AcquireWriterLock">
            <summary>
            Acquire the writer lock.
            </summary>
        </member>
        <member name="M:ComLib.Logging.Logger.ReleaseWriterLock">
            <summary>
            Release the writer lock.
            </summary>
        </member>
        <member name="P:ComLib.Logging.Logger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether default logger is debug enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether default logger is error enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether default logger is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether default logger is info enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether default logger is warn enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ComLib.Logging.Logger.Default">
            <summary>
            Get the default logger.
            </summary>
        </member>
        <member name="P:ComLib.Logging.Logger.Count">
            <summary>
            Get the number of the loggers.
            </summary>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateValidator">
            <summary>
            Validator for StatusUpdate
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateValidator.ValidateInternal(ComLib.ValidationEvent)">
            <summary>
            Validation method for the entity.
            </summary>
            <param name="target">The target.</param>
            <param name="useTarget">if set to <c>true</c> [use target].</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateRepository">
            <summary>
            Generic repository for persisting StatusUpdate.
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRepository.Create(ComLib.StatusUpdater.StatusUpdate)">
            <summary>
            Create the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.StatusUpdater.StatusUpdateRepository.Update(ComLib.StatusUpdater.StatusUpdate)">
            <summary>
            Update the entity using sql.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:ComLib.StatusUpdater.StatusUpdateRowMapper">
            <summary>
            RowMapper for StatusUpdate.
            </summary>
            <typeparam name="?"></typeparam>
        </member>
        <member name="T:ComLib.Patterns.ICommand">
            <summary>
            Command.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.ICommand.Execute">
            <summary>
            Execute
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComLib.Patterns.ICommandContextual">
            <summary>
            Command with contextual method signature.
            </summary>
        </member>
        <member name="M:ComLib.Patterns.ICommandContextual.Execute(ComLib.IActionContext)">
            <summary>
            Execute with contextual information and return bool/message.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComLib.Parsing.LexArgs" -->
        <member name="F:ComLib.Parsing.LexArgs._defaultSettings">
            <summary>
            Default settings
            </summary>
        </member>
        <member name="M:ComLib.Parsing.LexArgs.Parse(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexArgs.ParseList(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexArgs.Parse(System.String,ComLib.Parsing.LexSettings)">
            <summary>
            Parse supplied text using supplied settings.
            </summary>
            <param name="line"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Parsing.LexArgs.#ctor">
            <summary>
            Create using default settings.
            </summary>
        </member>
        <member name="M:ComLib.Parsing.LexArgs.#ctor(ComLib.Parsing.LexSettings)">
            <summary>
            Create with supplied settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryRepository">
            <summary>
            Generic repository for persisting NamedQuery.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.NamedQueries.NamedQueryRepository"/> class.
            </summary>
        </member>
        <member name="M:ComLib.NamedQueries.NamedQueryRepository.#ctor(ComLib.Data.ConnectionInfo,ComLib.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="!:Repository&lt;TId, T&gt;"/> class.
            </summary>
            <param name="connectionInfo">The connection info.</param>
            <param name="helper">The helper.</param>
        </member>
        <member name="T:ComLib.NamedQueries.NamedQueryRowMapper">
            <summary>
            RowMapper for NamedQuery.
            </summary>
            <typeparam name="?"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComLib.Maps.YahooMapUrlBuilder" -->
        <member name="M:ComLib.Maps.YahooMapUrlBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComLib.Maps.GoogleMapUrlBuilder"/> class.
            </summary>
        </member>
        <member name="M:ComLib.Maps.YahooMapUrlBuilder.Build(ComLib.LocationSupport.Address)">
            <summary>
            builds the url.
            e.g. 
            Address : 439 calhoun ave. bronx, ny 10465
            ="439+calhoun+ave.+bronx,+ny+10465"
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ComLib.Maps.YahooMapUrlBuilder.UrlPrefix" -->
        <member name="M:ComLib.MapperSupport.Mapper.Map``1(System.Collections.IDictionary)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.Map``1(System.Collections.IDictionary,ComLib.IErrors)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapIniFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapCsv``1(ComLib.CsvParse.CsvDoc)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapCsv``1(ComLib.CsvParse.CsvDoc,ComLib.IErrors)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapCsvFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapXmlFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapJsonFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapYamlFile``1(System.String)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapToCsv``1(System.Collections.Generic.IList{``0},System.String,ComLib.IErrors)">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="M:ComLib.MapperSupport.Mapper.MapToCsv``1(System.Collections.Generic.IList{``0},System.String,ComLib.IErrors,System.Collections.Generic.List{System.String})">
            <summary>
            Map items from the dictionary data to items of Type T.
            Each key in the data corresponds to a nested IDictionary which contains key/value
            pairs representing the properties/values of the type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="errors"></param>        
            <returns></returns>
        </member>
        <member name="T:ComLib.Calendars.CalanderDao">
            <summary>
            Data provider for holidays.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalanderDao.#ctor">
            <summary>
            Allow default construction.
            </summary>
        </member>
        <member name="M:ComLib.Calendars.CalanderDao.#ctor(System.String,System.Collections.Generic.List{ComLib.Calendars.Holiday})">
            <summary>
            Initialize with calendar code and holidays list.
            </summary>
            <param name="calendarCode"></param>
            <param name="holidays"></param>
        </member>
        <member name="M:ComLib.Calendars.CalanderDao.Load(System.String,System.Collections.Generic.List{ComLib.Calendars.Holiday})">
            <summary>
            Interpret the holidays.
            </summary>
            <param name="calendarCode"></param>
            <param name="?"></param>
        </member>
        <member name="M:ComLib.Calendars.CalanderDao.Holidays(System.Int32,System.Int32)">
            <summary>
            Get the holidays.
            </summary>
            <param name="startyear"></param>
            <param name="endYear"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Calendars.CalanderDao.CalendarCode">
            <summary>
            Get /set the calendar code.
            </summary>
        </member>
        <member name="T:ComLib.Cryptography.Crypto">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.#cctor">
            <summary>
            Create default instance of symmetric cryptographer.
            </summary>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.Init(ComLib.Cryptography.ICrypto)">
            <summary>
            Initialize to new provider.
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.IsMatch(System.String,System.String)">
            <summary>
            Determine if the plain text and encrypted are ultimately the same.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Cryptography.Crypto.ToMD5Hash(System.String)">
            <summary>
            Calculate the md5 hash of the input text.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Cryptography.Crypto.Provider">
            <summary>
            Get reference to current encryption provider.
            </summary>
        </member>
        <member name="T:ComLib.Collections.PropertyKey">
            <summary>
            Simple class to store and parse the propertyKeys.
            propertyKey = configObjectInstanceName.Key.
            e.g.
            1. "profileOptions.IsEnabled"
            2. "profileOptions.user1.PageSize"
            
            </summary>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.#cctor">
            <summary>
            Static constructor to create the null object.
            </summary>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="key"></param>
            <param name="propName"></param>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.BuildWithoutKey">
            <summary>
            Builds the path by only including the Group and SubGroup if applicable,
            without using the Key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.ToString">
            <summary>
            Return the key in "Group.SubGroup.Key".
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.BuildKey(System.String,System.String,System.String)">
            <summary>
            Builds the property key which is the combination of the group and the key.
            </summary>
            <param name="key"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.BuildKey(System.String,System.String)">
            <summary>
            Builds the object key which is the combination of the group and the key.
            </summary>
            <param name="group"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.PropertyKey.Parse(System.String)">
            <summary>
            Parses the propertyKey string "name.Property" and returns a
            PropertyKey object with the name and property separate.
            </summary>
            <param name="propertyKey"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.PropertyKey.Empty">
            <summary>
            Gets the null object.
            </summary>
        </member>
        <member name="P:ComLib.Collections.PropertyKey.HasSubGroup">
            <summary>
            Whether or not this has a subgroup.
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionaryReadOnly`2">
            <summary>
            Read only wrapper for generics based dictionary.
            Only provides lookup retrieval abilities.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Add(`0,`1)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryReadOnly`2.CheckAndThrow(System.String)">
            <summary>
            Check and thrown based on flag.
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryReadOnly`2.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:ComLib.Collections.IEnumeratorCountable`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.IEnumeratorCountable`1.IsFirst">
            <summary>
            Indicate if current item is first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.IEnumeratorCountable`1.IsLast">
            <summary>
            Indicate if current item is last.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.IEnumeratorCountable`1.IsEmpty">
            <summary>
            Indicates if the enumerator is empty ( it has 0 items ).
            </summary>
        </member>
        <member name="P:ComLib.Collections.IEnumeratorCountable`1.CurrentIndex">
            <summary>
            Get the index of the current item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.IEnumeratorCountable`1.Count">
            <summary>
            Get the total number of items.
            </summary>
        </member>
        <member name="T:ComLib.Collections.EnumeratorCountable`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initialize the list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.Reset">
            <summary>
            Reset the iterator to first item.
            </summary>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.IsFirst">
            <summary>
            Indicates if current item is first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.EnumeratorCountable`1.IsLast">
            <summary>
            Indicates if current item is last.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.Current">
            <summary>
            Get the current item.
            </summary>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.System#Collections#IEnumerator#Current">
            <summary>
            Get the current item in list.
            </summary>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.CurrentIndex">
            <summary>
            Get the index of the current item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.Count">
            <summary>
            Get the total items in the internal list.
            </summary>
        </member>
        <member name="P:ComLib.Collections.EnumeratorCountable`1.IsEmpty">
            <summary>
            Indicate if there are items to iterate over.
            </summary>
        </member>
        <member name="T:ComLib.Collections.DictionaryTypeConversion`1">
            <summary>
            Semi-Generic based dictionary where the values are always strings which 
            can be converted to any type using the public conversion methods such 
            as GetInt(key), GetBool(key) etc.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetInt(`0)">
            <summary>
            Get the value associated with the key as a int.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetBool(`0)">
            <summary>
            Get the value associated with the key as a bool.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetString(`0)">
            <summary>
            Get the value associated with the key as a string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetDouble(`0)">
            <summary>
            Get the value associated with the key as a double.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetDateTime(`0)">
            <summary>
            Get the value associated with the key as a datetime.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetLong(`0)">
            <summary>
            Get the value associated with the key as a long.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Add(`0,System.String)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.TryGetValue(`0,System.String@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Add(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Contains(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.String}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.Remove(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComLib.Collections.DictionaryTypeConversion`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:ComLib.Collections.DictionaryTypeConversion`1.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:ComLib.CodeGeneration.CodeBuilderValidation">
            <summary>
            Builds the validation for the model, this includes it's properties and
            it's composite objects.
            </summary>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.Process(ComLib.Models.ModelContext)">
            <summary>
            Create the ORM mappings in xml file.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForModel(ComLib.Models.ModelContext,ComLib.Models.Model)">
            <summary>
            Build the properties.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Builds the validation code for all entire object, taking into account
            all the validations for each property.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="usePropType"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForStringProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Build validation for string properties.
            This inclues checking for null and length of the string.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="usePropType"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForIntProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Build validation for int properties.
            This inclues checking for null and length of the string.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="usePropType"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForDateTimeProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Build validation for datetime properties.
            This inclues checking for null and length of the string.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="usePropType"></param>
            <param name="buffer"></param>        
        </member>
        <member name="M:ComLib.CodeGeneration.CodeBuilderValidation.BuildValidationForStringRegExProperty(ComLib.Models.Model,ComLib.Models.PropInfo,System.Text.StringBuilder)">
            <summary>
            Build validation for int properties.
            This inclues checking for null and length of the string.
            </summary>
            <param name="model"></param>
            <param name="prop"></param>
            <param name="usePropType"></param>
            <param name="buffer"></param>        
        </member>
    </members>
</doc>
